{"version":3,"file":"index.js","sources":["../balancer-js/src/pool-stable/encoder.ts","../balancer-js/src/pool-weighted/encoder.ts","../balancer-js/src/pool-weighted/normalizedWeights.ts","../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../balancer-js/src/pool-utils/poolId.ts","../balancer-js/src/lib/utils/errors.ts","../balancer-js/src/lib/utils/signatures.ts","../balancer-js/src/lib/utils/permit.ts","../balancer-js/src/lib/utils/assetHelpers.ts","../balancer-js/src/lib/utils/aaveHelpers.ts","../balancer-js/src/lib/utils/poolHelper.ts","../balancer-js/src/lib/utils/index.ts","../balancer-js/src/types.ts","../balancer-js/src/modules/swaps/types.ts","../balancer-js/src/modules/swaps/helpers.ts","../balancer-js/src/lib/constants/network.ts","../balancer-js/src/lib/utils/math.ts","../balancer-js/src/modules/pools/pool-types/concerns/stable/exit.concern.ts","../balancer-js/src/lib/utils/slippageHelper.ts","../balancer-js/src/lib/constants/config.ts","../balancer-js/src/balancerErrors.ts","../balancer-js/src/modules/pools/pool-types/concerns/stable/join.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/stable/liquidity.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/stable/spotPrice.concern.ts","../balancer-js/src/modules/pools/pool-types/stable.module.ts","../balancer-js/src/modules/pools/pool-types/concerns/weighted/exit.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/weighted/join.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/weighted/liquidity.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/weighted/spotPrice.concern.ts","../balancer-js/src/modules/pools/pool-types/weighted.module.ts","../balancer-js/src/modules/pools/pool-types/concerns/metaStable/exit.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/metaStable/join.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/metaStable/liquidity.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/metaStable/spotPrice.concern.ts","../balancer-js/src/modules/pools/pool-types/metaStable.module.ts","../balancer-js/src/modules/pools/pool-types/concerns/stablePhantom/exit.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/stablePhantom/join.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/stablePhantom/liquidity.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/stablePhantom/spotPrice.concern.ts","../balancer-js/src/modules/pools/pool-types/stablePhantom.module.ts","../balancer-js/src/modules/pools/pool-types/concerns/linear/exit.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/linear/join.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/linear/liquidity.concern.ts","../balancer-js/src/modules/pools/pool-types/concerns/linear/spotPrice.concern.ts","../balancer-js/src/modules/pools/pool-types/linear.module.ts","../balancer-js/src/modules/pools/pools.module.ts","../balancer-js/src/modules/liquidity/liquidity.module.ts","../balancer-js/src/modules/swaps/queryBatchSwap.ts","../node_modules/tslib/tslib.es6.js","../node_modules/graphql-tag/lib/index.js","../balancer-js/src/modules/subgraph/generated/balancer-subgraph-types.ts","../balancer-js/src/modules/subgraph/subgraph.ts","../balancer-js/src/modules/contracts/multicall.ts","../balancer-js/src/lib/utils/multiCaller.ts","../balancer-js/src/modules/sor/pool-data/onChainData.ts","../balancer-js/src/modules/sor/pool-data/subgraphPoolDataService.ts","../balancer-js/src/modules/sor/token-price/coingeckoTokenPriceService.ts","../balancer-js/src/modules/sor/token-price/subgraphTokenPriceService.ts","../balancer-js/src/modules/sdk.helpers.ts","../balancer-js/src/modules/sor/sor.module.ts","../balancer-js/src/modules/swaps/flashSwap/index.ts","../balancer-js/src/modules/swaps/swap_builder/swap_utils.ts","../balancer-js/src/modules/swaps/swap_builder/swap_info_decorator.ts","../balancer-js/src/modules/swaps/swap_builder/single_swap_builder.ts","../balancer-js/src/modules/swaps/swap_builder/batch_swap_builder.ts","../balancer-js/src/modules/swaps/swaps.module.ts","../balancer-js/src/modules/relayer/relayer.module.ts","../balancer-js/src/modules/subgraph/subgraph.module.ts","../balancer-js/src/modules/pricing/pricing.module.ts","../balancer-js/src/modules/contracts/ERC20.ts","../balancer-js/src/modules/contracts/contracts.module.ts","../balancer-js/src/modules/pools/provider.ts","../balancer-js/src/modules/data/pool/subgraph.ts","../balancer-js/src/modules/sdk.module.ts","../balancer-js/src/modules/data/pool/fallback.ts","../balancer-js/src/modules/data/pool/static.ts","../balancer-js/src/modules/data/token/static.ts","../balancer-js/src/modules/data/token-price/static.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePhantomPoolJoinKind {\n  INIT = 0,\n  COLLECT_PROTOCOL_FEES,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [StablePoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n   */\n  static joinCollectProtocolFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  MANAGEMENT_FEE_TOKENS_OUT,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [WeightedPoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool for withdrawing management fees.\n   * This can only be done by the pool owner.\n   */\n  static exitForManagementFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [WeightedPoolExitKind.MANAGEMENT_FEE_TOKENS_OUT]\n    );\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce(\n    (total: BigNumber, weight) => total.add(weight),\n    Zero\n  );\n  return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? prefix + \": \" + provided : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): {\n  address: string;\n  specialization: PoolSpecialization;\n  nonce: BigNumber;\n} => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND ',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'UNAUTHORIZED_OPERATION',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean =>\n    Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(\n      ([, message]) => message === error\n    );\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (\n    calldata: string,\n    deadline: BigNumberish,\n    signature: string\n  ): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return {\n      ...splitSignature(signature),\n      deadline: BigNumber.from(deadline),\n    };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{\n  v: number;\n  r: string;\n  s: string;\n  deadline: BigNumber;\n  nonce: BigNumber;\n}> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  const domain = {\n    name: await token.name(),\n    version: '1',\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return {\n    ...splitSignature(signature),\n    deadline: BigNumber.from(deadline),\n    nonce: BigNumber.from(nonce),\n  };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number =>\n  tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1;\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean =>\n    getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string =>\n    this.isETH(token) ? this.WETH : token;\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(\n    tokens: string[],\n    ...others: unknown[][]\n  ): [string[], ...unknown[][]] {\n    others.forEach((array) =>\n      invariant(tokens.length === array.length, 'array length mismatch')\n    );\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [\n      string,\n      ...unknown[]\n    ][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) =>\n      cmpTokens(tokenA, tokenB)\n    );\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(\n      sortedTranspose\n    ) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","import { JsonRpcProvider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\n\nimport aTokenRateProviderAbi from '../abi/StaticATokenRateProvider.json';\n\nexport class AaveHelpers {\n  static async getRate(\n    rateProviderAddress: string,\n    provider: JsonRpcProvider\n  ): Promise<string> {\n    const rateProviderContract = new Contract(\n      rateProviderAddress,\n      aTokenRateProviderAbi,\n      provider\n    );\n\n    const rate = await rateProviderContract.getRate();\n    return rate.toString();\n  }\n}\n","import { parseFixed } from '@ethersproject/bignumber';\nimport { Pool } from '../../types';\n\nconst AMP_PRECISION = 3; // number of decimals -> precision 1000\n\n/**\n * Parse pool info into EVM amounts\n * @param {Pool}  pool\n * @returns       parsed pool info\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const parsePoolInfo = (pool: Pool) => {\n  const parsedTokens = pool.tokens.map((token) => token.address);\n  const parsedBalances = pool.tokens.map((token) =>\n    parseFixed(token.balance, token.decimals).toString()\n  );\n  const parsedWeights = pool.tokens.map((token) => {\n    return token.weight ? parseFixed(token.weight, 18).toString() : undefined;\n  });\n  const parsedPriceRates = pool.tokens.map((token) => {\n    return token.priceRate\n      ? parseFixed(token.priceRate, 18).toString()\n      : undefined;\n  });\n  const parsedAmp = pool.amp\n    ? parseFixed(pool.amp, AMP_PRECISION).toString() // Solidity maths uses precison method for amp that must be replicated\n    : undefined;\n  const parsedTotalShares = parseFixed(pool.totalShares, 18).toString();\n  const parsedSwapFee = parseFixed(pool.swapFee, 18).toString();\n  return {\n    parsedTokens,\n    parsedBalances,\n    parsedWeights,\n    parsedPriceRates,\n    parsedAmp,\n    parsedTotalShares,\n    parsedSwapFee,\n  };\n};\n","import { getAddress } from '@ethersproject/address';\n\nexport * from './errors';\nexport * from './permit';\nexport * from './signatures';\nexport * from './assetHelpers';\nexport * from './aaveHelpers';\nexport * from './poolHelper';\n\nexport const isSameAddress = (address1: string, address2: string): boolean =>\n  getAddress(address1) === getAddress(address2);\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { Network } from './lib/constants/network';\nimport { Contract } from '@ethersproject/contracts';\nimport { PoolDataService, TokenPriceService } from '@balancer-labs/sor';\nimport {\n  ExitPoolAttributes,\n  JoinPoolAttributes,\n} from './modules/pools/pool-types/concerns/types';\n\nexport type Address = string;\n\nexport interface BalancerSdkConfig {\n  //use a known network or provide an entirely custom config\n  network: Network | BalancerNetworkConfig;\n  rpcUrl: string;\n  //overwrite the subgraph url if you don't want to use the balancer labs maintained version\n  customSubgraphUrl?: string;\n  //optionally overwrite parts of the standard SOR config\n  sor?: Partial<BalancerSdkSorConfig>;\n}\n\nexport interface BalancerSdkSorConfig {\n  //use a built-in service or provide a custom implementation of a TokenPriceService\n  //defaults to coingecko\n  tokenPriceService: 'coingecko' | 'subgraph' | TokenPriceService;\n  //use a built-in service or provide a custom implementation of a PoolDataService\n  //defaults to subgraph\n  poolDataService: 'subgraph' | PoolDataService;\n  //if a custom PoolDataService is provided, on chain balance fetching needs to be handled externally\n  //default to true.\n  fetchOnChainBalances: boolean;\n}\n\nexport interface ContractAddresses {\n  vault: string;\n  multicall: string;\n  lidoRelayer?: string;\n}\n\nexport interface BalancerNetworkConfig {\n  chainId: Network;\n  addresses: {\n    contracts: ContractAddresses;\n    tokens: {\n      wrappedNativeAsset: string;\n      lbpRaisingTokens?: string[];\n      stETH?: string;\n      wstETH?: string;\n    };\n  };\n  urls: {\n    subgraph: string;\n  };\n  pools: {\n    wETHwstETH?: PoolReference;\n  };\n}\n\nexport type PoolReference = {\n  id: string;\n  address: string;\n};\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: string[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n\nexport interface TransactionData {\n  contract?: Contract;\n  function: string;\n  params: string[];\n  outputs?: {\n    amountsIn?: string[];\n    amountsOut?: string[];\n  };\n}\n\nexport type Currency = 'eth' | 'usd';\n\nexport type Price = { [currency in Currency]?: string };\nexport type TokenPrices = { [address: string]: Price };\n\nexport interface Token {\n  address: string;\n  decimals?: number;\n  symbol?: string;\n  price?: Price;\n}\n\nexport interface PoolToken extends Token {\n  balance: string;\n  priceRate?: string;\n  weight?: string | null;\n}\n\nexport interface OnchainTokenData {\n  balance: string;\n  weight: number;\n  decimals: number;\n  logoURI: string | undefined;\n  name: string;\n  symbol: string;\n}\n\nexport interface OnchainPoolData {\n  tokens: Record<Address, OnchainTokenData>;\n  totalSupply: string;\n  decimals: number;\n  swapFee: string;\n  amp?: string;\n  swapEnabled: boolean;\n  tokenRates?: string[];\n}\n\nexport enum PoolType {\n  Weighted = 'Weighted',\n  Investment = 'Investment',\n  Stable = 'Stable',\n  MetaStable = 'MetaStable',\n  StablePhantom = 'StablePhantom',\n  LiquidityBootstrapping = 'LiquidityBootstrapping',\n  AaveLinear = 'AaveLinear',\n  ERC4626Linear = 'ERC4626Linear',\n  Element = 'Element',\n}\n\nexport interface Pool {\n  id: string;\n  address: string;\n  poolType: PoolType;\n  swapFee: string;\n  owner?: string;\n  factory?: string;\n  tokens: PoolToken[];\n  tokensList: string[];\n  tokenAddresses?: string[];\n  totalLiquidity?: string;\n  totalShares: string;\n  totalSwapFee?: string;\n  totalSwapVolume?: string;\n  onchain?: OnchainPoolData;\n  createTime?: number;\n  mainTokens?: string[];\n  wrappedTokens?: string[];\n  unwrappedTokens?: string[];\n  isNew?: boolean;\n  volumeSnapshot?: string;\n  feesSnapshot?: string;\n  boost?: string;\n  symbol?: string;\n  amp?: string;\n}\n\nexport interface PoolModel extends Pool {\n  liquidity: () => Promise<string>;\n  buildJoin: (\n    joiner: string,\n    tokensIn: string[],\n    amountsIn: string[],\n    slippage: string\n  ) => JoinPoolAttributes;\n  buildExitExactBPTIn: (\n    exiter: string,\n    bptIn: string,\n    slippage: string,\n    shouldUnwrapNativeAsset?: boolean,\n    singleTokenMaxOut?: string\n  ) => ExitPoolAttributes;\n  buildExitExactTokensOut: (\n    exiter: string,\n    tokensOut: string[],\n    amountsOut: string[],\n    slippage: string\n  ) => ExitPoolAttributes;\n}\n","import { SwapInfo } from '@balancer-labs/sor';\nimport { Vault } from '@balancer-labs/typechain';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nexport enum SwapType {\n  SwapExactIn,\n  SwapExactOut,\n}\n\nexport type FundManagement = {\n  sender: string;\n  recipient: string;\n  fromInternalBalance: boolean;\n  toInternalBalance: boolean;\n};\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapType;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  request: SingleSwap;\n  funds: FundManagement;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n  value?: BigNumberish;\n  outputReference?: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: string;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapType;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n  value?: BigNumberish;\n  outputReferences?: { index: BigNumberish; key: BigNumberish }[];\n};\n\nexport interface FetchPoolsInput {\n  fetchPools: boolean;\n  fetchOnChain: boolean;\n}\n\nexport interface QueryWithSorInput {\n  tokensIn: string[];\n  tokensOut: string[];\n  swapType: SwapType;\n  amounts: string[];\n  fetchPools: FetchPoolsInput;\n}\n\nexport interface SwapInput {\n  tokenIn: string;\n  tokenOut: string;\n  swapType: SwapType;\n  amount: string;\n}\n\nexport interface QueryWithSorOutput {\n  returnAmounts: string[];\n  swaps: BatchSwapStep[];\n  assets: string[];\n  deltas: string[];\n}\n\nexport interface QuerySimpleFlashSwapParameters {\n  poolIds: string[];\n  assets: BatchSwap['assets'];\n  flashLoanAmount: string;\n  vaultContract: Vault;\n}\n\nexport interface SimpleFlashSwapParameters {\n  poolIds: string[];\n  assets: BatchSwap['assets'];\n  flashLoanAmount: string;\n  walletAddress: string;\n}\n\nexport interface QuerySimpleFlashSwapResponse {\n  profits: Record<string, string>;\n  isProfitable: boolean;\n}\n\nexport interface FindRouteParameters {\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumber;\n  gasPrice: BigNumber;\n  maxPools: number;\n}\n\nexport interface BuildTransactionParameters {\n  userAddress: string;\n  recipient?: string;\n  swapInfo: SwapInfo;\n  kind: SwapType;\n  deadline: BigNumber;\n  maxSlippage: number;\n}\n\nexport interface SwapTransactionRequest {\n  to: string;\n  data: string;\n  value?: BigNumber;\n}\n\nexport interface SwapAttributes {\n  to: string;\n  functionName: string;\n  attributes: Swap | BatchSwap;\n  data: string;\n  value?: BigNumber;\n}\n","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\n\nimport { SwapType } from './types';\nimport { isSameAddress } from '@/lib/utils';\n\n/**\n * Helper to create limits using a defined slippage amount.\n * @param tokensIn - Array of token in addresses.\n * @param tokensOut - Array of token out addresses.\n * @param swapType - Type of swap - SwapExactIn or SwapExactOut\n * @param deltas - An array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array.\n * @param assets - array contains the addresses of all assets involved in the swaps.\n * @param slippage - Slippage to be applied. i.e. 5%=50000000000000000.\n * @returns Returns an array (same length as assets) with limits applied for each asset.\n */\nexport function getLimitsForSlippage(\n  tokensIn: string[],\n  tokensOut: string[],\n  swapType: SwapType,\n  deltas: BigNumberish[],\n  assets: string[],\n  slippage: BigNumberish\n): BigNumberish[] {\n  // Limits:\n  // +ve means max to send\n  // -ve mean min to receive\n  // For a multihop the intermediate tokens should be 0\n  const limits: BigNumber[] = new Array(assets.length).fill(Zero);\n\n  assets.forEach((token, i) => {\n    if (tokensIn.some((tokenIn) => isSameAddress(token, tokenIn))) {\n      // For SwapExactOut slippage is on tokenIn, i.e. amtIn + slippage\n      const slippageAmount = BigNumber.from(slippage).add(WeiPerEther);\n      limits[i] =\n        swapType === SwapType.SwapExactOut\n          ? limits[i].add(\n              BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)\n            )\n          : limits[i].add(deltas[i]);\n    }\n\n    if (tokensOut.some((tokenOut) => isSameAddress(token, tokenOut))) {\n      // For SwapExactIn slippage is on tokenOut, i.e. amtOut - slippage\n      const slippageAmount = WeiPerEther.sub(BigNumber.from(slippage));\n      limits[i] =\n        swapType === SwapType.SwapExactIn\n          ? limits[i].add(\n              BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)\n            )\n          : limits[i].add(deltas[i]);\n    }\n  });\n\n  return limits;\n}\n","export enum Network {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GOERLI = 5,\n  GÖRLI = 5,\n  KOVAN = 42,\n  POLYGON = 137,\n  ARBITRUM = 42161,\n  AURORA = 1313161554,\n  AURORATEST = 1313161555,\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  parseFixed as _parseFixed,\n} from '@ethersproject/bignumber';\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n  const valueWithTrimmedDecimals = new RegExp(`[0-9]+\\\\.?[0-9]{0,${decimals}}`);\n  const result = value.match(valueWithTrimmedDecimals);\n  let parsedValue = value;\n  if (result) {\n    parsedValue = result[0];\n  }\n\n  return _parseFixed(parsedValue, decimals);\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPoolAttributes,\n} from '../types';\n\nexport class StablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\nconst bpsPerOne = BigNumber.from('10000'); // number of basis points in 100%\n\n/**\n * Multiplies input by slippage amount\n *\n * @param {BigNumber} amount Input amount (not parsed)\n * @param {BigNumber} slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result delta from multiplying amount and slippage\n */\nexport const mulSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = amount.mul(slippage).div(bpsPerOne);\n  return delta;\n};\n\n/**\n * Reduce input amount by slippage factor\n *\n * @param {BigNumber} amount Input in EVM amounts\n * @param {BigNumber} slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result amount subtracting slippage\n */\nexport const subSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = mulSlippage(amount, slippage);\n  return amount.sub(delta);\n};\n\n/**\n * Increase input amount by slippage factor\n *\n * @param {BigNumber} amount Input in EVM amounts\n * @param {BigNumber} slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result amount adding slippage\n */\nexport const addSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = mulSlippage(amount, slippage);\n  return amount.add(delta);\n};\n","import { Network } from './network';\nimport { BalancerNetworkConfig } from '@/types';\n\nexport const balancerVault = '0x6985436a0E5247A3E1dc29cdA9e1D89C5b59e26b';\n\nexport const BALANCER_NETWORK_CONFIG: Record<Network, BalancerNetworkConfig> = {\n  [Network.MAINNET]: {\n    chainId: Network.MAINNET, //1\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n        lidoRelayer: '0xdcdbf71A870cc60C6F9B621E28a7D3Ffd6Dd4965',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        lbpRaisingTokens: [\n          '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n          '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n          '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        ],\n        stETH: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n        wstETH: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2',\n    },\n    pools: {\n      wETHwstETH: {\n        id: '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',\n        address: '0x32296969ef14eb0c6d29669c550d4a0449130230',\n      },\n    },\n  },\n  [Network.POLYGON]: {\n    chainId: Network.POLYGON, //137\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0xa1B2b503959aedD81512C37e9dce48164ec6a94d',\n      },\n      tokens: {\n        wrappedNativeAsset: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-polygon-v2',\n    },\n    pools: {},\n  },\n  [Network.ARBITRUM]: {\n    chainId: Network.ARBITRUM, //42161\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x269ff446d9892c9e19082564df3f5e8741e190a1',\n      },\n      tokens: {\n        wrappedNativeAsset: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-arbitrum-v2',\n    },\n    pools: {},\n  },\n  [Network.KOVAN]: {\n    chainId: Network.KOVAN, //42\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-kovan-v2',\n    },\n    pools: {},\n  },\n  [Network.ROPSTEN]: {\n    chainId: Network.ROPSTEN, //3\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x53c43764255c17bd724f74c4ef150724ac50a3ed',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph: '',\n    },\n    pools: {},\n  },\n  [Network.RINKEBY]: {\n    chainId: Network.RINKEBY, //4\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-rinkeby-v2',\n    },\n    pools: {},\n  },\n  [Network.GOERLI]: {\n    chainId: Network.GOERLI, //5\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2',\n    },\n    pools: {},\n  },\n  [Network.AURORA]: {\n    chainId: Network.AURORA, //1313161554\n    addresses: {\n      contracts: {\n        vault: '0x6985436a0E5247A3E1dc29cdA9e1D89C5b59e26b',\n        multicall: '0x04364F8908BDCB4cc7EA881d0DE869398BA849C9',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/polarisfinance/polaris-dex',\n    },\n    pools: {},\n  },\n  [Network.AURORATEST]: {\n    chainId: Network.AURORATEST, //1313161555\n    addresses: {\n      contracts: {\n        vault: '0x914A10f5596ab67ff21a278986E7767213Bd967E',\n        multicall: '0x3a4773e600086A753862621A26a2E3274610da43',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/polarisfinance/polaris-dex-testnet',\n    },\n    pools: {},\n  },\n};\n\nexport const networkAddresses = (\n  chainId: number\n): BalancerNetworkConfig['addresses'] =>\n  BALANCER_NETWORK_CONFIG[chainId as Network].addresses;\n","export enum BalancerErrorCode {\n  SWAP_ZERO_RETURN_AMOUNT = 'SWAP_ZERO_RETURN_AMOUNT',\n  UNWRAP_ZERO_AMOUNT = 'UNWRAP_ZERO_AMOUNT',\n  WRAP_ZERO_AMOUNT = 'WRAP_ZERO_AMOUNT',\n  QUERY_BATCH_SWAP = 'QUERY_BATCH_SWAP',\n  POOL_DOESNT_EXIST = 'POOL_DOESNT_EXIST',\n  UNSUPPORTED_POOL_TYPE = 'UNSUPPORTED_POOL_TYPE',\n  UNSUPPORTED_PAIR = 'UNSUPPORTED_PAIR',\n  NO_POOL_DATA = 'NO_POOL_DATA',\n  INPUT_OUT_OF_BOUNDS = 'INPUT_OUT_OF_BOUNDS',\n  INPUT_LENGTH_MISMATCH = 'INPUT_LENGTH_MISMATCH',\n  TOKEN_MISMATCH = 'TOKEN_MISMATCH',\n  MISSING_TOKENS = 'MISSING_TOKENS',\n  MISSING_AMP = 'MISSING_AMP',\n  MISSING_DECIMALS = 'MISSING_DECIMALS',\n  MISSING_PRICE_RATE = 'MISSING_PRICE_RATE',\n  MISSING_WEIGHT = 'MISSING_WEIGHT',\n}\n\nexport class BalancerError extends Error {\n  constructor(public code: BalancerErrorCode) {\n    super(BalancerError.getMessage(code));\n    this.name = 'BalancerError';\n  }\n\n  static getMessage(code: BalancerErrorCode): string {\n    switch (code) {\n      case BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT:\n        return 'queryBatchSwapWithSor returned 0 amount';\n      case BalancerErrorCode.UNWRAP_ZERO_AMOUNT:\n        return 'swapUnwrapAaveStaticExactIn unwrapped amount < 0';\n      case BalancerErrorCode.WRAP_ZERO_AMOUNT:\n        return 'swapUnwrapAaveStaticExactOut wrapped amount < 0';\n      case BalancerErrorCode.QUERY_BATCH_SWAP:\n        return 'queryBatchSwap on chain call error';\n      case BalancerErrorCode.POOL_DOESNT_EXIST:\n        return 'balancer pool does not exist';\n      case BalancerErrorCode.UNSUPPORTED_POOL_TYPE:\n        return 'unsupported pool type';\n      case BalancerErrorCode.UNSUPPORTED_PAIR:\n        return 'unsupported token pair';\n      case BalancerErrorCode.NO_POOL_DATA:\n        return 'no pool data';\n      case BalancerErrorCode.INPUT_OUT_OF_BOUNDS:\n        return 'input out of bounds';\n      case BalancerErrorCode.INPUT_LENGTH_MISMATCH:\n        return 'input length mismatch';\n      case BalancerErrorCode.TOKEN_MISMATCH:\n        return 'token mismatch';\n      case BalancerErrorCode.MISSING_DECIMALS:\n        return 'missing decimals';\n      case BalancerErrorCode.MISSING_TOKENS:\n        return 'missing tokens';\n      case BalancerErrorCode.MISSING_AMP:\n        return 'missing amp';\n      case BalancerErrorCode.MISSING_PRICE_RATE:\n        return 'missing price rate';\n      case BalancerErrorCode.MISSING_WEIGHT:\n        return 'missing weight';\n      default:\n        return 'Unknown error';\n    }\n  }\n}\n","import OldBigNumber from 'bignumber.js';\nimport * as SDK from '@georgeroman/balancer-v2-pools';\n\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { StablePoolEncoder } from '@/pool-stable';\n\nexport class StablePoolJoin implements JoinConcern {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param {JoinPoolParameters}  params - parameters used to build exact tokens in for bpt out transaction\n   * @param {string}              params.joiner - Account address joining pool\n   * @param {Pool}                params.pool - Subgraph pool object of pool being joined\n   * @param {string[]}            params.tokensIn - Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param {string[]}            params.amountsIn -  - Token amounts provided for joining pool in EVM amounts\n   * @param {string}              params.slippage - Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @returns                     transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort inputs\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    // sort pool info\n    const [, sortedBalances] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances\n    ) as [string[], string[]];\n\n    const expectedBPTOut = SDK.StableMath._calcBptOutGivenExactTokensIn(\n      new OldBigNumber(parsedAmp as string),\n      sortedBalances.map((b) => new OldBigNumber(b)),\n      sortedAmounts.map((a) => new OldBigNumber(a)),\n      new OldBigNumber(parsedTotalShares),\n      new OldBigNumber(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmounts,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return { to, functionName, attributes, data, value, minBPTOut };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\n\nconst SCALING_FACTOR = 18;\n\nexport class StablePoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = BigNumber.from(0);\n    let sumValue = BigNumber.from(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd, SCALING_FACTOR);\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, StablePool, ZERO } from '@balancer-labs/sor';\n\nexport class StablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pool: SubgraphPoolBase\n  ): string {\n    const poolClass = StablePool.fromPool(pool);\n    const poolPairData = poolClass.parsePoolPairData(tokenIn, tokenOut);\n    return poolClass\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { StablePoolExit } from './concerns/stable/exit.concern';\nimport { StablePoolJoin } from './concerns/stable/join.concern';\nimport { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { StablePoolSpotPrice } from './concerns/stable/spotPrice.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Stable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePoolExit(),\n    public join: JoinConcern = new StablePoolJoin(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new StablePoolSpotPrice()\n  ) {}\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport OldBigNumber from 'bignumber.js';\nimport * as SDK from '@georgeroman/balancer-v2-pools';\nimport {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPool,\n  ExitPoolAttributes,\n} from '../types';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport { balancerVault } from '@/lib/constants/config';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { AddressZero } from '@ethersproject/constants';\n\nexport class WeightedPoolExit implements ExitConcern {\n  /**\n   * Build exit pool transaction parameters with exact BPT in and minimum token amounts out based on slippage tolerance\n   * @param {string}  exiter - Account address exiting pool\n   * @param {Pool}    pool - Subgraph pool object of pool being exited\n   * @param {string}  bptIn - BPT provided for exiting pool\n   * @param {string}  slippage - Maximum slippage tolerance in percentage. i.e. 0.05 = 5%\n   * @param {boolean} shouldUnwrapNativeAsset - Indicates wether wrapped native asset should be unwrapped after exit.\n   * @param {string}  wrappedNativeAsset - Address of wrapped native asset for specific network config. Required for exiting to native asset.\n   * @param {string}  singleTokenMaxOut - Optional: token address that if provided will exit to given token\n   * @returns         transaction request ready to send with signer.sendTransaction\n   */\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitPoolAttributes => {\n    if (!bptIn.length || parseFixed(bptIn, 18).isNegative()) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (\n      singleTokenMaxOut &&\n      singleTokenMaxOut !== AddressZero &&\n      !pool.tokens.map((t) => t.address).some((a) => a === singleTokenMaxOut)\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n    if (!shouldUnwrapNativeAsset && singleTokenMaxOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenMaxOut should not have conflicting values'\n      );\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedWeights,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    // Replace WETH address with ETH - required for exiting with ETH\n    const unwrappedTokens = parsedTokens.map((token) =>\n      token === wrappedNativeAsset ? AddressZero : token\n    );\n\n    // Sort pool info based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [sortedTokens, sortedBalances, sortedWeights] =\n      assetHelpers.sortTokens(\n        shouldUnwrapNativeAsset ? unwrappedTokens : parsedTokens,\n        parsedBalances,\n        parsedWeights\n      ) as [string[], string[], string[]];\n\n    let minAmountsOut = Array(sortedTokens.length).fill('0');\n    let userData: string;\n\n    if (singleTokenMaxOut) {\n      // Exit pool with single token using exact bptIn\n\n      const singleTokenMaxOutIndex = sortedTokens.indexOf(singleTokenMaxOut);\n\n      // Calculate amount out given BPT in\n      const amountOut = SDK.WeightedMath._calcTokenOutGivenExactBptIn(\n        new OldBigNumber(sortedBalances[singleTokenMaxOutIndex]),\n        new OldBigNumber(sortedWeights[singleTokenMaxOutIndex]),\n        new OldBigNumber(bptIn),\n        new OldBigNumber(parsedTotalShares),\n        new OldBigNumber(parsedSwapFee)\n      ).toString();\n\n      // Apply slippage\n      minAmountsOut[singleTokenMaxOutIndex] = subSlippage(\n        BigNumber.from(amountOut),\n        BigNumber.from(slippage)\n      ).toString();\n\n      userData = WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n        bptIn,\n        singleTokenMaxOutIndex\n      );\n    } else {\n      // Exit pool with all tokens proportinally\n\n      // Calculate amounts out given BPT in\n      const amountsOut = SDK.WeightedMath._calcTokensOutGivenExactBptIn(\n        sortedBalances.map((b) => new OldBigNumber(b)),\n        new OldBigNumber(bptIn),\n        new OldBigNumber(parsedTotalShares)\n      ).map((amount) => amount.toString());\n\n      // Apply slippage\n      minAmountsOut = amountsOut.map((amount) => {\n        const minAmount = subSlippage(\n          BigNumber.from(amount),\n          BigNumber.from(slippage)\n        );\n        return minAmount.toString();\n      });\n\n      userData = WeightedPoolEncoder.exitExactBPTInForTokensOut(bptIn);\n    }\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      minAmountsOut,\n      maxBPTIn: bptIn,\n    };\n  };\n\n  /**\n   * Build exit pool transaction parameters with exact tokens out and maximum BPT in based on slippage tolerance\n   * @param {string}    exiter - Account address exiting pool\n   * @param {Pool}      pool - Subgraph pool object of pool being exited\n   * @param {string[]}  tokensOut - Tokens provided for exiting pool\n   * @param {string[]}  amountsOut - Amoutns provided for exiting pool\n   * @param {string}    slippage - Maximum slippage tolerance in percentage. i.e. 0.05 = 5%\n   * @param {string}    wrappedNativeAsset - Address of wrapped native asset for specific network config. Required for exiting with ETH.\n   * @returns           transaction request ready to send with signer.sendTransaction\n   */\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitPoolAttributes => {\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedWeights,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    // Sort pool info and inputs based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [, sortedBalances, sortedWeights] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedWeights\n    ) as [string[], string[], string[]];\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // Calculate expected BPT in given tokens out\n    const bptIn = SDK.WeightedMath._calcBptInGivenExactTokensOut(\n      sortedBalances.map((b) => new OldBigNumber(b)),\n      sortedWeights.map((w) => new OldBigNumber(w)),\n      sortedAmounts.map((a) => new OldBigNumber(a)),\n      new OldBigNumber(parsedTotalShares),\n      new OldBigNumber(parsedSwapFee)\n    ).toString();\n\n    // Apply slippage\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = WeightedPoolEncoder.exitBPTInForExactTokensOut(\n      sortedAmounts,\n      maxBPTIn\n    );\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut: sortedAmounts,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      minAmountsOut: sortedAmounts,\n      maxBPTIn,\n    };\n  };\n}\n","import { WeightedMaths } from '@balancer-labs/sor';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nexport class WeightedPoolJoin implements JoinConcern {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param {JoinPoolParameters} params - parameters used to build exact tokens in for bpt out transaction\n   * @param {string}                          params.joiner - Account address joining pool\n   * @param {SubgraphPoolBase}                params.pool - Subgraph pool object of pool being joined\n   * @param {string[]}                        params.tokensIn - Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param {string[]}                        params.amountsIn -  - Token amounts provided for joining pool in EVM amounts\n   * @param {string}                          params.slippage - Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @param {string}                          wrappedNativeAsset - Address of wrapped native asset for specific network config. Required for joining with ETH.\n   * @returns                                 transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant weighted pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (pool.tokens.some((token) => !token.weight))\n      throw new BalancerError(BalancerErrorCode.MISSING_WEIGHT);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedWeights,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort inputs\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    // sort pool info\n    const [, sortedBalances, sortedWeights] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedWeights\n    ) as [string[], string[], string[]];\n\n    const expectedBPTOut = WeightedMaths._calcBptOutGivenExactTokensIn(\n      sortedBalances.map((b) => BigInt(b)),\n      sortedWeights.map((w) => BigInt(w)),\n      sortedAmounts.map((a) => BigInt(a)),\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmounts,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return { to, functionName, attributes, data, value, minBPTOut };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\n\nexport class WeightedPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumWeight = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (!token.price?.usd) {\n        continue;\n      }\n      const price = parseFixed(token.price.usd, SCALING_FACTOR);\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumWeight = sumWeight.add(token.weight || '0');\n    }\n\n    // Scale the known prices of x% of the pool to get value of 100% of the pool.\n    const totalWeight = tokens.reduce(\n      (total: BigNumber, token) => total.add(token.weight || '0'),\n      Zero\n    );\n    if (sumWeight.gt(0)) {\n      const liquidity = sumValue.mul(totalWeight).div(sumWeight);\n      return formatFixed(liquidity, SCALING_FACTOR * 2);\n    }\n\n    return '0';\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, WeightedPool, ZERO } from '@balancer-labs/sor';\n\nexport class WeightedPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pool: SubgraphPoolBase\n  ): string {\n    const weightedPool = WeightedPool.fromPool(pool);\n    const poolPairData = weightedPool.parsePoolPairData(tokenIn, tokenOut);\n    return weightedPool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { WeightedPoolExit } from './concerns/weighted/exit.concern';\nimport { WeightedPoolJoin } from './concerns/weighted/join.concern';\nimport { WeightedPoolLiquidity } from './concerns/weighted/liquidity.concern';\nimport { WeightedPoolSpotPrice } from './concerns/weighted/spotPrice.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Weighted implements PoolType {\n  constructor(\n    public exit: ExitConcern = new WeightedPoolExit(),\n    public join: JoinConcern = new WeightedPoolJoin(),\n    public liquidity: LiquidityConcern = new WeightedPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new WeightedPoolSpotPrice()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPoolAttributes,\n} from '../types';\n\nexport class MetaStablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import OldBigNumber from 'bignumber.js';\nimport * as SDK from '@georgeroman/balancer-v2-pools';\n\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { StablePoolEncoder } from '@/pool-stable';\n\nexport class MetaStablePoolJoin implements JoinConcern {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param {JoinPoolParameters}  params - parameters used to build exact tokens in for bpt out transaction\n   * @param {string}              params.joiner - Account address joining pool\n   * @param {Pool}                params.pool - Subgraph pool object of pool being joined\n   * @param {string[]}            params.tokensIn - Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param {string[]}            params.amountsIn -  - Token amounts provided for joining pool in EVM amounts\n   * @param {string}              params.slippage - Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @returns                     transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant meta stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n    if (pool.tokens.some((token) => !token.priceRate))\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedPriceRates,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort input\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    // sort pool info\n    const [, sortedBalances, sortedPriceRates] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedPriceRates\n    ) as [string[], string[], string[]];\n\n    // scale amounts in based on price rate for each token\n    const scaledAmounts = sortedAmounts.map((amount, i) => {\n      return BigNumber.from(amount)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    // scale balances based on price rate for each token\n    const scaledBalances = sortedBalances.map((balance, i) => {\n      return BigNumber.from(balance)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    // TODO: check if it's ok to remove amounts/balances scaled logic since it's cancelling itself out\n    const expectedBPTOut = SDK.StableMath._calcBptOutGivenExactTokensIn(\n      new OldBigNumber(parsedAmp as string),\n      scaledBalances.map((b) => new OldBigNumber(b)),\n      scaledAmounts.map((a) => new OldBigNumber(a)),\n      new OldBigNumber(parsedTotalShares),\n      new OldBigNumber(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmounts,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return { to, functionName, attributes, data, value, minBPTOut };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\n\nexport class MetaStablePoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd, SCALING_FACTOR);\n\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, MetaStablePool, ZERO } from '@balancer-labs/sor';\n\nexport class MetaStablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pool: SubgraphPoolBase\n  ): string {\n    const poolClass = MetaStablePool.fromPool(pool);\n    const poolPairData = poolClass.parsePoolPairData(tokenIn, tokenOut);\n    return poolClass\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { MetaStablePoolExit } from './concerns/metaStable/exit.concern';\nimport { MetaStablePoolJoin } from './concerns/metaStable/join.concern';\nimport { MetaStablePoolLiquidity } from './concerns/metaStable/liquidity.concern';\nimport { MetaStablePoolSpotPrice } from './concerns/metaStable/spotPrice.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class MetaStable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new MetaStablePoolExit(),\n    public join: JoinConcern = new MetaStablePoolJoin(),\n    public liquidity: LiquidityConcern = new MetaStablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new MetaStablePoolSpotPrice()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPoolAttributes,\n} from '../types';\n\nexport class StablePhantomPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { JoinPoolParameters, JoinConcern, JoinPoolAttributes } from '../types';\n\nexport class StablePhantomPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    // TODO implementation\n    console.log(\n      joiner,\n      pool,\n      tokensIn,\n      amountsIn,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\n\nexport class StablePhantomPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    if (tokens.length > 0) {\n      throw new Error(\n        'Not Implemented - StablePhantom liquidity should all come from sub-pools.'\n      );\n    }\n\n    return '0';\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, PhantomStablePool, ZERO } from '@balancer-labs/sor';\n\nexport class StablePhantomPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pool: SubgraphPoolBase\n  ): string {\n    const poolClass = PhantomStablePool.fromPool(pool);\n    const poolPairData = poolClass.parsePoolPairData(tokenIn, tokenOut);\n    return poolClass\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { StablePhantomPoolExit } from './concerns/stablePhantom/exit.concern';\nimport { StablePhantomPoolJoin } from './concerns/stablePhantom/join.concern';\nimport { StablePhantomPoolLiquidity } from './concerns/stablePhantom/liquidity.concern';\nimport { StablePhantomPoolSpotPrice } from './concerns/stablePhantom/spotPrice.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class StablePhantom implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePhantomPoolExit(),\n    public join: JoinConcern = new StablePhantomPoolJoin(),\n    public liquidity: LiquidityConcern = new StablePhantomPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new StablePhantomPoolSpotPrice()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPoolAttributes,\n} from '../types';\n\nexport class LinearPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitPoolAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { JoinPoolParameters, JoinConcern, JoinPoolAttributes } from '../types';\n\nexport class LinearPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    // TODO implementation\n    console.log(\n      joiner,\n      pool,\n      tokensIn,\n      amountsIn,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\nconst ONE = parseFixed('1', SCALING_FACTOR);\n\nexport class LinearPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd, SCALING_FACTOR);\n\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n      const value = balance.mul(price);\n\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const priceRate = parseFixed(token.priceRate || '1', SCALING_FACTOR);\n\n        // Apply priceRate to scale the balance correctly\n        const balance = parseFixed(token.balance, SCALING_FACTOR)\n          .mul(priceRate)\n          .div(ONE);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    const totalLiquidity = formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n    return totalLiquidity;\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, LinearPool, ZERO } from '@balancer-labs/sor';\n\nexport class LinearPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pool: SubgraphPoolBase\n  ): string {\n    const poolClass = LinearPool.fromPool(pool);\n    const poolPairData = poolClass.parsePoolPairData(tokenIn, tokenOut);\n    return poolClass\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { LinearPoolExit } from './concerns/linear/exit.concern';\nimport { LinearPoolJoin } from './concerns/linear/join.concern';\nimport { LinearPoolLiquidity } from './concerns/linear/liquidity.concern';\nimport { LinearPoolSpotPrice } from './concerns/linear/spotPrice.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Linear implements PoolType {\n  constructor(\n    public exit: ExitConcern = new LinearPoolExit(),\n    public join: JoinConcern = new LinearPoolJoin(),\n    public liquidity: LiquidityConcern = new LinearPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new LinearPoolSpotPrice()\n  ) {}\n}\n","import { BalancerSdkConfig, PoolType } from '@/types';\nimport { Stable } from './pool-types/stable.module';\nimport { Weighted } from './pool-types/weighted.module';\nimport { MetaStable } from './pool-types/metaStable.module';\nimport { StablePhantom } from './pool-types/stablePhantom.module';\nimport { Linear } from './pool-types/linear.module';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nexport class Pools {\n  constructor(\n    config: BalancerSdkConfig,\n    public weighted = new Weighted(),\n    public stable = new Stable(),\n    public metaStable = new MetaStable(),\n    public stablePhantom = new StablePhantom(),\n    public linear = new Linear()\n  ) {}\n\n  static from(\n    poolType: PoolType\n  ): Weighted | Stable | MetaStable | StablePhantom | Linear {\n    // Calculate spot price using pool type\n    switch (poolType) {\n      case 'Weighted':\n      case 'Investment':\n      case 'LiquidityBootstrapping': {\n        return new Weighted();\n      }\n      case 'Stable': {\n        return new Stable();\n      }\n      case 'MetaStable': {\n        return new MetaStable();\n      }\n      case 'StablePhantom': {\n        return new StablePhantom();\n      }\n      case 'AaveLinear':\n      case 'ERC4626Linear': {\n        return new Linear();\n      }\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  }\n}\n","import { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Pool, PoolToken } from '@/types';\nimport { Pools } from '@/modules/pools/pools.module';\nimport { PoolRepository } from '../data';\nimport { TokenPriceProvider } from '../data';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 36;\nconst TOKEN_WEIGHT_SCALING_FACTOR = 18;\n\nexport interface PoolBPTValue {\n  address: string;\n  liquidity: string;\n}\n\nexport class Liquidity {\n  constructor(\n    private pools: PoolRepository,\n    private tokenPrices: TokenPriceProvider\n  ) {}\n\n  async getLiquidity(pool: Pool): Promise<string> {\n    // Remove any tokens with same address as pool as they are pre-printed BPT\n    const parsedTokens = pool.tokens.filter((token) => {\n      return token.address !== pool.address;\n    });\n\n    // For all tokens that are pools, recurse into them and fetch their liquidity\n    const subPoolLiquidity: (PoolBPTValue | undefined)[] = await Promise.all(\n      parsedTokens.map(async (token) => {\n        const pool = await this.pools.findBy('address', token.address);\n        if (!pool) return;\n\n        const liquidity = await this.getLiquidity(pool);\n        const scaledLiquidity = parseFixed(liquidity, SCALING_FACTOR * 2);\n        const totalBPT = parseFixed(pool.totalShares, SCALING_FACTOR);\n        const bptValue = scaledLiquidity.div(totalBPT);\n\n        const bptInParentPool = parseFixed(token.balance, SCALING_FACTOR);\n        const liquidityInParentPool = formatFixed(\n          bptValue.mul(bptInParentPool),\n          SCALING_FACTOR\n        ).replace(/\\.[0-9]+/, ''); // strip trailing decimals, we don't need them as we're already scaled up by 1e36\n\n        return {\n          address: pool.address,\n          liquidity: liquidityInParentPool,\n        };\n      })\n    );\n\n    const totalSubPoolLiquidity = subPoolLiquidity.reduce(\n      (totalLiquidity, subPool) => {\n        if (!subPool) return Zero;\n        return totalLiquidity.add(subPool.liquidity);\n      },\n      Zero\n    );\n\n    const nonPoolTokens = parsedTokens.filter((token) => {\n      return !subPoolLiquidity.find((pool) => pool?.address === token.address);\n    });\n\n    const tokenBalances: PoolToken[] = await Promise.all(\n      nonPoolTokens.map(async (token) => {\n        const tokenPrice = await this.tokenPrices.find(token.address);\n        const poolToken: PoolToken = {\n          address: token.address,\n          decimals: token.decimals,\n          priceRate: token.priceRate,\n          price: tokenPrice,\n          balance: token.balance,\n          weight: token.weight\n            ? parseFixed(token.weight, TOKEN_WEIGHT_SCALING_FACTOR).toString()\n            : '0',\n        };\n        return poolToken;\n      })\n    );\n\n    const tokenLiquidity = Pools.from(pool.poolType).liquidity.calcTotal(\n      tokenBalances\n    );\n\n    const totalLiquidity = formatFixed(\n      BigNumber.from(totalSubPoolLiquidity).add(\n        parseFixed(tokenLiquidity, SCALING_FACTOR)\n      ),\n      SCALING_FACTOR\n    );\n\n    return totalLiquidity;\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { AddressZero, Zero } from '@ethersproject/constants';\nimport { SOR, SwapTypes, SwapInfo } from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport {\n  SwapType,\n  BatchSwapStep,\n  FundManagement,\n  QueryWithSorInput,\n  QueryWithSorOutput,\n} from './types';\nimport { Vault } from '@balancer-labs/typechain';\n\n/*\n * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n *\n * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n * receives are the same that an equivalent `batchSwap` call would receive.\n */\nexport async function queryBatchSwap(\n  vaultContract: Vault,\n  swapType: SwapType,\n  swaps: BatchSwapStep[],\n  assets: string[]\n): Promise<string[]> {\n  const funds: FundManagement = {\n    sender: AddressZero,\n    recipient: AddressZero,\n    fromInternalBalance: false,\n    toInternalBalance: false,\n  };\n\n  try {\n    const deltas = await vaultContract.callStatic.queryBatchSwap(\n      swapType,\n      swaps,\n      assets,\n      funds\n    );\n    return deltas.map((d: BigNumberish) => d.toString());\n  } catch (err) {\n    throw `queryBatchSwap call error: ${err}`;\n  }\n}\n\n/*\nUses SOR to create a batchSwap which is then queried onChain.\n*/\nexport async function queryBatchSwapWithSor(\n  sor: SOR,\n  vaultContract: Vault,\n  queryWithSor: QueryWithSorInput\n): Promise<QueryWithSorOutput> {\n  if (queryWithSor.fetchPools.fetchPools) await sor.fetchPools();\n\n  const swaps: BatchSwapStep[][] = [];\n  const assetArray: string[][] = [];\n  // get path information for each tokenIn\n  for (let i = 0; i < queryWithSor.tokensIn.length; i++) {\n    const swap = await getSorSwapInfo(\n      queryWithSor.tokensIn[i],\n      queryWithSor.tokensOut[i],\n      queryWithSor.swapType,\n      queryWithSor.amounts[i].toString(),\n      sor\n    );\n    if (!swap.returnAmount.gt(Zero))\n      // Throw here because swaps with 0 amounts has no path and has misleading result for query\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    swaps.push(swap.swaps);\n    assetArray.push(swap.tokenAddresses);\n  }\n\n  // Join swaps and assets together correctly\n  const batchedSwaps = batchSwaps(assetArray, swaps);\n\n  const returnTokens =\n    queryWithSor.swapType === SwapType.SwapExactIn\n      ? queryWithSor.tokensOut\n      : queryWithSor.tokensIn;\n  const returnAmounts: string[] = Array(returnTokens.length).fill('0');\n  let deltas: BigNumberish[] = Array(batchedSwaps.assets.length).fill('0');\n  try {\n    // Onchain query\n    deltas = await queryBatchSwap(\n      vaultContract,\n      queryWithSor.swapType,\n      batchedSwaps.swaps,\n      batchedSwaps.assets\n    );\n\n    if (deltas.length > 0) {\n      returnTokens.forEach(\n        (t, i) =>\n          (returnAmounts[i] =\n            deltas[batchedSwaps.assets.indexOf(t.toLowerCase())].toString() ??\n            Zero.toString())\n      );\n    }\n  } catch (err) {\n    throw new BalancerError(BalancerErrorCode.QUERY_BATCH_SWAP);\n  }\n\n  return {\n    returnAmounts,\n    swaps: batchedSwaps.swaps,\n    assets: batchedSwaps.assets,\n    deltas: deltas.map((d) => d.toString()),\n  };\n}\n\n/*\nUse SOR to get swapInfo for tokenIn>tokenOut.\nSwapInfos.swaps has path information.\n*/\nexport async function getSorSwapInfo(\n  tokenIn: string,\n  tokenOut: string,\n  swapType: SwapType,\n  amount: string,\n  sor: SOR\n): Promise<SwapInfo> {\n  const swapTypeSOR: SwapTypes =\n    swapType === SwapType.SwapExactIn\n      ? SwapTypes.SwapExactIn\n      : SwapTypes.SwapExactOut;\n  const swapInfo = await sor.getSwaps(\n    tokenIn.toLowerCase(),\n    tokenOut.toLowerCase(),\n    swapTypeSOR,\n    amount\n  );\n  return swapInfo;\n}\n\n/*\nFormat multiple individual swaps/assets into a single swap/asset.\n*/\nfunction batchSwaps(\n  assetArray: string[][],\n  swaps: BatchSwapStep[][]\n): { swaps: BatchSwapStep[]; assets: string[] } {\n  // asset addresses without duplicates\n  const newAssetArray = [...new Set(assetArray.flat())];\n\n  // Update indices of each swap to use new asset array\n  swaps.forEach((swap, i) => {\n    swap.forEach((poolSwap) => {\n      poolSwap.assetInIndex = newAssetArray.indexOf(\n        assetArray[i][poolSwap.assetInIndex]\n      );\n      poolSwap.assetOutIndex = newAssetArray.indexOf(\n        assetArray[i][poolSwap.assetOutIndex]\n      );\n    });\n  });\n\n  // Join Swaps into a single batchSwap\n  const batchedSwaps = swaps.flat();\n  return { swaps: batchedSwaps, assets: newAssetArray };\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: string;\n  BigInt: string;\n  Bytes: string;\n};\n\nexport type AmpUpdate = {\n  __typename?: 'AmpUpdate';\n  endAmp: Scalars['BigInt'];\n  endTimestamp: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startAmp: Scalars['BigInt'];\n  startTimestamp: Scalars['BigInt'];\n};\n\nexport type AmpUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endAmp?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startAmp?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum AmpUpdate_OrderBy {\n  EndAmp = 'endAmp',\n  EndTimestamp = 'endTimestamp',\n  Id = 'id',\n  PoolId = 'poolId',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartAmp = 'startAmp',\n  StartTimestamp = 'startTimestamp'\n}\n\nexport type Balancer = {\n  __typename?: 'Balancer';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  pools?: Maybe<Array<Pool>>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\n\nexport type BalancerPoolsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Pool_Filter>;\n};\n\nexport type BalancerSnapshot = {\n  __typename?: 'BalancerSnapshot';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  timestamp: Scalars['Int'];\n  totalLiquidity: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  vault: Balancer;\n};\n\nexport type BalancerSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vault?: InputMaybe<Scalars['String']>;\n  vault_contains?: InputMaybe<Scalars['String']>;\n  vault_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_ends_with?: InputMaybe<Scalars['String']>;\n  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_gt?: InputMaybe<Scalars['String']>;\n  vault_gte?: InputMaybe<Scalars['String']>;\n  vault_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_lt?: InputMaybe<Scalars['String']>;\n  vault_lte?: InputMaybe<Scalars['String']>;\n  vault_not?: InputMaybe<Scalars['String']>;\n  vault_not_contains?: InputMaybe<Scalars['String']>;\n  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_not_starts_with?: InputMaybe<Scalars['String']>;\n  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_starts_with?: InputMaybe<Scalars['String']>;\n  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum BalancerSnapshot_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Timestamp = 'timestamp',\n  TotalLiquidity = 'totalLiquidity',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  Vault = 'vault'\n}\n\nexport type Balancer_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Balancer_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Pools = 'pools',\n  TotalLiquidity = 'totalLiquidity',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type BlockChangedFilter = {\n  number_gte: Scalars['Int'];\n};\n\nexport type Block_Height = {\n  hash?: InputMaybe<Scalars['Bytes']>;\n  number?: InputMaybe<Scalars['Int']>;\n  number_gte?: InputMaybe<Scalars['Int']>;\n};\n\nexport type GradualWeightUpdate = {\n  __typename?: 'GradualWeightUpdate';\n  endTimestamp: Scalars['BigInt'];\n  endWeights: Array<Scalars['BigInt']>;\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startTimestamp: Scalars['BigInt'];\n  startWeights: Array<Scalars['BigInt']>;\n};\n\nexport type GradualWeightUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GradualWeightUpdate_OrderBy {\n  EndTimestamp = 'endTimestamp',\n  EndWeights = 'endWeights',\n  Id = 'id',\n  PoolId = 'poolId',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartTimestamp = 'startTimestamp',\n  StartWeights = 'startWeights'\n}\n\nexport enum InvestType {\n  Exit = 'Exit',\n  Join = 'Join'\n}\n\nexport type Investment = {\n  __typename?: 'Investment';\n  amount: Scalars['BigDecimal'];\n  assetManagerAddress: Scalars['Bytes'];\n  id: Scalars['ID'];\n  poolTokenId: PoolToken;\n  timestamp: Scalars['Int'];\n};\n\nexport type Investment_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amount?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amount_lt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_lte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  assetManagerAddress?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  assetManagerAddress_not?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_not_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManagerAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolTokenId?: InputMaybe<Scalars['String']>;\n  poolTokenId_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_gt?: InputMaybe<Scalars['String']>;\n  poolTokenId_gte?: InputMaybe<Scalars['String']>;\n  poolTokenId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_lt?: InputMaybe<Scalars['String']>;\n  poolTokenId_lte?: InputMaybe<Scalars['String']>;\n  poolTokenId_not?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum Investment_OrderBy {\n  Amount = 'amount',\n  AssetManagerAddress = 'assetManagerAddress',\n  Id = 'id',\n  PoolTokenId = 'poolTokenId',\n  Timestamp = 'timestamp'\n}\n\nexport type JoinExit = {\n  __typename?: 'JoinExit';\n  amounts: Array<Scalars['BigDecimal']>;\n  id: Scalars['ID'];\n  pool: Pool;\n  sender: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n  tx: Scalars['Bytes'];\n  type: InvestType;\n  user: User;\n};\n\nexport type JoinExit_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  sender?: InputMaybe<Scalars['Bytes']>;\n  sender_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  sender_not?: InputMaybe<Scalars['Bytes']>;\n  sender_not_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  type?: InputMaybe<InvestType>;\n  type_in?: InputMaybe<Array<InvestType>>;\n  type_not?: InputMaybe<InvestType>;\n  type_not_in?: InputMaybe<Array<InvestType>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum JoinExit_OrderBy {\n  Amounts = 'amounts',\n  Id = 'id',\n  Pool = 'pool',\n  Sender = 'sender',\n  Timestamp = 'timestamp',\n  Tx = 'tx',\n  Type = 'type',\n  User = 'user'\n}\n\nexport type LatestPrice = {\n  __typename?: 'LatestPrice';\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type LatestPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum LatestPrice_OrderBy {\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  Price = 'price',\n  PricingAsset = 'pricingAsset'\n}\n\n/** Defines the order direction, either ascending or descending */\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  address: Scalars['Bytes'];\n  amp?: Maybe<Scalars['BigInt']>;\n  baseToken?: Maybe<Scalars['Bytes']>;\n  createTime: Scalars['Int'];\n  expiryTime?: Maybe<Scalars['BigInt']>;\n  factory?: Maybe<Scalars['Bytes']>;\n  historicalValues?: Maybe<Array<PoolHistoricalLiquidity>>;\n  holdersCount: Scalars['BigInt'];\n  id: Scalars['ID'];\n  lowerTarget?: Maybe<Scalars['BigDecimal']>;\n  mainIndex?: Maybe<Scalars['Int']>;\n  managementFee?: Maybe<Scalars['BigDecimal']>;\n  name?: Maybe<Scalars['String']>;\n  owner?: Maybe<Scalars['Bytes']>;\n  poolType?: Maybe<Scalars['String']>;\n  priceRateProviders?: Maybe<Array<PriceRateProvider>>;\n  principalToken?: Maybe<Scalars['Bytes']>;\n  shares?: Maybe<Array<PoolShare>>;\n  strategyType: Scalars['Int'];\n  swapEnabled: Scalars['Boolean'];\n  swapFee: Scalars['BigDecimal'];\n  swaps?: Maybe<Array<Swap>>;\n  swapsCount: Scalars['BigInt'];\n  symbol?: Maybe<Scalars['String']>;\n  tokens?: Maybe<Array<PoolToken>>;\n  tokensList: Array<Scalars['Bytes']>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalShares: Scalars['BigDecimal'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  totalWeight?: Maybe<Scalars['BigDecimal']>;\n  tx?: Maybe<Scalars['Bytes']>;\n  unitSeconds?: Maybe<Scalars['BigInt']>;\n  upperTarget?: Maybe<Scalars['BigDecimal']>;\n  vaultID: Balancer;\n  weightUpdates?: Maybe<Array<GradualWeightUpdate>>;\n  wrappedIndex?: Maybe<Scalars['Int']>;\n};\n\n\nexport type PoolHistoricalValuesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type PoolPriceRateProvidersArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type PoolSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type PoolSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type PoolTokensArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type PoolWeightUpdatesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\nexport type PoolHistoricalLiquidity = {\n  __typename?: 'PoolHistoricalLiquidity';\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  poolLiquidity: Scalars['BigDecimal'];\n  poolShareValue: Scalars['BigDecimal'];\n  poolTotalShares: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type PoolHistoricalLiquidity_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum PoolHistoricalLiquidity_OrderBy {\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolLiquidity = 'poolLiquidity',\n  PoolShareValue = 'poolShareValue',\n  PoolTotalShares = 'poolTotalShares',\n  PricingAsset = 'pricingAsset'\n}\n\nexport type PoolShare = {\n  __typename?: 'PoolShare';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  userAddress: User;\n};\n\nexport type PoolShare_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PoolShare_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  PoolId = 'poolId',\n  UserAddress = 'userAddress'\n}\n\nexport type PoolSnapshot = {\n  __typename?: 'PoolSnapshot';\n  amounts: Array<Scalars['BigDecimal']>;\n  id: Scalars['ID'];\n  liquidity: Scalars['BigDecimal'];\n  pool: Pool;\n  swapFees: Scalars['BigDecimal'];\n  swapVolume: Scalars['BigDecimal'];\n  timestamp: Scalars['Int'];\n  totalShares: Scalars['BigDecimal'];\n};\n\nexport type PoolSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  liquidity?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  swapFees?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFees_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolSnapshot_OrderBy {\n  Amounts = 'amounts',\n  Id = 'id',\n  Liquidity = 'liquidity',\n  Pool = 'pool',\n  SwapFees = 'swapFees',\n  SwapVolume = 'swapVolume',\n  Timestamp = 'timestamp',\n  TotalShares = 'totalShares'\n}\n\nexport type PoolToken = {\n  __typename?: 'PoolToken';\n  address: Scalars['String'];\n  balance: Scalars['BigDecimal'];\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  managedBalance: Scalars['BigDecimal'];\n  managements?: Maybe<Array<Investment>>;\n  name: Scalars['String'];\n  poolId: Pool;\n  priceRate: Scalars['BigDecimal'];\n  symbol: Scalars['String'];\n  token: Token;\n  weight?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type PoolTokenManagementsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Investment_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Investment_Filter>;\n};\n\nexport type PoolToken_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  managedBalance?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managedBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  priceRate?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  priceRate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  weight?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolToken_OrderBy {\n  Address = 'address',\n  Balance = 'balance',\n  Decimals = 'decimals',\n  Id = 'id',\n  managedBalance = 'managedBalance',\n  Managements = 'managements',\n  Name = 'name',\n  PoolId = 'poolId',\n  PriceRate = 'priceRate',\n  Symbol = 'symbol',\n  Token = 'token',\n  Weight = 'weight'\n}\n\nexport type Pool_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  amp?: InputMaybe<Scalars['BigInt']>;\n  amp_gt?: InputMaybe<Scalars['BigInt']>;\n  amp_gte?: InputMaybe<Scalars['BigInt']>;\n  amp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  amp_lt?: InputMaybe<Scalars['BigInt']>;\n  amp_lte?: InputMaybe<Scalars['BigInt']>;\n  amp_not?: InputMaybe<Scalars['BigInt']>;\n  amp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  baseToken?: InputMaybe<Scalars['Bytes']>;\n  baseToken_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  baseToken_not?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  createTime?: InputMaybe<Scalars['Int']>;\n  createTime_gt?: InputMaybe<Scalars['Int']>;\n  createTime_gte?: InputMaybe<Scalars['Int']>;\n  createTime_in?: InputMaybe<Array<Scalars['Int']>>;\n  createTime_lt?: InputMaybe<Scalars['Int']>;\n  createTime_lte?: InputMaybe<Scalars['Int']>;\n  createTime_not?: InputMaybe<Scalars['Int']>;\n  createTime_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  expiryTime?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  expiryTime_lt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_lte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  factory?: InputMaybe<Scalars['Bytes']>;\n  factory_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  factory_not?: InputMaybe<Scalars['Bytes']>;\n  factory_not_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  holdersCount?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  holdersCount_lt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_lte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lowerTarget?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lowerTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  mainIndex?: InputMaybe<Scalars['Int']>;\n  mainIndex_gt?: InputMaybe<Scalars['Int']>;\n  mainIndex_gte?: InputMaybe<Scalars['Int']>;\n  mainIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  mainIndex_lt?: InputMaybe<Scalars['Int']>;\n  mainIndex_lte?: InputMaybe<Scalars['Int']>;\n  mainIndex_not?: InputMaybe<Scalars['Int']>;\n  mainIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  managementFee?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managementFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  owner?: InputMaybe<Scalars['Bytes']>;\n  owner_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  owner_not?: InputMaybe<Scalars['Bytes']>;\n  owner_not_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolType?: InputMaybe<Scalars['String']>;\n  poolType_contains?: InputMaybe<Scalars['String']>;\n  poolType_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_gt?: InputMaybe<Scalars['String']>;\n  poolType_gte?: InputMaybe<Scalars['String']>;\n  poolType_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_lt?: InputMaybe<Scalars['String']>;\n  poolType_lte?: InputMaybe<Scalars['String']>;\n  poolType_not?: InputMaybe<Scalars['String']>;\n  poolType_not_contains?: InputMaybe<Scalars['String']>;\n  poolType_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  principalToken?: InputMaybe<Scalars['Bytes']>;\n  principalToken_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  principalToken_not?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  strategyType?: InputMaybe<Scalars['Int']>;\n  strategyType_gt?: InputMaybe<Scalars['Int']>;\n  strategyType_gte?: InputMaybe<Scalars['Int']>;\n  strategyType_in?: InputMaybe<Array<Scalars['Int']>>;\n  strategyType_lt?: InputMaybe<Scalars['Int']>;\n  strategyType_lte?: InputMaybe<Scalars['Int']>;\n  strategyType_not?: InputMaybe<Scalars['Int']>;\n  strategyType_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  swapEnabled?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapFee?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapsCount?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swapsCount_lt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_lte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokensList?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  unitSeconds?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  unitSeconds_lt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_lte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  upperTarget?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  upperTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vaultID?: InputMaybe<Scalars['String']>;\n  vaultID_contains?: InputMaybe<Scalars['String']>;\n  vaultID_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_gt?: InputMaybe<Scalars['String']>;\n  vaultID_gte?: InputMaybe<Scalars['String']>;\n  vaultID_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_lt?: InputMaybe<Scalars['String']>;\n  vaultID_lte?: InputMaybe<Scalars['String']>;\n  vaultID_not?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_not_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  wrappedIndex?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  wrappedIndex_lt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_lte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum Pool_OrderBy {\n  Address = 'address',\n  Amp = 'amp',\n  BaseToken = 'baseToken',\n  CreateTime = 'createTime',\n  ExpiryTime = 'expiryTime',\n  Factory = 'factory',\n  HistoricalValues = 'historicalValues',\n  HoldersCount = 'holdersCount',\n  Id = 'id',\n  LowerTarget = 'lowerTarget',\n  MainIndex = 'mainIndex',\n  ManagementFee = 'managementFee',\n  Name = 'name',\n  Owner = 'owner',\n  PoolType = 'poolType',\n  PriceRateProviders = 'priceRateProviders',\n  PrincipalToken = 'principalToken',\n  Shares = 'shares',\n  StrategyType = 'strategyType',\n  SwapEnabled = 'swapEnabled',\n  SwapFee = 'swapFee',\n  Swaps = 'swaps',\n  SwapsCount = 'swapsCount',\n  Symbol = 'symbol',\n  Tokens = 'tokens',\n  TokensList = 'tokensList',\n  TotalLiquidity = 'totalLiquidity',\n  TotalShares = 'totalShares',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  TotalWeight = 'totalWeight',\n  Tx = 'tx',\n  UnitSeconds = 'unitSeconds',\n  UpperTarget = 'upperTarget',\n  VaultId = 'vaultID',\n  WeightUpdates = 'weightUpdates',\n  WrappedIndex = 'wrappedIndex'\n}\n\nexport type PriceRateProvider = {\n  __typename?: 'PriceRateProvider';\n  address: Scalars['Bytes'];\n  cacheDuration: Scalars['Int'];\n  cacheExpiry: Scalars['Int'];\n  id: Scalars['ID'];\n  lastCached: Scalars['Int'];\n  poolId: Pool;\n  rate: Scalars['BigDecimal'];\n  token: PoolToken;\n};\n\nexport type PriceRateProvider_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  cacheDuration?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheDuration_lt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_lte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry_lt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_lte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lastCached?: InputMaybe<Scalars['Int']>;\n  lastCached_gt?: InputMaybe<Scalars['Int']>;\n  lastCached_gte?: InputMaybe<Scalars['Int']>;\n  lastCached_in?: InputMaybe<Array<Scalars['Int']>>;\n  lastCached_lt?: InputMaybe<Scalars['Int']>;\n  lastCached_lte?: InputMaybe<Scalars['Int']>;\n  lastCached_not?: InputMaybe<Scalars['Int']>;\n  lastCached_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rate?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PriceRateProvider_OrderBy {\n  Address = 'address',\n  CacheDuration = 'cacheDuration',\n  CacheExpiry = 'cacheExpiry',\n  Id = 'id',\n  LastCached = 'lastCached',\n  PoolId = 'poolId',\n  Rate = 'rate',\n  Token = 'token'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  investment?: Maybe<Investment>;\n  managements: Array<Investment>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  pool?: Maybe<Pool>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  swap?: Maybe<Swap>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type QueryAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type QueryBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type QueryBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type QueryGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type QueryInvestmentArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryManagementsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Investment_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Investment_Filter>;\n};\n\n\nexport type QueryJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type QueryLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type QueryPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type QueryPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type QueryPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type QueryPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type QueryPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type QueryPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type QuerySwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type QueryTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type QueryTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type QueryTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type QueryTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type QueryTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type QueryUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type QueryUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  investment?: Maybe<Investment>;\n  managements: Array<Investment>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  pool?: Maybe<Pool>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  swap?: Maybe<Swap>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type SubscriptionAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type SubscriptionBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type SubscriptionBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type SubscriptionGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type SubscriptionInvestmentArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionManagementsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Investment_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Investment_Filter>;\n};\n\n\nexport type SubscriptionJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type SubscriptionLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type SubscriptionPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type SubscriptionPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type SubscriptionPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type SubscriptionSwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type SubscriptionTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type SubscriptionTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type SubscriptionTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type SubscriptionUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type SubscriptionUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Swap = {\n  __typename?: 'Swap';\n  caller: Scalars['Bytes'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  timestamp: Scalars['Int'];\n  tokenAmountIn: Scalars['BigDecimal'];\n  tokenAmountOut: Scalars['BigDecimal'];\n  tokenIn: Scalars['Bytes'];\n  tokenInSym: Scalars['String'];\n  tokenOut: Scalars['Bytes'];\n  tokenOutSym: Scalars['String'];\n  tx: Scalars['Bytes'];\n  userAddress: User;\n};\n\nexport type Swap_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  caller?: InputMaybe<Scalars['Bytes']>;\n  caller_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  caller_not?: InputMaybe<Scalars['Bytes']>;\n  caller_not_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tokenAmountIn?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountIn_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenIn?: InputMaybe<Scalars['Bytes']>;\n  tokenInSym?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_gt?: InputMaybe<Scalars['String']>;\n  tokenInSym_gte?: InputMaybe<Scalars['String']>;\n  tokenInSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_lt?: InputMaybe<Scalars['String']>;\n  tokenInSym_lte?: InputMaybe<Scalars['String']>;\n  tokenInSym_not?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenIn_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenIn_not?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut?: InputMaybe<Scalars['Bytes']>;\n  tokenOutSym?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_lt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_lte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOut_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut_not?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum Swap_OrderBy {\n  Caller = 'caller',\n  Id = 'id',\n  PoolId = 'poolId',\n  Timestamp = 'timestamp',\n  TokenAmountIn = 'tokenAmountIn',\n  TokenAmountOut = 'tokenAmountOut',\n  TokenIn = 'tokenIn',\n  TokenInSym = 'tokenInSym',\n  TokenOut = 'tokenOut',\n  TokenOutSym = 'tokenOutSym',\n  Tx = 'tx',\n  UserAddress = 'userAddress'\n}\n\nexport type Token = {\n  __typename?: 'Token';\n  address: Scalars['String'];\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  latestPrice?: Maybe<LatestPrice>;\n  name?: Maybe<Scalars['String']>;\n  symbol?: Maybe<Scalars['String']>;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenPrice = {\n  __typename?: 'TokenPrice';\n  amount: Scalars['BigDecimal'];\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n};\n\nexport type TokenPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amount?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amount_lt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_lte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum TokenPrice_OrderBy {\n  Amount = 'amount',\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  Price = 'price',\n  PricingAsset = 'pricingAsset',\n  Timestamp = 'timestamp'\n}\n\nexport type TokenSnapshot = {\n  __typename?: 'TokenSnapshot';\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  token: Token;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TokenSnapshot_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Token = 'token',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type Token_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  latestPrice?: InputMaybe<Scalars['String']>;\n  latestPrice_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_gt?: InputMaybe<Scalars['String']>;\n  latestPrice_gte?: InputMaybe<Scalars['String']>;\n  latestPrice_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_lt?: InputMaybe<Scalars['String']>;\n  latestPrice_lte?: InputMaybe<Scalars['String']>;\n  latestPrice_not?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_not_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Token_OrderBy {\n  Address = 'address',\n  Decimals = 'decimals',\n  Id = 'id',\n  LatestPrice = 'latestPrice',\n  Name = 'name',\n  Symbol = 'symbol',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type TradePair = {\n  __typename?: 'TradePair';\n  /** Token Address - Token Address */\n  id: Scalars['ID'];\n  token0: Token;\n  token1: Token;\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot = {\n  __typename?: 'TradePairSnapshot';\n  id: Scalars['ID'];\n  pair: TradePair;\n  timestamp: Scalars['Int'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pair?: InputMaybe<Scalars['String']>;\n  pair_contains?: InputMaybe<Scalars['String']>;\n  pair_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_ends_with?: InputMaybe<Scalars['String']>;\n  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_gt?: InputMaybe<Scalars['String']>;\n  pair_gte?: InputMaybe<Scalars['String']>;\n  pair_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_lt?: InputMaybe<Scalars['String']>;\n  pair_lte?: InputMaybe<Scalars['String']>;\n  pair_not?: InputMaybe<Scalars['String']>;\n  pair_not_contains?: InputMaybe<Scalars['String']>;\n  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_not_starts_with?: InputMaybe<Scalars['String']>;\n  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_starts_with?: InputMaybe<Scalars['String']>;\n  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePairSnapshot_OrderBy {\n  Id = 'id',\n  Pair = 'pair',\n  Timestamp = 'timestamp',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type TradePair_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  token0?: InputMaybe<Scalars['String']>;\n  token0_contains?: InputMaybe<Scalars['String']>;\n  token0_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_ends_with?: InputMaybe<Scalars['String']>;\n  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_gt?: InputMaybe<Scalars['String']>;\n  token0_gte?: InputMaybe<Scalars['String']>;\n  token0_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_lt?: InputMaybe<Scalars['String']>;\n  token0_lte?: InputMaybe<Scalars['String']>;\n  token0_not?: InputMaybe<Scalars['String']>;\n  token0_not_contains?: InputMaybe<Scalars['String']>;\n  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_not_starts_with?: InputMaybe<Scalars['String']>;\n  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_starts_with?: InputMaybe<Scalars['String']>;\n  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1?: InputMaybe<Scalars['String']>;\n  token1_contains?: InputMaybe<Scalars['String']>;\n  token1_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_ends_with?: InputMaybe<Scalars['String']>;\n  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_gt?: InputMaybe<Scalars['String']>;\n  token1_gte?: InputMaybe<Scalars['String']>;\n  token1_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_lt?: InputMaybe<Scalars['String']>;\n  token1_lte?: InputMaybe<Scalars['String']>;\n  token1_not?: InputMaybe<Scalars['String']>;\n  token1_not_contains?: InputMaybe<Scalars['String']>;\n  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_not_starts_with?: InputMaybe<Scalars['String']>;\n  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_starts_with?: InputMaybe<Scalars['String']>;\n  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePair_OrderBy {\n  Id = 'id',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  sharesOwned?: Maybe<Array<PoolShare>>;\n  swaps?: Maybe<Array<Swap>>;\n  userInternalBalances?: Maybe<Array<UserInternalBalance>>;\n};\n\n\nexport type UserSharesOwnedArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type UserSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type UserUserInternalBalancesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\nexport type UserInternalBalance = {\n  __typename?: 'UserInternalBalance';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  token: Scalars['Bytes'];\n  userAddress?: Maybe<User>;\n};\n\nexport type UserInternalBalance_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  token?: InputMaybe<Scalars['Bytes']>;\n  token_contains?: InputMaybe<Scalars['Bytes']>;\n  token_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  token_not?: InputMaybe<Scalars['Bytes']>;\n  token_not_contains?: InputMaybe<Scalars['Bytes']>;\n  token_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum UserInternalBalance_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  Token = 'token',\n  UserAddress = 'userAddress'\n}\n\nexport type User_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n};\n\nexport enum User_OrderBy {\n  Id = 'id',\n  SharesOwned = 'sharesOwned',\n  Swaps = 'swaps',\n  UserInternalBalances = 'userInternalBalances'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   *\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type PoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsQuery = { __typename?: 'Query', pool0: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null }>, pool1000: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null }> };\n\nexport type PoolQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolQuery = { __typename?: 'Query', pool?: { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null } | null };\n\nexport type PoolsWithoutLinearQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsWithoutLinearQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null }> };\n\nexport type PoolWithoutLinearQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolWithoutLinearQuery = { __typename?: 'Query', pool?: { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null } | null };\n\nexport type SubgraphPoolFragment = { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null };\n\nexport type SubgraphPoolWithoutLinearFragment = { __typename?: 'Pool', id: string, address: string, poolType?: string | null, symbol?: string | null, name?: string | null, swapFee: string, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, principalToken?: string | null, baseToken?: string | null, swapEnabled: boolean, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string }> | null };\n\nexport type SubgraphPoolTokenFragment = { __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string };\n\nexport type PoolHistoricalLiquiditiesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolHistoricalLiquiditiesQuery = { __typename?: 'Query', poolHistoricalLiquidities: Array<{ __typename?: 'PoolHistoricalLiquidity', id: string, poolTotalShares: string, poolLiquidity: string, poolShareValue: string, pricingAsset: string, block: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type PoolSnapshotsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolSnapshotsQuery = { __typename?: 'Query', poolSnapshots: Array<{ __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphPoolSnapshotFragment = { __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } };\n\nexport type JoinExitsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<JoinExit_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type JoinExitsQuery = { __typename?: 'Query', joinExits: Array<{ __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } }> };\n\nexport type SubgraphJoinExitFragment = { __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } };\n\nexport type BalancersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Balancer_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type BalancersQuery = { __typename?: 'Query', balancers: Array<{ __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number }> };\n\nexport type SubgraphBalancerFragment = { __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number };\n\nexport type TokenPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<TokenPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenPricesQuery = { __typename?: 'Query', tokenPrices: Array<{ __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphTokenPriceFragment = { __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } };\n\nexport type TokenLatestPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<LatestPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenLatestPricesQuery = { __typename?: 'Query', latestPrices: Array<{ __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type TokenLatestPriceQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type TokenLatestPriceQuery = { __typename?: 'Query', latestPrice?: { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } } | null };\n\nexport type SubgraphTokenLatestPriceFragment = { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } };\n\nexport type UserQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null } | null };\n\nexport type UsersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<User_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null }> };\n\nexport type SubgraphUserFragment = { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null };\n\nexport const SubgraphPoolTokenFragmentDoc = gql`\n    fragment SubgraphPoolToken on PoolToken {\n  id\n  symbol\n  name\n  decimals\n  address\n  balance\n  managedBalance\n  weight\n  priceRate\n}\n    `;\nexport const SubgraphPoolFragmentDoc = gql`\n    fragment SubgraphPool on Pool {\n  id\n  address\n  poolType\n  symbol\n  name\n  swapFee\n  totalWeight\n  totalSwapVolume\n  totalSwapFee\n  totalLiquidity\n  totalShares\n  tokens(first: 100) {\n    ...SubgraphPoolToken\n  }\n  swapsCount\n  holdersCount\n  tokensList\n  totalWeight\n  amp\n  expiryTime\n  unitSeconds\n  principalToken\n  baseToken\n  swapEnabled\n  wrappedIndex\n  mainIndex\n  lowerTarget\n  upperTarget\n}\n    ${SubgraphPoolTokenFragmentDoc}`;\nexport const SubgraphPoolWithoutLinearFragmentDoc = gql`\n    fragment SubgraphPoolWithoutLinear on Pool {\n  id\n  address\n  poolType\n  symbol\n  name\n  swapFee\n  totalWeight\n  totalSwapVolume\n  totalSwapFee\n  totalLiquidity\n  totalShares\n  tokens(first: 1000) {\n    ...SubgraphPoolToken\n  }\n  swapsCount\n  holdersCount\n  tokensList\n  totalWeight\n  amp\n  expiryTime\n  unitSeconds\n  principalToken\n  baseToken\n  swapEnabled\n}\n    ${SubgraphPoolTokenFragmentDoc}`;\nexport const SubgraphPoolSnapshotFragmentDoc = gql`\n    fragment SubgraphPoolSnapshot on PoolSnapshot {\n  id\n  pool {\n    id\n  }\n  totalShares\n  swapVolume\n  swapFees\n  timestamp\n}\n    `;\nexport const SubgraphJoinExitFragmentDoc = gql`\n    fragment SubgraphJoinExit on JoinExit {\n  amounts\n  id\n  sender\n  timestamp\n  tx\n  type\n  user {\n    id\n  }\n  pool {\n    id\n    tokensList\n  }\n}\n    `;\nexport const SubgraphBalancerFragmentDoc = gql`\n    fragment SubgraphBalancer on Balancer {\n  id\n  totalLiquidity\n  totalSwapVolume\n  totalSwapFee\n  totalSwapCount\n  poolCount\n}\n    `;\nexport const SubgraphTokenPriceFragmentDoc = gql`\n    fragment SubgraphTokenPrice on TokenPrice {\n  id\n  poolId {\n    id\n  }\n  asset\n  amount\n  pricingAsset\n  price\n  block\n  timestamp\n}\n    `;\nexport const SubgraphTokenLatestPriceFragmentDoc = gql`\n    fragment SubgraphTokenLatestPrice on LatestPrice {\n  id\n  asset\n  price\n  poolId {\n    id\n  }\n  pricingAsset\n}\n    `;\nexport const SubgraphUserFragmentDoc = gql`\n    fragment SubgraphUser on User {\n  id\n  sharesOwned(first: 1000) {\n    balance\n    poolId {\n      id\n    }\n  }\n}\n    `;\nexport const PoolsDocument = gql`\n    query Pools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pool0: pools(\n    first: 1000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n  pool1000: pools(\n    skip: 1000\n    first: 1000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolDocument = gql`\n    query Pool($id: ID!, $block: Block_height) {\n  pool(id: $id, block: $block) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolsWithoutLinearDocument = gql`\n    query PoolsWithoutLinear($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolWithoutLinear\n  }\n}\n    ${SubgraphPoolWithoutLinearFragmentDoc}`;\nexport const PoolWithoutLinearDocument = gql`\n    query PoolWithoutLinear($id: ID!, $block: Block_height) {\n  pool(id: $id, block: $block) {\n    ...SubgraphPoolWithoutLinear\n  }\n}\n    ${SubgraphPoolWithoutLinearFragmentDoc}`;\nexport const PoolHistoricalLiquiditiesDocument = gql`\n    query PoolHistoricalLiquidities($skip: Int, $first: Int, $orderBy: PoolHistoricalLiquidity_orderBy, $orderDirection: OrderDirection, $where: PoolHistoricalLiquidity_filter, $block: Block_height) {\n  poolHistoricalLiquidities(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    id\n    poolId {\n      id\n    }\n    poolTotalShares\n    poolLiquidity\n    poolShareValue\n    pricingAsset\n    block\n  }\n}\n    `;\nexport const PoolSnapshotsDocument = gql`\n    query PoolSnapshots($skip: Int, $first: Int, $orderBy: PoolSnapshot_orderBy, $orderDirection: OrderDirection, $where: PoolSnapshot_filter, $block: Block_height) {\n  poolSnapshots(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolSnapshot\n  }\n}\n    ${SubgraphPoolSnapshotFragmentDoc}`;\nexport const JoinExitsDocument = gql`\n    query JoinExits($skip: Int, $first: Int, $orderBy: JoinExit_orderBy, $orderDirection: OrderDirection, $where: JoinExit_filter, $block: Block_height) {\n  joinExits(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphJoinExit\n  }\n}\n    ${SubgraphJoinExitFragmentDoc}`;\nexport const BalancersDocument = gql`\n    query Balancers($skip: Int, $first: Int, $orderBy: Balancer_orderBy, $orderDirection: OrderDirection, $where: Balancer_filter, $block: Block_height) {\n  balancers(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphBalancer\n  }\n}\n    ${SubgraphBalancerFragmentDoc}`;\nexport const TokenPricesDocument = gql`\n    query TokenPrices($skip: Int, $first: Int, $orderBy: TokenPrice_orderBy, $orderDirection: OrderDirection, $where: TokenPrice_filter, $block: Block_height) {\n  tokenPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenPrice\n  }\n}\n    ${SubgraphTokenPriceFragmentDoc}`;\nexport const TokenLatestPricesDocument = gql`\n    query TokenLatestPrices($skip: Int, $first: Int, $orderBy: LatestPrice_orderBy, $orderDirection: OrderDirection, $where: LatestPrice_filter, $block: Block_height) {\n  latestPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const TokenLatestPriceDocument = gql`\n    query TokenLatestPrice($id: ID!) {\n  latestPrice(id: $id) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const UserDocument = gql`\n    query User($id: ID!, $block: Block_height) {\n  user(id: $id, block: $block) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\nexport const UsersDocument = gql`\n    query Users($skip: Int, $first: Int, $orderBy: User_orderBy, $orderDirection: OrderDirection, $where: User_filter, $block: Block_height) {\n  users(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    Pools(variables?: PoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsQuery>(PoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pools', 'query');\n    },\n    Pool(variables: PoolQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolQuery>(PoolDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pool', 'query');\n    },\n    PoolsWithoutLinear(variables?: PoolsWithoutLinearQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsWithoutLinearQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsWithoutLinearQuery>(PoolsWithoutLinearDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolsWithoutLinear', 'query');\n    },\n    PoolWithoutLinear(variables: PoolWithoutLinearQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolWithoutLinearQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolWithoutLinearQuery>(PoolWithoutLinearDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolWithoutLinear', 'query');\n    },\n    PoolHistoricalLiquidities(variables?: PoolHistoricalLiquiditiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolHistoricalLiquiditiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolHistoricalLiquiditiesQuery>(PoolHistoricalLiquiditiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolHistoricalLiquidities', 'query');\n    },\n    PoolSnapshots(variables?: PoolSnapshotsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolSnapshotsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolSnapshotsQuery>(PoolSnapshotsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolSnapshots', 'query');\n    },\n    JoinExits(variables?: JoinExitsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<JoinExitsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<JoinExitsQuery>(JoinExitsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'JoinExits', 'query');\n    },\n    Balancers(variables?: BalancersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<BalancersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<BalancersQuery>(BalancersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Balancers', 'query');\n    },\n    TokenPrices(variables?: TokenPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenPricesQuery>(TokenPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenPrices', 'query');\n    },\n    TokenLatestPrices(variables?: TokenLatestPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPricesQuery>(TokenLatestPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrices', 'query');\n    },\n    TokenLatestPrice(variables: TokenLatestPriceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPriceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPriceQuery>(TokenLatestPriceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrice', 'query');\n    },\n    User(variables: UserQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UserQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UserQuery>(UserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'User', 'query');\n    },\n    Users(variables?: UsersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UsersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UsersQuery>(UsersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Users', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport { getSdk, Sdk } from './generated/balancer-subgraph-types';\n\nexport * from './generated/balancer-subgraph-types';\n\nexport type SubgraphClient = Sdk;\n\nexport function createSubgraphClient(subgraphUrl: string): SubgraphClient {\n  const client = new GraphQLClient(subgraphUrl);\n\n  return getSdk(client);\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\n\nconst multicallAbi = [\n  'function aggregate(tuple[](address target, bytes callData) memory calls) public view returns (uint256 blockNumber, bytes[] memory returnData)',\n];\n\nexport const Multicall = (address: string, provider: Provider): Contract =>\n  new Contract(address, multicallAbi, provider);\n","import { set } from 'lodash';\nimport { Fragment, JsonFragment, Interface, Result } from '@ethersproject/abi';\nimport { CallOverrides } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { Multicall } from '../../modules/contracts/multicall';\nexport class Multicaller {\n  private multiAddress: string;\n  private provider: Provider;\n  private interface: Interface;\n  public options: CallOverrides = {};\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private calls: [string, string, any][] = [];\n  private paths: string[] = [];\n\n  constructor(\n    multiAddress: string,\n    provider: Provider,\n    abi: string | Array<Fragment | JsonFragment | string>,\n    options = {}\n  ) {\n    this.multiAddress = multiAddress;\n    this.provider = provider;\n    this.interface = new Interface(abi);\n    this.options = options;\n  }\n\n  call(\n    path: string,\n    address: string,\n    functionName: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params?: any[]\n  ): Multicaller {\n    this.calls.push([address, functionName, params]);\n    this.paths.push(path);\n    return this;\n  }\n\n  async execute(\n    from: Record<string, unknown> = {}\n  ): Promise<Record<string, unknown>> {\n    const obj = from;\n    const results = await this.executeMulticall();\n    results.forEach((result, i) =>\n      set(obj, this.paths[i], result.length > 1 ? result : result[0])\n    );\n    this.calls = [];\n    this.paths = [];\n    return obj;\n  }\n\n  private async executeMulticall(): Promise<Result[]> {\n    const multi = Multicall(this.multiAddress, this.provider);\n\n    const [, res] = await multi.aggregate(\n      this.calls.map(([address, functionName, params]) => [\n        address,\n        this.interface.encodeFunctionData(functionName, params),\n      ]),\n      this.options\n    );\n\n    return res.map((result: BytesLike, i: number) =>\n      this.interface.decodeFunctionResult(this.calls[i][1], result)\n    );\n  }\n}\n","import { formatFixed } from '@ethersproject/bignumber';\nimport { Provider } from '@ethersproject/providers';\nimport { PoolFilter, SubgraphPoolBase } from '@balancer-labs/sor';\nimport { Multicaller } from '@/lib/utils/multiCaller';\nimport { isSameAddress } from '@/lib/utils';\nimport { Vault__factory } from '@balancer-labs/typechain';\n\n// TODO: decide whether we want to trim these ABIs down to the relevant functions\nimport aTokenRateProvider from '@/lib/abi/StaticATokenRateProvider.json';\nimport weightedPoolAbi from '@/lib/abi/WeightedPool.json';\nimport stablePoolAbi from '@/lib/abi/StablePool.json';\nimport elementPoolAbi from '@/lib/abi/ConvergentCurvePool.json';\nimport linearPoolAbi from '@/lib/abi/LinearPool.json';\n\nexport async function getOnChainBalances(\n  subgraphPoolsOriginal: SubgraphPoolBase[],\n  multiAddress: string,\n  vaultAddress: string,\n  provider: Provider\n): Promise<SubgraphPoolBase[]> {\n  if (subgraphPoolsOriginal.length === 0) return subgraphPoolsOriginal;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const abis: any = Object.values(\n    // Remove duplicate entries using their names\n    Object.fromEntries(\n      [\n        ...Vault__factory.abi,\n        ...aTokenRateProvider,\n        ...weightedPoolAbi,\n        ...stablePoolAbi,\n        ...elementPoolAbi,\n        ...linearPoolAbi,\n      ].map((row) => [row.name, row])\n    )\n  );\n\n  const multiPool = new Multicaller(multiAddress, provider, abis);\n\n  const supportedPoolTypes: string[] = Object.values(PoolFilter);\n  const subgraphPools: SubgraphPoolBase[] = [];\n  subgraphPoolsOriginal.forEach((pool) => {\n    if (!supportedPoolTypes.includes(pool.poolType)) {\n      console.error(`Unknown pool type: ${pool.poolType} ${pool.id}`);\n      return;\n    }\n\n    subgraphPools.push(pool);\n\n    multiPool.call(`${pool.id}.poolTokens`, vaultAddress, 'getPoolTokens', [\n      pool.id,\n    ]);\n    multiPool.call(`${pool.id}.totalSupply`, pool.address, 'totalSupply');\n\n    // Pools with pre minted BPT\n    if (pool.poolType.includes('Linear') || pool.poolType === 'StablePhantom') {\n      multiPool.call(\n        `${pool.id}.virtualSupply`,\n        pool.address,\n        'getVirtualSupply'\n      );\n    }\n\n    // TO DO - Make this part of class to make more flexible?\n    if (\n      pool.poolType === 'Weighted' ||\n      pool.poolType === 'LiquidityBootstrapping' ||\n      pool.poolType === 'Investment'\n    ) {\n      multiPool.call(\n        `${pool.id}.weights`,\n        pool.address,\n        'getNormalizedWeights'\n      );\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n    } else if (\n      pool.poolType === 'Stable' ||\n      pool.poolType === 'MetaStable' ||\n      pool.poolType === 'StablePhantom'\n    ) {\n      // MetaStable & StablePhantom is the same as Stable for multicall purposes\n      multiPool.call(\n        `${pool.id}.amp`,\n        pool.address,\n        'getAmplificationParameter'\n      );\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n    } else if (pool.poolType === 'Element') {\n      multiPool.call(`${pool.id}.swapFee`, pool.address, 'percentFee');\n    } else if (pool.poolType.toString().includes('Linear')) {\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n\n      multiPool.call(`${pool.id}.targets`, pool.address, 'getTargets');\n      multiPool.call(`${pool.id}.rate`, pool.address, 'getWrappedTokenRate');\n    }\n  });\n\n  let pools = {} as Record<\n    string,\n    {\n      amp?: string[];\n      swapFee: string;\n      weights?: string[];\n      targets?: string[];\n      poolTokens: {\n        tokens: string[];\n        balances: string[];\n      };\n      totalSupply: string;\n      virtualSupply?: string;\n      rate?: string;\n    }\n  >;\n\n  try {\n    pools = (await multiPool.execute()) as Record<\n      string,\n      {\n        amp?: string[];\n        swapFee: string;\n        weights?: string[];\n        poolTokens: {\n          tokens: string[];\n          balances: string[];\n        };\n        totalSupply: string;\n        virtualSupply?: string;\n        rate?: string;\n      }\n    >;\n  } catch (err) {\n    throw `Issue with multicall execution.`;\n  }\n\n  const onChainPools: SubgraphPoolBase[] = [];\n\n  Object.entries(pools).forEach(([poolId, onchainData], index) => {\n    try {\n      const { poolTokens, swapFee, weights, totalSupply, virtualSupply } =\n        onchainData;\n\n      if (\n        subgraphPools[index].poolType === 'Stable' ||\n        subgraphPools[index].poolType === 'MetaStable' ||\n        subgraphPools[index].poolType === 'StablePhantom'\n      ) {\n        if (!onchainData.amp) {\n          console.error(`Stable Pool Missing Amp: ${poolId}`);\n          return;\n        } else {\n          // Need to scale amp by precision to match expected Subgraph scale\n          // amp is stored with 3 decimals of precision\n          subgraphPools[index].amp = formatFixed(onchainData.amp[0], 3);\n        }\n      }\n\n      if (subgraphPools[index].poolType.includes('Linear')) {\n        if (!onchainData.targets) {\n          console.error(`Linear Pool Missing Targets: ${poolId}`);\n          return;\n        } else {\n          subgraphPools[index].lowerTarget = formatFixed(\n            onchainData.targets[0],\n            18\n          );\n          subgraphPools[index].upperTarget = formatFixed(\n            onchainData.targets[1],\n            18\n          );\n        }\n\n        const wrappedIndex = subgraphPools[index].wrappedIndex;\n        if (wrappedIndex === undefined || onchainData.rate === undefined) {\n          console.error(\n            `Linear Pool Missing WrappedIndex or PriceRate: ${poolId}`\n          );\n          return;\n        }\n        // Update priceRate of wrappedToken\n        subgraphPools[index].tokens[wrappedIndex].priceRate = formatFixed(\n          onchainData.rate,\n          18\n        );\n      }\n\n      subgraphPools[index].swapFee = formatFixed(swapFee, 18);\n\n      poolTokens.tokens.forEach((token, i) => {\n        const T = subgraphPools[index].tokens.find((t) =>\n          isSameAddress(t.address, token)\n        );\n        if (!T) throw `Pool Missing Expected Token: ${poolId} ${token}`;\n        T.balance = formatFixed(poolTokens.balances[i], T.decimals);\n        if (weights) {\n          // Only expected for WeightedPools\n          T.weight = formatFixed(weights[i], 18);\n        }\n      });\n\n      // Pools with pre minted BPT\n      if (\n        subgraphPools[index].poolType.includes('Linear') ||\n        subgraphPools[index].poolType === 'StablePhantom'\n      ) {\n        if (virtualSupply === undefined) {\n          console.error(\n            `Pool with pre-minted BPT missing Virtual Supply: ${poolId}`\n          );\n          return;\n        }\n        subgraphPools[index].totalShares = formatFixed(virtualSupply, 18);\n      } else {\n        subgraphPools[index].totalShares = formatFixed(totalSupply, 18);\n      }\n\n      onChainPools.push(subgraphPools[index]);\n    } catch (err) {\n      throw `Issue with pool onchain data: ${err}`;\n    }\n  });\n\n  return onChainPools;\n}\n","import { PoolDataService, SubgraphPoolBase } from '@balancer-labs/sor';\nimport {\n  OrderDirection,\n  Pool_OrderBy,\n  SubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport { parseInt } from 'lodash';\nimport { getOnChainBalances } from './onChainData';\nimport { Provider } from '@ethersproject/providers';\nimport { Network } from '@/lib/constants/network';\nimport { BalancerNetworkConfig, BalancerSdkSorConfig } from '@/types';\n\nconst NETWORKS_WITH_LINEAR_POOLS = [\n  Network.MAINNET,\n  Network.POLYGON,\n  Network.ROPSTEN,\n  Network.RINKEBY,\n  Network.GOERLI,\n  Network.KOVAN,\n];\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function mapPools(pools: any[]): SubgraphPoolBase[] {\n  return pools.map((pool) => ({\n    ...pool,\n    poolType: pool.poolType || '',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    tokens: (pool.tokens || []).map((token: any) => ({\n      ...token,\n      weight: token.weight || null,\n    })),\n    totalWeight: pool.totalWeight || undefined,\n    amp: pool.amp || undefined,\n    expiryTime: pool.expiryTime ? parseInt(pool.expiryTime) : undefined,\n    unitSeconds: pool.unitSeconds ? parseInt(pool.unitSeconds) : undefined,\n    principalToken: pool.principalToken || undefined,\n    baseToken: pool.baseToken || undefined,\n  }));\n}\n\nexport class SubgraphPoolDataService implements PoolDataService {\n  constructor(\n    private readonly client: SubgraphClient,\n    private readonly provider: Provider,\n    private readonly network: BalancerNetworkConfig,\n    private readonly sorConfig: BalancerSdkSorConfig\n  ) {}\n\n  public async getPools(): Promise<SubgraphPoolBase[]> {\n    const pools = this.supportsLinearPools\n      ? await this.getLinearPools()\n      : await this.getNonLinearPools();\n\n    const mapped = mapPools(pools);\n\n    if (this.sorConfig.fetchOnChainBalances === false) {\n      return mapped;\n    }\n\n    return getOnChainBalances(\n      mapped,\n      this.network.addresses.contracts.multicall,\n      this.network.addresses.contracts.vault,\n      this.provider\n    );\n  }\n\n  private get supportsLinearPools() {\n    return NETWORKS_WITH_LINEAR_POOLS.includes(this.network.chainId);\n  }\n\n  private async getLinearPools() {\n    const { pool0, pool1000 } = await this.client.Pools({\n      where: { swapEnabled: true, totalShares_gt: '0' },\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n    });\n\n    const pools = [...pool0, ...pool1000];\n\n    return pools;\n  }\n\n  private async getNonLinearPools() {\n    const { pools } = await this.client.PoolsWithoutLinear({\n      where: { swapEnabled: true, totalShares_gt: '0' },\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n      first: 1000,\n    });\n\n    return pools;\n  }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport axios from 'axios';\n\nexport class CoingeckoTokenPriceService implements TokenPriceService {\n  constructor(private readonly chainId: number) {}\n\n  public async getNativeAssetPriceInToken(\n    tokenAddress: string\n  ): Promise<string> {\n    const ethPerToken = await this.getTokenPriceInNativeAsset(tokenAddress);\n\n    // We get the price of token in terms of ETH\n    // We want the price of 1 ETH in terms of the token base units\n    return `${1 / parseFloat(ethPerToken)}`;\n  }\n\n  /**\n   * @dev Assumes that the native asset has 18 decimals\n   * @param tokenAddress - the address of the token contract\n   * @returns the price of 1 ETH in terms of the token base units\n   */\n  async getTokenPriceInNativeAsset(tokenAddress: string): Promise<string> {\n    const endpoint = `https://api.coingecko.com/api/v3/simple/token_price/${this.platformId}?contract_addresses=${tokenAddress}&vs_currencies=${this.nativeAssetId}`;\n\n    const { data } = await axios.get(endpoint, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (data[tokenAddress.toLowerCase()][this.nativeAssetId] === undefined) {\n      throw Error('No price returned from Coingecko');\n    }\n\n    return data[tokenAddress.toLowerCase()][this.nativeAssetId];\n  }\n\n  private get platformId(): string {\n    switch (this.chainId) {\n      case 1:\n        return 'ethereum';\n      case 42:\n        return 'ethereum';\n      case 137:\n        return 'polygon-pos';\n      case 42161:\n        return 'arbitrum-one';\n    }\n\n    return '2';\n  }\n\n  private get nativeAssetId(): string {\n    switch (this.chainId) {\n      case 1:\n        return 'eth';\n      case 42:\n        return 'eth';\n      case 137:\n        return '';\n      case 42161:\n        return 'eth';\n    }\n\n    return '';\n  }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport { SubgraphClient } from '@/modules/subgraph/subgraph';\nimport { keyBy } from 'lodash';\n\nexport class SubgraphTokenPriceService implements TokenPriceService {\n  private readonly weth: string;\n\n  constructor(private readonly client: SubgraphClient, weth: string) {\n    //the subgraph addresses are all toLowerCase\n    this.weth = weth.toLowerCase();\n  }\n\n  public async getNativeAssetPriceInToken(\n    tokenAddress: string\n  ): Promise<string> {\n    const ethPerToken = await this.getLatestPriceInEthFromSubgraph(\n      tokenAddress\n    );\n\n    if (!ethPerToken) {\n      throw Error('No price found in the subgraph');\n    }\n\n    // We want the price of 1 ETH in terms of the token base units\n    return `${1 / ethPerToken}`;\n  }\n\n  public async getLatestPriceInEthFromSubgraph(\n    tokenAddress: string\n  ): Promise<number | null> {\n    tokenAddress = tokenAddress.toLowerCase();\n\n    const { latestPrices } = await this.client.TokenLatestPrices({\n      where: { asset_in: [tokenAddress, this.weth] },\n    });\n    const pricesKeyedOnId = keyBy(latestPrices, 'id');\n\n    //the ids are set as ${asset}-${pricingAsset}\n    //first try to find an exact match\n    if (pricesKeyedOnId[`${tokenAddress}-${this.weth}`]) {\n      return parseFloat(pricesKeyedOnId[`${tokenAddress}-${this.weth}`].price);\n    }\n\n    //no exact match, try to traverse the path\n    const matchingLatestPrices = latestPrices.filter(\n      (price) => price.asset === tokenAddress\n    );\n\n    //pick the first one we match on.\n    //There is no timestamp on latestPrice, should get introduced to allow for sorting by latest\n    for (const tokenPrice of matchingLatestPrices) {\n      const pricingAssetPricedInEth =\n        pricesKeyedOnId[`${tokenPrice.pricingAsset}-${this.weth}`];\n\n      //1 BAL = 20 USDC, 1 USDC = 0.00025 ETH, 1 BAL = 20 * 0.00025\n      if (pricingAssetPricedInEth) {\n        return (\n          parseFloat(tokenPrice.price) *\n          parseFloat(pricingAssetPricedInEth.price)\n        );\n      }\n    }\n\n    return null;\n  }\n}\n","import { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { BalancerNetworkConfig, BalancerSdkConfig } from '@/types';\n\nexport function getNetworkConfig(\n  config: BalancerSdkConfig\n): BalancerNetworkConfig {\n  if (typeof config.network === 'number') {\n    const networkConfig = BALANCER_NETWORK_CONFIG[config.network];\n\n    return {\n      ...networkConfig,\n      urls: {\n        ...networkConfig.urls,\n        subgraph: config.customSubgraphUrl ?? networkConfig.urls.subgraph,\n      },\n    };\n  }\n\n  return {\n    ...config.network,\n    urls: {\n      ...config.network.urls,\n      subgraph: config.customSubgraphUrl ?? config.network.urls.subgraph,\n    },\n  };\n}\n","import { SOR, SorConfig, TokenPriceService } from '@balancer-labs/sor';\nimport { Provider, JsonRpcProvider } from '@ethersproject/providers';\nimport { SubgraphPoolDataService } from './pool-data/subgraphPoolDataService';\nimport { CoingeckoTokenPriceService } from './token-price/coingeckoTokenPriceService';\nimport {\n  SubgraphClient,\n  createSubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport {\n  BalancerNetworkConfig,\n  BalancerSdkConfig,\n  BalancerSdkSorConfig,\n} from '@/types';\nimport { SubgraphTokenPriceService } from './token-price/subgraphTokenPriceService';\nimport { getNetworkConfig } from '@/modules/sdk.helpers';\n\nexport class Sor extends SOR {\n  constructor(sdkConfig: BalancerSdkConfig) {\n    const network = getNetworkConfig(sdkConfig);\n    const sorConfig = Sor.getSorConfig(sdkConfig);\n    const sorNetworkConfig = Sor.getSorNetworkConfig(network);\n    const provider = new JsonRpcProvider(\n      sdkConfig.rpcUrl,\n      sdkConfig.network as number\n    );\n    const subgraphClient = createSubgraphClient(network.urls.subgraph);\n\n    const poolDataService = Sor.getPoolDataService(\n      network,\n      sorConfig,\n      provider,\n      subgraphClient\n    );\n\n    const tokenPriceService = Sor.getTokenPriceService(\n      network,\n      sorConfig,\n      subgraphClient\n    );\n\n    super(provider, sorNetworkConfig, poolDataService, tokenPriceService);\n  }\n\n  private static getSorConfig(config: BalancerSdkConfig): BalancerSdkSorConfig {\n    return {\n      tokenPriceService: 'coingecko',\n      poolDataService: 'subgraph',\n      fetchOnChainBalances: true,\n      ...config.sor,\n    };\n  }\n\n  private static getSorNetworkConfig(\n    network: BalancerNetworkConfig\n  ): SorConfig {\n    return {\n      ...network,\n      vault: network.addresses.contracts.vault,\n      weth: network.addresses.tokens.wrappedNativeAsset,\n      lbpRaisingTokens: network.addresses.tokens?.lbpRaisingTokens,\n      wETHwstETH: network.pools.wETHwstETH,\n    };\n  }\n\n  private static getPoolDataService(\n    network: BalancerNetworkConfig,\n    sorConfig: BalancerSdkSorConfig,\n    provider: Provider,\n    subgraphClient: SubgraphClient\n  ) {\n    return typeof sorConfig.poolDataService === 'object'\n      ? sorConfig.poolDataService\n      : new SubgraphPoolDataService(\n          subgraphClient,\n          provider,\n          network,\n          sorConfig\n        );\n  }\n\n  private static getTokenPriceService(\n    network: BalancerNetworkConfig,\n    sorConfig: BalancerSdkSorConfig,\n    subgraphClient: SubgraphClient\n  ): TokenPriceService {\n    if (typeof sorConfig.tokenPriceService === 'object') {\n      return sorConfig.tokenPriceService;\n    } else if (sorConfig.tokenPriceService === 'subgraph') {\n      new SubgraphTokenPriceService(\n        subgraphClient,\n        network.addresses.tokens.wrappedNativeAsset\n      );\n    }\n\n    return new CoingeckoTokenPriceService(network.chainId);\n  }\n}\n","import {\n  QuerySimpleFlashSwapParameters,\n  QuerySimpleFlashSwapResponse,\n  SimpleFlashSwapParameters,\n  SwapType,\n} from '../types';\nimport { queryBatchSwap } from '../queryBatchSwap';\nimport { BatchSwap } from '../types';\nimport { sum } from 'lodash';\n\nfunction checkSimpleFlashSwapParams(params: {\n  poolIds: string[];\n  assets: string[];\n}) {\n  if (params.poolIds.length > 2) {\n    throw new Error('Simple flash swap only supports a maximum of two pools');\n  }\n\n  if (params.assets.length > 2) {\n    throw new Error(\n      'Simple flash swap only supports a maximum of to two assets (tokens)'\n    );\n  }\n}\n\nfunction createSwaps(\n  poolIds: SimpleFlashSwapParameters['poolIds'],\n  amount: string\n): BatchSwap['swaps'] {\n  return [\n    {\n      poolId: poolIds[0],\n      assetInIndex: 0,\n      assetOutIndex: 1,\n      amount,\n      userData: '0x',\n    },\n    {\n      poolId: poolIds[1],\n      assetInIndex: 1,\n      assetOutIndex: 0,\n      amount: '0',\n      userData: '0x',\n    },\n  ];\n}\n\nexport function convertSimpleFlashSwapToBatchSwapParameters({\n  poolIds,\n  assets,\n  flashLoanAmount,\n  walletAddress,\n}: SimpleFlashSwapParameters & {\n  walletAddress: string;\n}): BatchSwap {\n  checkSimpleFlashSwapParams({ poolIds, assets });\n\n  const swaps = createSwaps(poolIds, flashLoanAmount);\n\n  const funds = {\n    sender: walletAddress,\n    fromInternalBalance: false,\n    recipient: walletAddress,\n    toInternalBalance: false,\n  };\n\n  const limits = ['0', '0'];\n\n  const deadline = '999999999999999999';\n\n  return {\n    kind: SwapType.SwapExactIn,\n    swaps,\n    assets,\n    funds,\n    limits,\n    deadline,\n  };\n}\n\nfunction deltaToExpectedProfit(delta: string) {\n  return Number(delta) * -1;\n}\n\nfunction calcProfit(profits: string[]) {\n  return sum(profits);\n}\n\n/**\n * Simple interface to test if a simple flash swap is valid and see potential profits.\n *\n * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n * swapping in the first pool and then back in the second pool for a profit. For more\n * complex flash swaps, you will have to use the batch swap method.\n *\n * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n *\n * _NB: This method doesn't execute a flashSwap\n *\n * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n * @param {Contract}                    params.vaultContract - the ethersjs contract for the Balancer Vault.\n * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n * @param {string[]}                    params.poolIds - array of Balancer pool ids\n * @param {string[]}                    params.assets - array of token addresses\n * @returns {Promise<QuerySimpleFlashSwapResponse}>}       Returns an ethersjs transaction response\n */\nexport async function querySimpleFlashSwap(\n  params: QuerySimpleFlashSwapParameters\n): Promise<QuerySimpleFlashSwapResponse> {\n  checkSimpleFlashSwapParams(params);\n\n  const [tokenAddress0, tokenAddress1] = params.assets;\n\n  try {\n    const deltas = await queryBatchSwap(\n      params.vaultContract,\n      SwapType.SwapExactIn,\n      createSwaps(params.poolIds, params.flashLoanAmount),\n      params.assets\n    );\n\n    const profits = {\n      [tokenAddress0]: deltaToExpectedProfit(deltas[0]).toString(),\n      [tokenAddress1]: deltaToExpectedProfit(deltas[1]).toString(),\n    };\n\n    return {\n      profits,\n      isProfitable:\n        calcProfit([profits[tokenAddress0], profits[tokenAddress1]]) > 0,\n    };\n  } catch (err) {\n    throw `Failed to querySimpleFlashSwap: ${err}`;\n  }\n}\n","import { Vault__factory } from '@balancer-labs/typechain';\nimport vaultActionsAbi from '@/lib/abi/VaultActions.json';\nimport { JsonFragment } from '@ethersproject/abi';\nimport { networkAddresses } from '@/lib/constants/config';\n\n/**\n * Maps SOR data to get the tokenIn used in swaps.\n * Logic related to a relayer wrapping and unwrapping tokens.\n * SOR returns list of already wrapped tokenAddresses used in the swap.\n * However tokenIn defined as an input is the unwrapped token.\n * Note: tokenAddresses are transformed in SOR lib wrapInfo.setWrappedInfo\n * TODO: Once PR is merged, this table can be removed.\n */\ntype WrappedList = {\n  [key: string]: string;\n};\n\nconst underlyingToWrappedMap: WrappedList = {\n  // stETH => wstETH\n  '0xae7ab96520de3a18e5e111b5eaab095312d7fe84':\n    '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n\n  // AMPL => WAMPL\n  '0xd46ba6d942050d489dbd938a2c909a5d5039a161':\n    '0xedb171c18ce90b633db442f2a6f72874093b49ef',\n\n  // aAMPL -> ubAAMPL\n  '0x1e6bb68acec8fefbd87d192be09bb274170a0548':\n    '0xF03387d8d0FF326ab586A58E0ab4121d106147DF',\n};\n\n/**\n * Vault swaps are operating on wrapped tokens. When user is sending an unwrapped token, it's wrapped in a relayer.\n * SOR is returning an array of tokens already wrapped.\n * Converts tokenIn to match tokenIn used in a swap.\n *\n * TODO: add tokenIn and tokenOut addressed used for swap in the SOR results as tokenInForSwap, tokenOutForSwap\n *\n * @param token token address\n * @returns wrapped token address\n */\nfunction tokenForSwaps(token: string): string {\n  let wrapped = token;\n  // eslint-disable-next-line no-prototype-builtins\n  if (underlyingToWrappedMap.hasOwnProperty(token)) {\n    wrapped = underlyingToWrappedMap[token as keyof WrappedList];\n  }\n  return wrapped;\n}\n\nexport enum Relayers {\n  vault = 1,\n  lido = 2,\n}\n\nexport interface SwapRelayer {\n  id: Relayers;\n  address: string;\n}\n\n/**\n * Resolves a contract address for sending swap transaction to.\n * Balancer is using relayers to automatically wrap / unwrap tokens not compatibile with ERC20.\n */\nfunction relayerResolver(\n  assetIn: string,\n  assetOut: string,\n  chainId: number\n): SwapRelayer {\n  const { tokens, contracts } = networkAddresses(chainId);\n\n  let to = {\n    id: Relayers.vault,\n    address: contracts.vault,\n  };\n\n  if (tokens.stETH && contracts.lidoRelayer)\n    if ([assetIn, assetOut].includes(tokens.stETH))\n      to = {\n        id: Relayers.lido,\n        address: contracts.lidoRelayer,\n      };\n\n  return to;\n}\n\nfunction swapFragment(relayer: SwapRelayer): JsonFragment[] {\n  let source = Vault__factory.abi;\n  if (relayer.id === Relayers.lido) source = vaultActionsAbi;\n\n  const signatures = source.filter(\n    (fn) => fn.name && ['swap', 'batchSwap'].includes(fn.name)\n  );\n\n  return signatures;\n}\n\nfunction batchSwapFragment(\n  assetIn: string,\n  assetOut: string,\n  chainId: number\n): JsonFragment[] {\n  const vaultSignaturesForSwaps = Vault__factory.abi.filter(\n    (fn) => fn.name && ['batchSwap'].includes(fn.name)\n  );\n  const relayerSignaturesForSwaps = vaultActionsAbi.filter(\n    (fn) => fn.name && ['batchSwap'].includes(fn.name)\n  );\n  let returnSignatures = vaultSignaturesForSwaps;\n  const { tokens, contracts } = networkAddresses(chainId);\n  if (tokens.stETH && contracts.lidoRelayer) {\n    if ([assetIn, assetOut].includes(tokens.stETH))\n      returnSignatures = relayerSignaturesForSwaps;\n  }\n\n  return returnSignatures;\n}\n\nexport { tokenForSwaps, relayerResolver, swapFragment, batchSwapFragment };\n","import { SwapInfo } from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { tokenForSwaps } from './swap_utils';\nimport { SwapType } from '../types';\n\ninterface AmountForLimit {\n  amount: BigNumber;\n  max: (slippage: number) => BigNumber;\n  min: (slippage: number) => BigNumber;\n}\n\ninterface SDKSwapInfo extends SwapInfo {\n  /** Name mapping to improve readability. */\n  amountIn: BigNumber;\n  amountOut: BigNumber;\n  /** Name mapping for amounts used specifically for limits calculations. */\n  amountInForLimits: AmountForLimit;\n  amountOutForLimits: AmountForLimit;\n  /** Wrapped token addresses used in the swap. */\n  tokenInForSwaps: string;\n  tokenOutFromSwaps: string;\n}\n\n/** Applies slippage to a number */\nfunction amountForLimit(amount: BigNumber): AmountForLimit {\n  return {\n    amount,\n    max: (maxSlippage: number): BigNumber => {\n      return amount.mul(1e3 + maxSlippage).div(1e3);\n    },\n    min: (maxSlippage: number): BigNumber => {\n      return amount.mul(1e3 - maxSlippage).div(1e3);\n    },\n  };\n}\n\nfunction decorateSorSwapInfo(\n  swapInfo: SwapInfo,\n  swapType: SwapType\n): SDKSwapInfo {\n  const amountIn =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.swapAmount\n      : swapInfo.returnAmount;\n  const amountOut =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.returnAmount\n      : swapInfo.swapAmount;\n  const amountInForLimits =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.swapAmountForSwaps || swapInfo.swapAmount\n      : swapInfo.returnAmountFromSwaps || swapInfo.returnAmount;\n  const amountOutForLimits =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.returnAmountFromSwaps || swapInfo.returnAmount\n      : swapInfo.swapAmountForSwaps || swapInfo.swapAmount;\n  const tokenInForSwaps = tokenForSwaps(swapInfo.tokenIn);\n  const tokenOutFromSwaps = tokenForSwaps(swapInfo.tokenOut);\n\n  return {\n    ...swapInfo,\n    amountIn,\n    amountOut,\n    amountInForLimits: amountForLimit(amountInForLimits),\n    amountOutForLimits: amountForLimit(amountOutForLimits),\n    tokenInForSwaps,\n    tokenOutFromSwaps,\n  };\n}\n\nexport { SDKSwapInfo, tokenForSwaps, decorateSorSwapInfo };\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { FundManagement, SingleSwap, Swap, SwapType } from '../types';\nimport { Interface, JsonFragment } from '@ethersproject/abi';\nimport { SwapInfo } from '@balancer-labs/sor';\nimport { SDKSwapInfo, decorateSorSwapInfo } from './swap_info_decorator';\nimport { AddressZero } from '@ethersproject/constants';\nimport { swapFragment, relayerResolver, SwapRelayer } from './swap_utils';\n\nclass SingleSwapBuilder {\n  private swapInfo: SDKSwapInfo;\n  funds?: FundManagement;\n  limit?: BigNumberish;\n  deadline?: BigNumberish;\n  relayer: SwapRelayer;\n  readonly functionName = 'swap';\n\n  /**\n   * Building swap transaction data\n   *\n   * @param swapInfo SOR result\n   * @param kind\n   * @param chainId used to resolve relayer addresses\n   */\n  constructor(\n    swapInfo: SwapInfo,\n    private readonly kind: SwapType,\n    private readonly chainId: number\n  ) {\n    this.swapInfo = decorateSorSwapInfo(swapInfo, kind);\n    this.relayer = relayerResolver(\n      this.swapInfo.tokenIn,\n      this.swapInfo.tokenOut,\n      this.chainId\n    );\n  }\n\n  setFunds(sender: string, recipient?: string): void {\n    this.funds = {\n      sender,\n      recipient: recipient || sender,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n  }\n\n  /**\n   * @param deadline block timestamp\n   */\n  setDeadline(deadline: BigNumber): void {\n    this.deadline = deadline.toString();\n  }\n\n  get amount(): BigNumber {\n    return this.kind === SwapType.SwapExactOut\n      ? this.swapInfo.amountOutForLimits.amount\n      : this.swapInfo.amountInForLimits.amount;\n  }\n\n  /**\n   * Calculates the limit for token amount.\n   * https://dev.balancer.fi/guides/swaps/single-swaps\n   * https://dev.balancer.fi/resources/swaps/single-swap\n   *\n   * For swap:\n   * The meaning of limit depends on the value of kind\n   *    GIVEN_IN: The minimum amount of tokens we would accept to receive from the swap.\n   *    GIVEN_OUT: The maximum amount of tokens we would be sending to swap.\n   *\n   * @param maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   */\n  setLimits(maxSlippage: number): void {\n    this.limit =\n      this.kind === SwapType.SwapExactIn\n        ? this.swapInfo.amountOutForLimits.min(maxSlippage).toString()\n        : this.swapInfo.amountInForLimits.max(maxSlippage).toString();\n  }\n\n  get singleSwap(): SingleSwap {\n    const poolId = this.swapInfo.swaps[0].poolId;\n    const kind = this.kind;\n    const assetIn = this.swapInfo.tokenInForSwaps;\n    const assetOut = this.swapInfo.tokenOutFromSwaps;\n    const amount = this.amount.toString();\n    const userData = '0x';\n\n    return {\n      poolId,\n      kind,\n      assetIn,\n      assetOut,\n      amount,\n      userData,\n    };\n  }\n\n  attributes(): Swap {\n    if (!this.funds || !this.limit || !this.deadline) {\n      throw new Error('Uninitialized arguments');\n    }\n\n    // TODO: Raise errors when some parameters are missing\n    let attrs: Swap = {\n      request: this.singleSwap,\n      funds: this.funds,\n      limit: this.limit,\n      deadline: this.deadline,\n    };\n\n    // TODO: Call this logic from a relayer module maybe? Do we actually need to do that?\n    // additional parameters on a contract:\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L44\n    const fragment = this.fragment();\n    if (fragment[0].inputs && fragment[0].inputs?.length > 4) {\n      attrs = {\n        ...attrs,\n        value: '0',\n        outputReference: '0',\n      };\n    }\n\n    return attrs;\n  }\n\n  data(): string {\n    const contractInterface = new Interface(this.fragment());\n\n    return contractInterface.encodeFunctionData(\n      'swap',\n      Object.values(this.attributes())\n    );\n  }\n\n  value(maxSlippage: number): BigNumber {\n    let amount = BigNumber.from(0);\n    if (this.swapInfo.tokenIn === AddressZero)\n      amount =\n        this.kind === SwapType.SwapExactIn\n          ? this.swapInfo.amountIn\n          : this.swapInfo.amountInForLimits.max(maxSlippage);\n    return amount;\n  }\n\n  to(): string {\n    return this.relayer.address;\n  }\n\n  private fragment(): JsonFragment[] {\n    return swapFragment(this.relayer).filter(\n      (f) => f.name === this.functionName\n    );\n  }\n}\n\nexport { SingleSwapBuilder };\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { BatchSwap, FundManagement, SwapType } from '../types';\nimport { Interface, JsonFragment } from '@ethersproject/abi';\nimport { SwapInfo } from '@balancer-labs/sor';\nimport { SDKSwapInfo, decorateSorSwapInfo } from './swap_info_decorator';\nimport { AddressZero } from '@ethersproject/constants';\nimport { swapFragment, relayerResolver, SwapRelayer } from './swap_utils';\n\nclass BatchSwapBuilder {\n  private swapInfo: SDKSwapInfo;\n  funds?: FundManagement;\n  limits?: BigNumberish[];\n  deadline?: BigNumberish;\n  relayer: SwapRelayer;\n  readonly functionName = 'batchSwap';\n\n  /**\n   * Building swap transaction data\n   *\n   * @param swapInfo SOR result\n   * @param kind\n   */\n  constructor(\n    swapInfo: SwapInfo,\n    private readonly kind: SwapType,\n    private readonly chainId: number\n  ) {\n    this.swapInfo = decorateSorSwapInfo(swapInfo, kind);\n    this.relayer = relayerResolver(\n      this.swapInfo.tokenIn,\n      this.swapInfo.tokenOut,\n      this.chainId\n    );\n  }\n\n  setFunds(sender: string, recipient?: string): void {\n    this.funds = {\n      sender,\n      recipient: recipient || sender,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n  }\n\n  /**\n   * @param deadline block timestamp\n   */\n  setDeadline(deadline: BigNumber): void {\n    this.deadline = deadline;\n  }\n\n  /**\n   * Given IN it's the minimum amount we are willing to accept.\n   * Given OUT it's the fixed amount defined as output.\n   */\n  minAmountOut(maxSlippage: number): BigNumber {\n    return this.kind === SwapType.SwapExactIn\n      ? this.swapInfo.amountOutForLimits.min(maxSlippage)\n      : this.swapInfo.amountOutForLimits.amount;\n  }\n\n  /**\n   * Given IN it's the fixed amount we define as input.\n   * Given OUT it's the maximum amount we are willing to pay for the request.\n   */\n  maxAmountIn(maxSlippage: number): BigNumber {\n    return this.kind === SwapType.SwapExactOut\n      ? this.swapInfo.amountInForLimits.max(maxSlippage)\n      : this.swapInfo.amountInForLimits.amount;\n  }\n\n  /**\n   * Calculates limits for token amount.\n   * Maximum number of tokens to send is a positive number\n   * Minimum amount of tokens to receive is a negative number\n   * https://dev.balancer.fi/guides/swaps/batch-swaps\n   * https://dev.balancer.fi/resources/swaps/batch-swaps#multi-hop-examples\n   *\n   * For batchSwap:\n   * An array of of the maximum net amounts of each asset which can be taken to perform the swap.\n   * Should the total trade require more than limits[i] tokens to be taken from sender for any i\n   * then the transaction shall fail.\n   *\n   * @param maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   */\n  setLimits(maxSlippage: number): void {\n    // TODO: This implementation handles only a single input. We might want to extend it for multiple token inputs\n    this.limits = this.swapInfo.tokenAddresses\n      .map((token) => {\n        let amount = BigNumber.from(0);\n        if (token === this.swapInfo.tokenInForSwaps) {\n          amount = this.maxAmountIn(maxSlippage);\n        }\n        if (token === this.swapInfo.tokenOutFromSwaps) {\n          amount = this.minAmountOut(maxSlippage).mul(-1);\n        }\n        return amount;\n      })\n      .map((limit) => limit.toString().split('.')[0]);\n  }\n\n  attributes(): BatchSwap {\n    // TODO: Raise errors when some parameters are missing\n    if (!this.funds || !this.limits || !this.deadline) {\n      throw new Error('Uninitialized arguments');\n    }\n\n    let attrs: BatchSwap = {\n      kind: this.kind,\n      swaps: this.swapInfo.swaps,\n      assets: this.swapInfo.tokenAddresses,\n      funds: this.funds,\n      limits: this.limits,\n      deadline: this.deadline,\n    };\n\n    const fragment = this.fragment();\n\n    // TODO: Call this logic from a relayer module maybe? Do we actually need to do that?\n    // additional parameters on a contract:\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L67\n    if (fragment[0].inputs && fragment[0].inputs?.length > 6) {\n      attrs = {\n        ...attrs,\n        value: '0',\n        outputReferences: [],\n      };\n    }\n\n    return attrs;\n  }\n\n  data(): string {\n    const contractInterface = new Interface(this.fragment());\n\n    return contractInterface.encodeFunctionData(\n      'batchSwap',\n      Object.values(this.attributes())\n    );\n  }\n\n  value(maxSlippage: number): BigNumber {\n    let amount = BigNumber.from(0);\n    if (this.swapInfo.tokenIn === AddressZero)\n      amount = this.maxAmountIn(maxSlippage);\n    return amount;\n  }\n\n  to(): string {\n    return this.relayer.address;\n  }\n\n  private fragment(): JsonFragment[] {\n    return swapFragment(this.relayer).filter(\n      (f) => f.name === this.functionName\n    );\n  }\n}\n\nexport { BatchSwapBuilder };\n","import { SOR, SubgraphPoolBase, SwapInfo, SwapTypes } from '@balancer-labs/sor';\nimport { Vault__factory, Vault } from '@balancer-labs/typechain';\nimport {\n  BatchSwap,\n  QuerySimpleFlashSwapParameters,\n  QuerySimpleFlashSwapResponse,\n  QueryWithSorInput,\n  QueryWithSorOutput,\n  SimpleFlashSwapParameters,\n  FindRouteParameters,\n  BuildTransactionParameters,\n  SwapAttributes,\n  SwapType,\n} from './types';\nimport {\n  queryBatchSwap,\n  queryBatchSwapWithSor,\n  getSorSwapInfo,\n} from './queryBatchSwap';\nimport { balancerVault } from '@/lib/constants/config';\nimport { getLimitsForSlippage } from './helpers';\nimport { BalancerSdkConfig } from '@/types';\nimport { SwapInput } from './types';\nimport { Sor } from '@/modules/sor/sor.module';\nimport {\n  convertSimpleFlashSwapToBatchSwapParameters,\n  querySimpleFlashSwap,\n} from './flashSwap';\nimport {\n  SingleSwapBuilder,\n  BatchSwapBuilder,\n} from '@/modules/swaps/swap_builder';\n\nexport class Swaps {\n  readonly sor: SOR;\n  chainId: number;\n  vaultContract: Vault;\n\n  // TODO: sorOrConfig - let's make it more predictable and always pass configuration explicitly\n  constructor(sorOrConfig: SOR | BalancerSdkConfig) {\n    if (sorOrConfig instanceof SOR) {\n      this.sor = sorOrConfig;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.chainId = (<any>this.sor.provider)['_network']['chainId'];\n    } else {\n      this.sor = new Sor(sorOrConfig);\n      this.chainId = sorOrConfig.network as number;\n    }\n\n    this.vaultContract = Vault__factory.connect(\n      balancerVault,\n      this.sor.provider\n    );\n  }\n\n  static getLimitsForSlippage(\n    tokensIn: string[],\n    tokensOut: string[],\n    swapType: SwapType,\n    deltas: string[],\n    assets: string[],\n    slippage: string\n  ): string[] {\n    // TO DO - Check best way to do this?\n    const limits = getLimitsForSlippage(\n      tokensIn,\n      tokensOut,\n      swapType,\n      deltas,\n      assets,\n      slippage\n    );\n\n    return limits.map((l) => l.toString());\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param FindRouteParameters\n   * @param FindRouteParameters.tokenIn Address\n   * @param FindRouteParameters.tokenOut Address\n   * @param FindRouteParameters.amount BigNumber with a trade amount\n   * @param FindRouteParameters.gasPrice BigNumber current gas price\n   * @param FindRouteParameters.maxPools number of pool included in path\n   * @returns Best trade route information\n   */\n  async findRouteGivenIn({\n    tokenIn,\n    tokenOut,\n    amount,\n    gasPrice,\n    maxPools = 4,\n  }: FindRouteParameters): Promise<SwapInfo> {\n    return this.sor.getSwaps(tokenIn, tokenOut, SwapTypes.SwapExactIn, amount, {\n      gasPrice,\n      maxPools,\n    });\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param FindRouteParameters\n   * @param FindRouteParameters.tokenIn Address\n   * @param FindRouteParameters.tokenOut Address\n   * @param FindRouteParameters.amount BigNumber with a trade amount\n   * @param FindRouteParameters.gasPrice BigNumber current gas price\n   * @param FindRouteParameters.maxPools number of pool included in path\n   * @returns Best trade route information\n   */\n  async findRouteGivenOut({\n    tokenIn,\n    tokenOut,\n    amount,\n    gasPrice,\n    maxPools,\n  }: FindRouteParameters): Promise<SwapInfo> {\n    return this.sor.getSwaps(\n      tokenIn,\n      tokenOut,\n      SwapTypes.SwapExactOut,\n      amount,\n      {\n        gasPrice,\n        maxPools,\n      }\n    );\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param BuildTransactionParameters\n   * @param BuildTransactionParameters.userAddress Address\n   * @param BuildTransactionParameters.swapInfo result of route finding\n   * @param BuildTransactionParameters.kind 0 - givenIn, 1 - givenOut\n   * @param BuildTransactionParameters.deadline BigNumber block timestamp\n   * @param BuildTransactionParameters.maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildSwap({\n    userAddress,\n    recipient,\n    swapInfo,\n    kind,\n    deadline,\n    maxSlippage,\n  }: BuildTransactionParameters): SwapAttributes {\n    if (!this.chainId) throw 'Missing network configuration';\n\n    // one vs batch (gas cost optimisation when using single swap)\n    const builder =\n      swapInfo.swaps.length > 1\n        ? new BatchSwapBuilder(swapInfo, kind, this.chainId)\n        : new SingleSwapBuilder(swapInfo, kind, this.chainId);\n    builder.setFunds(userAddress, recipient);\n    builder.setDeadline(deadline);\n    builder.setLimits(maxSlippage);\n\n    const to = builder.to();\n    const { functionName } = builder;\n    const attributes = builder.attributes();\n    const data = builder.data();\n    const value = builder.value(maxSlippage);\n\n    return { to, functionName, attributes, data, value };\n  }\n\n  /**\n   * Encode batchSwap in an ABI byte string\n   *\n   * [See method for a batchSwap](https://dev.balancer.fi/references/contracts/apis/the-vault#batch-swaps).\n   *\n   * _NB: This method doesn't execute a batchSwap -- it returns an [ABI byte string](https://docs.soliditylang.org/en/latest/abi-spec.html)\n   * containing the data of the function call on a contract, which can then be sent to the network to be executed.\n   * (ex. [sendTransaction](https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html#sendtransaction)).\n   *\n   * @param {BatchSwap}           batchSwap - BatchSwap information used for query.\n   * @param {SwapType}            batchSwap.kind - either exactIn or exactOut\n   * @param {BatchSwapSteps[]}    batchSwap.swaps - sequence of swaps\n   * @param {string[]}            batchSwap.assets - array contains the addresses of all assets involved in the swaps\n   * @param {FundManagement}      batchSwap.funds - object containing information about where funds should be taken/sent\n   * @param {number[]}            batchSwap.limits - limits for each token involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the minimum amount of tokens to receive (by passing a negative value) is specified\n   * @param {string}              batchSwap.deadline -  time (in Unix timestamp) after which it will no longer attempt to make a trade\n   * @returns {string}            encodedBatchSwapData - Returns an ABI byte string containing the data of the function call on a contract\n   */\n  static encodeBatchSwap(batchSwap: BatchSwap): string {\n    const vaultInterface = Vault__factory.createInterface();\n\n    return vaultInterface.encodeFunctionData('batchSwap', [\n      batchSwap.kind,\n      batchSwap.swaps,\n      batchSwap.assets,\n      batchSwap.funds,\n      batchSwap.limits,\n      batchSwap.deadline,\n    ]);\n  }\n\n  /**\n   * Encode simple flash swap into a ABI byte string\n   *\n   * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n   * swapping in the first pool and then back in the second pool for a profit. For more\n   * complex flash swaps, you will have to use the batch swap method.\n   *\n   * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n   *\n   * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n   * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n   * @param {string[]}                    params.poolIds - array of Balancer pool ids\n   * @param {string[]}                    params.assets - array of token addresses\n   * @param {string}                      params.walletAddress - array of token addresses\n   * @returns {string}                    encodedBatchSwapData - Returns an ABI byte string containing the data of the function call on a contract\n   */\n  static encodeSimpleFlashSwap(params: SimpleFlashSwapParameters): string {\n    return this.encodeBatchSwap(\n      convertSimpleFlashSwapToBatchSwapParameters(params)\n    );\n  }\n\n  /**\n   * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n   * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n   * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.sor.fetchPools();\n  }\n\n  public getPools(): SubgraphPoolBase[] {\n    return this.sor.getPools();\n  }\n\n  /**\n   * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas.\n   * @param batchSwap - BatchSwap information used for query.\n   * @param {SwapType} batchSwap.kind - either exactIn or exactOut.\n   * @param {BatchSwapStep[]} batchSwap.swaps - sequence of swaps.\n   * @param {string[]} batchSwap.assets - array contains the addresses of all assets involved in the swaps.\n   * @returns {Promise<string[]>} Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n   * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n   * the same index in the `assets` array.\n   */\n  async queryBatchSwap(\n    batchSwap: Pick<BatchSwap, 'kind' | 'swaps' | 'assets'>\n  ): Promise<string[]> {\n    return await queryBatchSwap(\n      this.vaultContract,\n      batchSwap.kind,\n      batchSwap.swaps,\n      batchSwap.assets\n    );\n  }\n\n  /**\n   * Uses SOR to create and query a batchSwap.\n   * @param {QueryWithSorInput} queryWithSor - Swap information used for querying using SOR.\n   * @param {string[]} queryWithSor.tokensIn - Array of addresses of assets in.\n   * @param {string[]} queryWithSor.tokensOut - Array of addresses of assets out.\n   * @param {SwapType} queryWithSor.swapType - Type of Swap, ExactIn/Out.\n   * @param {string[]} queryWithSor.amounts - Array of amounts used in swap.\n   * @param {FetchPoolsInput} queryWithSor.fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns {Promise<QueryWithSorOutput>} Returns amount of tokens swaps along with swap and asset info that can be submitted to a batchSwap call.\n   */\n  async queryBatchSwapWithSor(\n    queryWithSor: QueryWithSorInput\n  ): Promise<QueryWithSorOutput> {\n    return await queryBatchSwapWithSor(\n      this.sor,\n      this.vaultContract,\n      queryWithSor\n    );\n  }\n\n  /**\n   * Simple interface to test if a simple flash swap is valid and see potential profits.\n   *\n   * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n   * swapping in the first pool and then back in the second pool for a profit. For more\n   * complex flash swaps, you will have to use the batch swap method.\n   *\n   * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n   *\n   * _NB: This method doesn't execute a flashSwap\n   *\n   * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n   * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n   * @param {string[]}                    params.poolIds - array of Balancer pool ids\n   * @param {string[]}                    params.assets - array of token addresses\n   * @returns {Promise<{profits: Record<string, string>, isProfitable: boolean}>}       Returns an ethersjs transaction response\n   */\n  async querySimpleFlashSwap(\n    params: Omit<QuerySimpleFlashSwapParameters, 'vaultContract'>\n  ): Promise<QuerySimpleFlashSwapResponse> {\n    return await querySimpleFlashSwap({\n      ...params,\n      vaultContract: this.vaultContract,\n    });\n  }\n\n  /**\n   * Use SOR to get swapInfo for tokenIn<>tokenOut.\n   * @param {SwapInput} swapInput - Swap information used for querying using SOR.\n   * @param {string} swapInput.tokenIn - Addresse of asset in.\n   * @param {string} swapInput.tokenOut - Addresse of asset out.\n   * @param {SwapType} swapInput.swapType - Type of Swap, ExactIn/Out.\n   * @param {string} swapInput.amount - Amount used in swap.\n   * @returns {Promise<SwapInfo>} SOR swap info.\n   */\n  async getSorSwap(swapInput: SwapInput): Promise<SwapInfo> {\n    return await getSorSwapInfo(\n      swapInput.tokenIn,\n      swapInput.tokenOut,\n      swapInput.swapType,\n      swapInput.amount,\n      this.sor\n    );\n  }\n}\n","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Interface } from '@ethersproject/abi';\nimport { MaxUint256, WeiPerEther, Zero } from '@ethersproject/constants';\n\nimport { Swaps } from '@/modules/swaps/swaps.module';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport {\n  EncodeBatchSwapInput,\n  EncodeUnwrapAaveStaticTokenInput,\n  OutputReference,\n  EncodeExitPoolInput,\n  ExitAndBatchSwapInput,\n  ExitPoolData,\n} from './types';\nimport { TransactionData, ExitPoolRequest, BalancerSdkConfig } from '@/types';\nimport {\n  SwapType,\n  FundManagement,\n  BatchSwapStep,\n  FetchPoolsInput,\n} from '../swaps/types';\nimport { SubgraphPoolBase } from '@balancer-labs/sor';\n\nimport relayerLibraryAbi from '@/lib/abi/VaultActions.json';\nimport aaveWrappingAbi from '@/lib/abi/AaveWrapping.json';\n\nexport * from './types';\n\nexport class Relayer {\n  private readonly swaps: Swaps;\n\n  static CHAINED_REFERENCE_PREFIX = 'ba10';\n\n  constructor(swapsOrConfig: Swaps | BalancerSdkConfig) {\n    if (swapsOrConfig instanceof Swaps) {\n      this.swaps = swapsOrConfig;\n    } else {\n      this.swaps = new Swaps(swapsOrConfig);\n    }\n  }\n\n  static encodeBatchSwap(params: EncodeBatchSwapInput): string {\n    const relayerLibrary = new Interface(relayerLibraryAbi);\n\n    return relayerLibrary.encodeFunctionData('batchSwap', [\n      params.swapType,\n      params.swaps,\n      params.assets,\n      params.funds,\n      params.limits,\n      params.deadline,\n      params.value,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodeExitPool(params: EncodeExitPoolInput): string {\n    const relayerLibrary = new Interface(relayerLibraryAbi);\n\n    return relayerLibrary.encodeFunctionData('exitPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.exitPoolRequest,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodeUnwrapAaveStaticToken(\n    params: EncodeUnwrapAaveStaticTokenInput\n  ): string {\n    const aaveWrappingLibrary = new Interface(aaveWrappingAbi);\n\n    return aaveWrappingLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.toUnderlying,\n      params.outputReferences,\n    ]);\n  }\n\n  static toChainedReference(key: BigNumberish): BigNumber {\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${Relayer.CHAINED_REFERENCE_PREFIX}${'0'.repeat(\n      64 - Relayer.CHAINED_REFERENCE_PREFIX.length\n    )}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  static constructExitCall(params: ExitPoolData): string {\n    const {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n    } = params;\n\n    const exitPoolRequest: ExitPoolRequest = {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    };\n\n    const exitPoolInput: EncodeExitPoolInput = {\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest,\n    };\n\n    const exitEncoded = Relayer.encodeExitPool(exitPoolInput);\n    return exitEncoded;\n  }\n\n  /**\n   * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n   * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n   * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.swaps.fetchPools();\n  }\n\n  public getPools(): SubgraphPoolBase[] {\n    return this.swaps.getPools();\n  }\n\n  /**\n   * exitPoolAndBatchSwap Chains poolExit with batchSwap to final tokens.\n   * @param {ExitAndBatchSwapInput} params\n   * @param {string} exiter - Address used to exit pool.\n   * @param {string} swapRecipient - Address that receives final tokens.\n   * @param {string} poolId - Id of pool being exited.\n   * @param {string[]} exitTokens - Array containing addresses of tokens to receive after exiting pool. (must have the same length and order as the array returned by `getPoolTokens`.)\n   * @param {string} userData - Encoded exitPool data.\n   * @param {string[]} expectedAmountsOut - Expected amounts of exitTokens to receive when exiting pool.\n   * @param {string[]} finalTokensOut - Array containing the addresses of the final tokens out.\n   * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n   * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns Transaction data with calldata. Outputs.amountsOut has amounts of finalTokensOut returned.\n   */\n  async exitPoolAndBatchSwap(\n    params: ExitAndBatchSwapInput\n  ): Promise<TransactionData> {\n    const slippageAmountNegative = WeiPerEther.sub(\n      BigNumber.from(params.slippage)\n    );\n    // Set min amounts out of exit pool based on slippage\n    const minAmountsOut = params.expectedAmountsOut.map((amt) =>\n      BigNumber.from(amt)\n        .mul(slippageAmountNegative)\n        .div(WeiPerEther)\n        .toString()\n    );\n\n    // Output of exit is used as input to swaps\n    const outputReferences: OutputReference[] = [];\n    params.exitTokens.forEach((asset, i) => {\n      const key = Relayer.toChainedReference(i);\n      outputReferences.push({\n        index: i,\n        key: key,\n      });\n    });\n\n    const exitCall = Relayer.constructExitCall({\n      assets: params.exitTokens,\n      minAmountsOut,\n      userData: params.userData,\n      toInternalBalance: true, // Creates exitPool request with exit to internal balance to save gas for following swaps\n      poolId: params.poolId,\n      poolKind: 0, // This will always be 0 to match supported Relayer types\n      sender: params.exiter,\n      recipient: params.exiter,\n      outputReferences: outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n    });\n\n    // Use swapsService to get swap info for exitTokens>finalTokens\n    // This will give batchSwap swap paths\n    // Amounts out will be worst case amounts\n    const queryResult = await this.swaps.queryBatchSwapWithSor({\n      tokensIn: params.exitTokens,\n      tokensOut: params.finalTokensOut,\n      swapType: SwapType.SwapExactIn,\n      amounts: minAmountsOut, // Use minAmountsOut as input to swap to account for slippage\n      fetchPools: params.fetchPools,\n    });\n\n    // This is a safety check to avoid issues when a swap path exists with 0 value\n    if (queryResult.returnAmounts.includes('0'))\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    // Update swap amounts with ref outputs from exitPool\n    queryResult.swaps.forEach((swap) => {\n      const token = queryResult.assets[swap.assetInIndex];\n      const index = params.exitTokens.indexOf(token);\n      if (index !== -1) swap.amount = outputReferences[index].key.toString();\n    });\n\n    // const tempDeltas = ['10096980', '0', '0', '10199896999999482390', '0']; // Useful for debug\n\n    // Replace tokenIn delta for swaps with amount + slippage.\n    // This gives tolerance for limit incase amount out of exitPool is larger min,\n    const slippageAmountPositive = WeiPerEther.add(params.slippage);\n    params.exitTokens.forEach((exitToken, i) => {\n      const index = queryResult.assets\n        .map((elem) => elem.toLowerCase())\n        .indexOf(exitToken.toLowerCase());\n      if (index !== -1) {\n        queryResult.deltas[index] = BigNumber.from(params.expectedAmountsOut[i])\n          .mul(slippageAmountPositive)\n          .div(WeiPerEther)\n          .toString();\n      }\n    });\n\n    // Creates limit array.\n    // Slippage set to 0. Already accounted for as swap used amounts out of pool with worst case slippage.\n    const limits = Swaps.getLimitsForSlippage(\n      params.exitTokens, // tokensIn\n      params.finalTokensOut, // tokensOut\n      SwapType.SwapExactIn,\n      queryResult.deltas, // tempDeltas // Useful for debug\n      queryResult.assets,\n      '0'\n    );\n\n    // Creates fund management using internal balance as source of tokens\n    const funds: FundManagement = {\n      sender: params.exiter,\n      recipient: params.swapRecipient,\n      fromInternalBalance: true,\n      toInternalBalance: false,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps: queryResult.swaps,\n      assets: queryResult.assets,\n      funds: funds,\n      limits: limits.map((l) => l.toString()),\n      deadline: MaxUint256,\n      value: '0',\n      outputReferences: [],\n    });\n\n    // Return amounts from swap\n    const calls = [exitCall, encodedBatchSwap];\n    return {\n      function: 'multicall',\n      params: calls,\n      outputs: {\n        amountsOut: queryResult.returnAmounts,\n      },\n    };\n  }\n\n  /**\n   * swapUnwrapAaveStaticExactIn Finds swaps for tokenIn>wrapped Aave static tokens and chains with unwrap to underlying stable.\n   * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n   * @param {string[]} aaveStaticTokens - array contains the addresses of the Aave static tokens that tokenIn will be swapped to. These will be unwrapped.\n   * @param {string[]} amountsIn - amounts to be swapped for each token in.\n   * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n   * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n   * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n   * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns Transaction data with calldata. Outputs.amountsOut has final amounts out of unwrapped tokens.\n   */\n  async swapUnwrapAaveStaticExactIn(\n    tokensIn: string[],\n    aaveStaticTokens: string[],\n    amountsIn: string[],\n    rates: string[],\n    funds: FundManagement,\n    slippage: string,\n    fetchPools: FetchPoolsInput = {\n      fetchPools: true,\n      fetchOnChain: false,\n    }\n  ): Promise<TransactionData> {\n    // Use swapsService to get swap info for tokensIn>wrappedTokens\n    const queryResult = await this.swaps.queryBatchSwapWithSor({\n      tokensIn,\n      tokensOut: aaveStaticTokens,\n      swapType: SwapType.SwapExactIn,\n      amounts: amountsIn,\n      fetchPools,\n    });\n\n    // This is a safety check to avoid issues when a swap path exists with 0 value\n    if (queryResult.returnAmounts.includes('0'))\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    // Gets limits array for tokensIn>wrappedTokens based on input slippage\n    const limits = Swaps.getLimitsForSlippage(\n      tokensIn, // tokensIn\n      aaveStaticTokens, // tokensOut\n      SwapType.SwapExactIn,\n      queryResult.deltas,\n      queryResult.assets,\n      slippage\n    );\n\n    const calls = this.encodeSwapUnwrap(\n      aaveStaticTokens,\n      SwapType.SwapExactIn,\n      queryResult.swaps,\n      queryResult.assets,\n      funds,\n      limits\n    );\n\n    const amountsUnwrapped = queryResult.returnAmounts.map(\n      (amountWrapped, i) => {\n        const amountUnwrapped = BigNumber.from(amountWrapped)\n          .abs()\n          .mul(rates[i])\n          .div(WeiPerEther);\n\n        // This is a safety check to avoid issues when a swap path exists with 0 value\n        if (!amountUnwrapped.gt(Zero))\n          throw new BalancerError(BalancerErrorCode.UNWRAP_ZERO_AMOUNT);\n\n        return amountUnwrapped.toString();\n      }\n    );\n\n    return {\n      function: 'multicall',\n      params: calls,\n      outputs: {\n        amountsOut: amountsUnwrapped,\n      },\n    };\n  }\n\n  /**\n   * swapUnwrapAaveStaticExactOut Finds swaps for tokenIn>wrapped Aave static tokens and chains with unwrap to underlying stable.\n   * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n   * @param {string[]} aaveStaticTokens - array contains the addresses of the Aave static tokens that tokenIn will be swapped to. These will be unwrapped.\n   * @param {string[]} amountsUnwrapped - amounts of unwrapped tokens out.\n   * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n   * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n   * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n   * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns Transaction data with calldata. Outputs.amountsIn has the amounts of tokensIn.\n   */\n  async swapUnwrapAaveStaticExactOut(\n    tokensIn: string[],\n    aaveStaticTokens: string[],\n    amountsUnwrapped: string[],\n    rates: string[],\n    funds: FundManagement,\n    slippage: string,\n    fetchPools: FetchPoolsInput = {\n      fetchPools: true,\n      fetchOnChain: false,\n    }\n  ): Promise<TransactionData> {\n    const amountsWrapped = amountsUnwrapped.map((amountInwrapped, i) => {\n      const amountWrapped = BigNumber.from(amountInwrapped)\n        .mul(WeiPerEther)\n        .div(rates[i]);\n\n      // This is a safety check to avoid issues when a swap path exists with 0 value\n      if (!amountWrapped.gt(Zero))\n        throw new BalancerError(BalancerErrorCode.WRAP_ZERO_AMOUNT);\n\n      return amountWrapped.toString();\n    });\n\n    // Use swapsService to get swap info for tokensIn>wrappedTokens\n    const queryResult = await this.swaps.queryBatchSwapWithSor({\n      tokensIn,\n      tokensOut: aaveStaticTokens,\n      swapType: SwapType.SwapExactOut,\n      amounts: amountsWrapped,\n      fetchPools,\n    });\n\n    // This is a safety check to avoid issues when a swap path exists with 0 value\n    if (queryResult.returnAmounts.includes('0'))\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    // Gets limits array for tokensIn>wrappedTokens based on input slippage\n    const limits = Swaps.getLimitsForSlippage(\n      tokensIn, // tokensIn\n      aaveStaticTokens, // tokensOut\n      SwapType.SwapExactOut,\n      queryResult.deltas,\n      queryResult.assets,\n      slippage\n    );\n\n    const calls = this.encodeSwapUnwrap(\n      aaveStaticTokens,\n      SwapType.SwapExactOut,\n      queryResult.swaps,\n      queryResult.assets,\n      funds,\n      limits\n    );\n\n    return {\n      function: 'multicall',\n      params: calls,\n      outputs: {\n        amountsIn: queryResult.returnAmounts.map((amount) => amount.toString()),\n      },\n    };\n  }\n\n  /**\n   * Creates encoded multicalls using swap outputs as input amounts for token unwrap.\n   * @param wrappedTokens\n   * @param swapType\n   * @param swaps\n   * @param assets\n   * @param funds\n   * @param limits\n   * @returns\n   */\n  encodeSwapUnwrap(\n    wrappedTokens: string[],\n    swapType: SwapType,\n    swaps: BatchSwapStep[],\n    assets: string[],\n    funds: FundManagement,\n    limits: BigNumberish[]\n  ): string[] {\n    // Output of swaps (wrappedTokens) is used as input to unwrap\n    // Need indices of output tokens and outputReferences need to be made with those as key\n    const outputReferences: OutputReference[] = [];\n    const unwrapCalls: string[] = [];\n    wrappedTokens.forEach((wrappedToken, i) => {\n      // Find index of wrappedToken in asset array. This is used as ref in Relayer.\n      const index = assets.findIndex(\n        (token) => token.toLowerCase() === wrappedToken.toLowerCase()\n      );\n      // There may be cases where swap isn't possible for wrappedToken\n      if (index === -1) return;\n\n      const key = Relayer.toChainedReference(i);\n\n      outputReferences.push({\n        index: index,\n        key: key,\n      });\n\n      // console.log(`Unwrapping ${wrappedToken} with amt: ${key.toHexString()}`);\n\n      const encodedUnwrap = Relayer.encodeUnwrapAaveStaticToken({\n        staticToken: wrappedToken,\n        sender: funds.recipient, // This should be relayer\n        recipient: funds.sender, // This will be caller\n        amount: key, // Use output of swap as input for unwrap\n        toUnderlying: true,\n        outputReferences: 0,\n      });\n\n      unwrapCalls.push(encodedUnwrap);\n    });\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: swapType,\n      swaps: swaps,\n      assets: assets,\n      funds: funds, // Note - this should have Relayer as recipient\n      limits: limits.map((l) => l.toString()),\n      deadline: MaxUint256,\n      value: '0',\n      outputReferences: outputReferences,\n    });\n\n    return [encodedBatchSwap, ...unwrapCalls];\n  }\n}\n","import { BalancerSdkConfig } from '@/types';\nimport { GraphQLClient } from 'graphql-request';\nimport { getNetworkConfig } from '../sdk.helpers';\nimport { getSdk } from './generated/balancer-subgraph-types';\nimport { SubgraphClient } from './subgraph';\n\nexport class Subgraph {\n  public readonly url: string;\n  public readonly client: SubgraphClient;\n\n  constructor(config: BalancerSdkConfig) {\n    this.url = getNetworkConfig(config).urls.subgraph;\n    this.client = this.initClient();\n  }\n\n  private initClient(): SubgraphClient {\n    const client = new GraphQLClient(this.url);\n    return getSdk(client);\n  }\n}\n","import { Swaps } from '@/modules/swaps/swaps.module';\nimport { BalancerSdkConfig, PoolType } from '@/types';\nimport {\n  SubgraphPoolBase,\n  ZERO,\n  parseToPoolsDict,\n  getSpotPriceAfterSwapForPath,\n} from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Pools } from '@/modules/pools/pools.module';\n\nexport class Pricing {\n  private readonly swaps: Swaps;\n  private pools: Pools;\n\n  constructor(config: BalancerSdkConfig, swaps?: Swaps) {\n    if (swaps) {\n      this.swaps = swaps;\n    } else {\n      this.swaps = new Swaps(config);\n    }\n    this.pools = new Pools(config);\n  }\n\n  /**\n   * Retrieves pools using poolDataService.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.swaps.fetchPools();\n  }\n\n  /**\n   * Get currently saved pools list (fetched using fetchPools()).\n   * @returns {SubgraphPoolBase[]} pools list.\n   */\n  public getPools(): SubgraphPoolBase[] {\n    return this.swaps.getPools();\n  }\n\n  /**\n   * Calculates Spot Price for a token pair - for specific pool if ID otherwise finds most liquid path and uses this as reference SP.\n   * @param { string } tokenIn Token in address.\n   * @param { string } tokenOut Token out address.\n   * @param { string } poolId Optional - if specified this pool will be used for SP calculation.\n   * @param { SubgraphPoolBase[] } pools Optional - Pool data. Will be fetched via dataProvider if not supplied.\n   * @returns  { string } Spot price.\n   */\n  async getSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    poolId = '',\n    pools: SubgraphPoolBase[] = []\n  ): Promise<string> {\n    // If pools list isn't supplied fetch it from swaps data provider\n    if (pools.length === 0) {\n      await this.fetchPools();\n      pools = this.getPools();\n    }\n\n    // If a poolId isn't specified we find the path for the pair with the highest liquidity and use this as the ref SP\n    if (poolId === '') {\n      const poolsDict = parseToPoolsDict(pools, 0);\n      // This creates all paths for tokenIn>Out ordered by liquidity\n      const paths = this.swaps.sor.routeProposer.getCandidatePathsFromDict(\n        tokenIn,\n        tokenOut,\n        0,\n        poolsDict,\n        4\n      );\n\n      if (paths.length === 0)\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_PAIR);\n      return getSpotPriceAfterSwapForPath(paths[0], 0, ZERO).toString();\n    } else {\n      // Find pool of interest from pools list\n      const poolData = pools.find(\n        (p) => p.id.toLowerCase() === poolId.toLowerCase()\n      );\n      if (!poolData)\n        throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n      const pool = Pools.from(poolData.poolType as PoolType);\n      return pool.spotPriceCalculator.calcPoolSpotPrice(\n        tokenIn,\n        tokenOut,\n        poolData\n      );\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport abi from '../../lib/abi/ERC20.json';\n\nexport const ERC20 = (address: string, provider: Provider): Contract =>\n  new Contract(address, abi, provider);\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { ContractAddresses } from '@/types';\nimport { Network } from '@/lib/constants/network';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport {\n  Vault__factory,\n  Vault,\n  LidoRelayer__factory,\n  LidoRelayer,\n} from '@balancer-labs/typechain';\nimport { Multicall } from './multicall';\nimport { ERC20 } from './ERC20';\n\ntype ERC20Helper = (address: string, provider: Provider) => Contract;\nexport interface ContractInstances {\n  vault: Vault;\n  lidoRelayer?: LidoRelayer;\n  multicall: Contract;\n  ERC20: ERC20Helper;\n}\n\nexport class Contracts {\n  contractAddresses: ContractAddresses;\n  vault: Vault;\n  lidoRelayer?: LidoRelayer;\n  multicall: Contract;\n\n  /**\n   * Create instances of Balancer contracts connected to passed provider.\n   * @param { Network | ContractAddresses } networkOrAddresses\n   * @param { Provider } provider\n   */\n  constructor(\n    networkOrAddresses: Network | ContractAddresses,\n    provider: Provider\n  ) {\n    // Access addresses using passed network if available\n    if (typeof networkOrAddresses === 'number') {\n      this.contractAddresses =\n        BALANCER_NETWORK_CONFIG[networkOrAddresses].addresses.contracts;\n    } else {\n      this.contractAddresses = networkOrAddresses;\n    }\n\n    this.vault = Vault__factory.connect(this.contractAddresses.vault, provider);\n\n    if (this.contractAddresses.lidoRelayer)\n      this.lidoRelayer = LidoRelayer__factory.connect(\n        this.contractAddresses.lidoRelayer,\n        provider\n      );\n\n    // These contracts aren't included in Balancer Typechain but are still useful.\n    // TO DO - Possibly create via Typechain but seems unnecessary?\n    this.multicall = Multicall(this.contractAddresses.multicall, provider);\n  }\n\n  /**\n   * Expose contract instances.\n   */\n  get contracts(): ContractInstances {\n    return {\n      vault: this.vault,\n      lidoRelayer: this.lidoRelayer,\n      multicall: this.multicall,\n      ERC20: this.getErc20,\n    };\n  }\n\n  /**\n   * Helper to create ERC20 contract.\n   * @param { string } address ERC20 address.\n   * @param { Provider} provider Provider.\n   * @returns Contract.\n   */\n  getErc20(address: string, provider: Provider): Contract {\n    return ERC20(address, provider);\n  }\n}\n","import { BalancerSdkConfig, Pool, PoolModel } from '@/types';\nimport { PoolRepository } from '@/modules/data';\nimport { Pools as PoolMethods } from './pools.module';\nimport { getNetworkConfig } from '../sdk.helpers';\n\n/**\n * Building pools from raw data injecting poolType specific methods\n */\nexport class PoolsProvider {\n  constructor(\n    private config: BalancerSdkConfig,\n    private repository: PoolRepository\n  ) {}\n\n  static wrap(data: Pool, config: BalancerSdkConfig): PoolModel {\n    const methods = PoolMethods.from(data.poolType);\n    const networkConfig = getNetworkConfig(config);\n    return {\n      ...data,\n      liquidity: async () => methods.liquidity.calcTotal(data.tokens),\n      buildJoin: (joiner, tokensIn, amountsIn, slippage) =>\n        methods.join.buildJoin({\n          joiner,\n          pool: data,\n          tokensIn,\n          amountsIn,\n          slippage,\n          wrappedNativeAsset: networkConfig.addresses.tokens.wrappedNativeAsset,\n        }),\n      buildExitExactBPTIn: (\n        exiter,\n        bptIn,\n        slippage,\n        shouldUnwrapNativeAsset = false,\n        singleTokenMaxOut\n      ) =>\n        methods.exit.buildExitExactBPTIn({\n          exiter,\n          pool: data,\n          bptIn,\n          slippage,\n          shouldUnwrapNativeAsset,\n          wrappedNativeAsset: networkConfig.addresses.tokens.wrappedNativeAsset,\n          singleTokenMaxOut,\n        }),\n      buildExitExactTokensOut: (exiter, tokensOut, amountsOut, slippage) =>\n        methods.exit.buildExitExactTokensOut({\n          exiter,\n          pool: data,\n          tokensOut,\n          amountsOut,\n          slippage,\n          wrappedNativeAsset: networkConfig.addresses.tokens.wrappedNativeAsset,\n        }),\n      // TODO: spotPrice fails, because it needs a subgraphType,\n      // either we refetch or it needs a type transformation from SDK internal to SOR (subgraph)\n      // spotPrice: async (tokenIn: string, tokenOut: string) =>\n      //   methods.spotPriceCalculator.calcPoolSpotPrice(tokenIn, tokenOut, data),\n    };\n  }\n\n  async find(id: string): Promise<PoolModel | undefined> {\n    const data = await this.repository.find(id);\n    if (!data) return;\n\n    return PoolsProvider.wrap(data, this.config);\n  }\n\n  async findBy(param: string, value: string): Promise<PoolModel | undefined> {\n    if (param == 'id') {\n      return this.find(value);\n    } else if (param == 'address') {\n      const data = await this.repository.findBy('address', value);\n      if (!data) return;\n\n      return PoolsProvider.wrap(data, this.config);\n    } else {\n      throw `search by ${param} not implemented`;\n    }\n  }\n}\n","import { Pool, PoolType } from '@/types';\nimport { PoolAttribute, PoolRepository } from './types';\nimport { PoolToken, SubgraphClient } from '@/modules/subgraph/subgraph';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nexport class SubgraphPoolRepository implements PoolRepository {\n  constructor(private client: SubgraphClient) {}\n\n  async find(id: string): Promise<Pool | undefined> {\n    const { pool } = await this.client.Pool({ id });\n    return this.mapPool(pool);\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    switch (attribute) {\n      case 'id':\n        return this.find(value);\n      case 'address':\n        // eslint-disable-next-line no-case-declarations\n        const { pool0 } = await this.client.Pools({\n          where: { address: value },\n        });\n        return this.mapPool(pool0);\n      default:\n        return undefined;\n    }\n  }\n\n  // Helper methods\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private mapPool(pool: any): Pool | undefined {\n    if (!pool) return undefined;\n    const poolType = pool?.poolType as PoolType;\n    if (!poolType)\n      throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    const tokens = (pool?.tokens as PoolToken[]) || [];\n    if (tokens.length === 0)\n      throw new BalancerError(BalancerErrorCode.MISSING_TOKENS);\n    return {\n      ...pool,\n      poolType,\n      tokens,\n    };\n  }\n}\n","import { BalancerSdkConfig, BalancerNetworkConfig } from '@/types';\nimport { Swaps } from './swaps/swaps.module';\nimport { Relayer } from './relayer/relayer.module';\nimport { Subgraph } from './subgraph/subgraph.module';\nimport { Sor } from './sor/sor.module';\nimport { getNetworkConfig } from './sdk.helpers';\nimport { Pools } from './pools/pools.module';\nimport { Pricing } from './pricing/pricing.module';\nimport { ContractInstances, Contracts } from './contracts/contracts.module';\nimport { PoolsProvider } from './pools/provider';\nimport { SubgraphPoolRepository } from './data/pool/subgraph';\n\nexport interface BalancerSDKRoot {\n  config: BalancerSdkConfig;\n  sor: Sor;\n  subgraph: Subgraph;\n  pools: Pools;\n  swaps: Swaps;\n  relayer: Relayer;\n  networkConfig: BalancerNetworkConfig;\n}\n\nexport class BalancerSDK implements BalancerSDKRoot {\n  readonly swaps: Swaps;\n  readonly relayer: Relayer;\n  readonly pricing: Pricing;\n  balancerContracts: Contracts;\n\n  constructor(\n    public config: BalancerSdkConfig,\n    public sor = new Sor(config),\n    public subgraph = new Subgraph(config),\n    public pools = new Pools(config),\n    public poolsProvider = new PoolsProvider(\n      config,\n      new SubgraphPoolRepository(subgraph.client)\n    )\n  ) {\n    this.swaps = new Swaps(this.config);\n    this.relayer = new Relayer(this.swaps);\n    this.pricing = new Pricing(config, this.swaps);\n    const networkConfig = getNetworkConfig(config);\n    this.balancerContracts = new Contracts(\n      networkConfig.addresses.contracts,\n      sor.provider\n    );\n  }\n\n  get networkConfig(): BalancerNetworkConfig {\n    return getNetworkConfig(this.config);\n  }\n\n  /**\n   * Expose balancer contracts, e.g. Vault, LidoRelayer.\n   */\n  get contracts(): ContractInstances {\n    return this.balancerContracts.contracts;\n  }\n}\n","import { Pool } from '@/types';\nimport { PoolAttribute, PoolRepository } from './types';\n\n/**\n * The fallback provider takes multiple PoolRepository's in an array and uses them in order\n * falling back to the next one if a request times out.\n *\n * This is useful for using the Balancer API while being able to fall back to the graph if it is down\n * to ensure Balancer is maximally decentralized.\n **/\nexport class FallbackPoolRepository implements PoolRepository {\n  currentProviderIdx: number;\n\n  constructor(\n    private readonly providers: PoolRepository[],\n    private timeout = 10000\n  ) {\n    this.currentProviderIdx = 0;\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    if (this.currentProviderIdx >= this.providers.length) {\n      throw new Error('No working providers found');\n    }\n\n    let pool;\n\n    try {\n      pool = await Promise.race<Pool | undefined>([\n        this.providers[this.currentProviderIdx].find(id),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('timeout')), this.timeout)\n        ),\n      ]);\n    } catch (e) {\n      console.error(\n        'Provider ' +\n          this.currentProviderIdx +\n          ' failed, falling back to next provider'\n      );\n      this.currentProviderIdx++;\n      pool = await this.find(id);\n    }\n\n    return pool;\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    if (this.currentProviderIdx >= this.providers.length) {\n      throw new Error('No working providers found');\n    }\n\n    let pool;\n\n    try {\n      pool = await Promise.race<Pool | undefined>([\n        this.providers[this.currentProviderIdx].findBy(attribute, value),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('timeout')), this.timeout)\n        ),\n      ]);\n    } catch (e) {\n      console.error(\n        'Provider ' +\n          this.currentProviderIdx +\n          ' failed, falling back to next provider'\n      );\n      this.currentProviderIdx++;\n      pool = await this.findBy(attribute, value);\n    }\n\n    return pool;\n  }\n}\n","import { Pool } from '@/types';\nimport { PoolAttribute, PoolRepository } from './types';\n\nexport class StaticPoolRepository implements PoolRepository {\n  constructor(private pools: Pool[]) {}\n\n  async find(id: string): Promise<Pool | undefined> {\n    return this.pools.find((pool) => {\n      return pool.id.toLowerCase() === id.toLowerCase();\n    });\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    return this.pools.find((pool) => {\n      return pool[attribute] === value;\n    });\n  }\n}\n","import { Token } from '@/types';\nimport { TokenAttribute, TokenProvider } from './types';\n\nexport class StaticTokenProvider implements TokenProvider {\n  constructor(private tokens: Token[]) {}\n\n  async find(address: string): Promise<Token | undefined> {\n    return this.tokens.find((token) => {\n      return token.address.toLowerCase() === address.toLowerCase();\n    });\n  }\n\n  async findBy(\n    attribute: TokenAttribute,\n    value: string\n  ): Promise<Token | undefined> {\n    return this.tokens.find((token) => {\n      return token[attribute] === value;\n    });\n  }\n}\n","import { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Price, TokenPrices } from '@/types';\nimport { TokenPriceProvider } from './types';\n\nconst SCALING_FACTOR = 18;\n\nexport class StaticTokenPriceProvider implements TokenPriceProvider {\n  constructor(private tokenPrices: TokenPrices) {\n    this.calculateUSDPrices();\n  }\n\n  /**\n   * Iterates through all tokens and calculates USD prices\n   * based on data the tokens already have.\n   */\n  calculateUSDPrices(): void {\n    const USDAssets = [\n      '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n      '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n      '0x6b175474e89094c44da98b954eedeac495271d0f',\n      '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n      '0xdac17f958d2ee523a2206206994597c13d831ec7',\n      '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n    ];\n    let assetsAvailable = 0;\n    let assetValueSum = BigNumber.from(0);\n\n    USDAssets.forEach((address) => {\n      const tokenPrice = this.tokenPrices[address];\n      if (tokenPrice?.eth) {\n        const scaledPrice = parseFixed(tokenPrice?.eth, SCALING_FACTOR);\n        assetValueSum = assetValueSum.add(scaledPrice);\n        assetsAvailable++;\n      }\n    });\n\n    if (assetsAvailable === 0) return;\n    const NativeAssetUSDPrice = assetValueSum.div(assetsAvailable);\n\n    for (const token in this.tokenPrices) {\n      const price = this.tokenPrices[token];\n      if (price.eth && !price.usd) {\n        const usdPrice = parseFixed('1', SCALING_FACTOR)\n          .mul(parseFixed(price.eth, SCALING_FACTOR))\n          .div(NativeAssetUSDPrice)\n          .toString();\n        price.usd = formatFixed(usdPrice, SCALING_FACTOR);\n      }\n    }\n  }\n\n  async find(address: string): Promise<Price | undefined> {\n    const price = this.tokenPrices[address];\n    if (!price) return;\n    return price;\n  }\n}\n"],"names":["StablePoolJoinKind","StablePhantomPoolJoinKind","StablePoolExitKind","defaultAbiCoder","WeightedPoolJoinKind","WeightedPoolExitKind","ONE","Zero","BigNumber","Signer","RelayerAction","hexZeroPad","hexValue","splitSignature","MAX_DEADLINE","AddressZero","getAddress","Contract","aTokenRateProviderAbi","parseFixed","PoolSpecialization","UserBalanceOpKind","PoolBalanceOpKind","PoolType","SwapType","WeiPerEther","Network","_parseFixed","BalancerErrorCode","SDK","OldBigNumber","Vault__factory","SCALING_FACTOR","formatFixed","StablePool","ZERO","WeightedMaths","WeightedPool","MetaStablePool","PhantomStablePool","LinearPool","sor","SwapTypes","parse","gql","GraphQLClient","Interface","set","PoolFilter","parseInt","axios","keyBy","SOR","JsonRpcProvider","sum","vaultActionsAbi","MaxUint256","parseToPoolsDict","getSpotPriceAfterSwapForPath","LidoRelayer__factory","PoolMethods"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}