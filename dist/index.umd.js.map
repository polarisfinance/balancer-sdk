{"version":3,"file":"index.umd.js","sources":["../src/pool-base/encoder.ts","../src/pool-stable/encoder.ts","../src/pool-weighted/encoder.ts","../src/pool-composable-stable/encoder.ts","../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/pool-utils/poolId.ts","../src/lib/constants/network.ts","../src/lib/constants/pools.ts","../src/modules/data/pool-gauges/types.ts","../src/modules/data/pool-shares/types.ts","../src/modules/data/gauge-shares/types.ts","../src/types.ts","../src/lib/utils/logger.ts","../src/lib/utils/assetHelpers.ts","../src/lib/utils/errors.ts","../src/lib/utils/signatures.ts","../src/lib/utils/permit.ts","../src/lib/utils/solidityMaths.ts","../src/lib/utils/poolHelper.ts","../src/lib/constants/tokens.ts","../node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/units/lib.esm/_version.js","../node_modules/@ethersproject/units/lib.esm/index.js","../src/modules/data/token-prices/aave-rates.ts","../src/lib/utils/tokens.ts","../src/lib/utils/debouncer.ts","../src/lib/utils/math.ts","../src/lib/utils/slippageHelper.ts","../src/lib/utils/index.ts","../src/lib/graphql/formatters/balancer-api.ts","../src/lib/graphql/formatters/subgraph.ts","../src/lib/graphql/args-builder.ts","../src/contracts/factories/AaveLinearPool__factory.ts","../src/contracts/factories/AaveLinearPoolFactory__factory.ts","../src/contracts/factories/AaveWrapping__factory.ts","../src/contracts/factories/Authoriser__factory.ts","../src/contracts/factories/BalancerHelpers__factory.ts","../src/contracts/factories/BalancerMinter__factory.ts","../src/contracts/factories/BalancerPoolDataQueries__factory.ts","../src/contracts/factories/BalancerRelayer__factory.ts","../src/contracts/factories/BatchRelayerLibrary__factory.ts","../src/contracts/factories/ComposableStablePool__factory.ts","../src/contracts/factories/ComposableStablePoolFactory__factory.ts","../src/contracts/factories/ConvergentCurvePool__factory.ts","../src/contracts/factories/ERC20__factory.ts","../src/contracts/factories/ERC4626LinearPool__factory.ts","../src/contracts/factories/ERC4626LinearPoolFactory__factory.ts","../src/contracts/factories/EulerLinearPool__factory.ts","../src/contracts/factories/EulerLinearPoolFactory__factory.ts","../src/contracts/factories/FXPool__factory.ts","../src/contracts/factories/GaugeClaimHelper__factory.ts","../src/contracts/factories/GearboxLinearPool__factory.ts","../src/contracts/factories/GearboxLinearPoolFactory__factory.ts","../src/contracts/factories/GyroConfig__factory.ts","../src/contracts/factories/LidoRelayer__factory.ts","../src/contracts/factories/LinearPool__factory.ts","../src/contracts/factories/LiquidityGaugeV5__factory.ts","../src/contracts/factories/Multicall__factory.ts","../src/contracts/factories/Multicall3__factory.ts","../src/contracts/factories/StablePool__factory.ts","../src/contracts/factories/StaticATokenRateProvider__factory.ts","../src/contracts/factories/Vault__factory.ts","../src/contracts/factories/WeightedPool__factory.ts","../src/contracts/factories/WeightedPoolFactory__factory.ts","../src/contracts/factories/YearnLinearPool__factory.ts","../src/contracts/factories/YearnLinearPoolFactory__factory.ts","../src/contracts/factories/GyroEV2__factory.ts","../src/contracts/factories/VeBal__factory.ts","../src/contracts/factories/VeDelegationProxy__factory.ts","../src/modules/swaps/types.ts","../src/modules/swaps/helpers.ts","../src/lib/constants/config.ts","../src/balancerErrors.ts","../src/modules/pricing/priceImpact.ts","../src/lib/utils/stableMathHelpers.ts","../src/modules/pools/pool-types/concerns/stable/priceImpact.concern.ts","../src/modules/pools/pool-types/concerns/stable/exit.concern.ts","../src/modules/pools/pool-types/concerns/stable/join.concern.ts","../src/modules/pools/pool-types/concerns/stable/liquidity.concern.ts","../src/modules/pools/pool-types/concerns/stable/spotPrice.concern.ts","../src/modules/pools/pool-types/stable.module.ts","../src/modules/pools/pool-types/concerns/stablePhantom/spotPrice.concern.ts","../src/modules/pools/pool-types/concerns/composableStable/join.concern.ts","../src/modules/pools/pool-types/concerns/composableStable/exit.concern.ts","../src/modules/pools/pool-types/composableStable.module.ts","../src/modules/pools/pool-types/concerns/weighted/priceImpact.concern.ts","../src/modules/pools/pool-types/concerns/weighted/exit.concern.ts","../src/modules/pools/pool-types/concerns/weighted/join.concern.ts","../src/modules/pools/pool-types/concerns/weighted/liquidity.concern.ts","../src/modules/pools/pool-types/concerns/weighted/spotPrice.concern.ts","../src/modules/pools/pool-types/weighted.module.ts","../src/modules/pools/pool-types/concerns/metaStable/liquidity.concern.ts","../src/modules/pools/pool-types/concerns/metaStable/spotPrice.concern.ts","../src/modules/pools/pool-types/metaStable.module.ts","../src/modules/pools/pool-types/concerns/stablePhantom/exit.concern.ts","../src/modules/pools/pool-types/concerns/stablePhantom/join.concern.ts","../src/modules/pools/pool-types/stablePhantom.module.ts","../src/modules/pools/pool-types/concerns/linear/priceImpact.concern.ts","../src/modules/pools/pool-types/concerns/linear/exit.concern.ts","../src/modules/pools/pool-types/concerns/linear/join.concern.ts","../src/modules/pools/pool-types/concerns/linear/liquidity.concern.ts","../src/modules/pools/pool-types/concerns/linear/spotPrice.concern.ts","../src/modules/pools/pool-types/linear.module.ts","../src/modules/pools/pool-types/concerns/fx/exit.concern.ts","../src/modules/pools/pool-types/concerns/fx/liquidity.concern.ts","../src/modules/pools/pool-types/concerns/fx/spotPrice.concern.ts","../src/modules/pools/pool-types/concerns/fx/priceImpact.concern.ts","../src/modules/pools/pool-types/concerns/fx/join.concern.ts","../src/modules/pools/pool-types/fx.module.ts","../src/modules/pools/pool-types/concerns/gyro/exit.concern.ts","../src/modules/pools/pool-types/concerns/gyro/liquidity.concern.ts","../src/modules/pools/pool-types/concerns/gyro/spotPrice.concern.ts","../src/modules/pools/pool-types/concerns/gyro/priceImpact.concern.ts","../src/modules/pools/pool-types/concerns/gyro/join.concern.ts","../src/modules/pools/pool-types/gyro.module.ts","../src/modules/pools/pool-type-concerns.ts","../src/modules/liquidity/liquidity.module.ts","../src/modules/claims/helper.ts","../src/modules/claims/ClaimService.ts","../src/modules/swaps/queryBatchSwap.ts","../node_modules/tslib/tslib.es6.js","../node_modules/graphql-tag/lib/index.js","../src/modules/subgraph/generated/balancer-subgraph-types.ts","../src/modules/subgraph/generated/balancer-gauges.ts","../src/modules/subgraph/subgraph.ts","../src/lib/utils/multiCaller3.ts","../src/modules/data/pool/onchain-data.ts","../src/modules/sor/pool-data/subgraphPoolDataService.ts","../src/modules/sor/token-price/subgraphTokenPriceService.ts","../src/modules/sdk.helpers.ts","../src/lib/constants/poolsToIgnore.ts","../src/modules/sor/token-price/apiTokenPriceService.ts","../src/lib/utils/coingecko-api.ts","../src/modules/sor/token-price/coingeckoTokenPriceService.ts","../src/modules/sor/sor.module.ts","../src/modules/swaps/flashSwap/index.ts","../src/modules/swaps/swap_builder/swap_utils.ts","../src/modules/swaps/swap_builder/swap_info_decorator.ts","../src/modules/swaps/swap_builder/single_swap_builder.ts","../src/modules/swaps/swap_builder/batch_swap_builder.ts","../src/modules/swaps/swaps.module.ts","../src/modules/relayer/types.ts","../src/modules/relayer/relayer.module.ts","../src/modules/subgraph/subgraph.module.ts","../src/modules/pricing/pricing.module.ts","../src/modules/contracts/implementations/base-pool.ts","../src/lib/utils/multiCaller.ts","../src/lib/utils/time.ts","../src/modules/contracts/implementations/veBAL.ts","../src/modules/contracts/implementations/veBAL-proxy.ts","../src/modules/contracts/contracts.module.ts","../src/modules/pools/impermanentLoss/impermanentLossService.ts","../src/modules/data/bal/emissions.ts","../src/modules/pools/apr/protocol-revenue.ts","../src/modules/pools/fees/fees.ts","../src/modules/pools/apr/apr.ts","../src/modules/graph/graph.ts","../src/pool-weighted/decoder.ts","../src/modules/vaultModel/poolModel/join.ts","../src/modules/vaultModel/poolModel/exit.ts","../src/modules/vaultModel/poolModel/swap.ts","../src/modules/vaultModel/poolModel/unwrap.ts","../src/modules/vaultModel/poolModel/poolModel.ts","../src/modules/vaultModel/relayer.ts","../src/modules/vaultModel/poolSource.ts","../src/modules/vaultModel/vaultModel.module.ts","../src/modules/joins/joins.module.ts","../src/lib/utils/tenderlyHelper.ts","../src/modules/simulation/simulation.module.ts","../src/modules/exits/exits.module.ts","../src/modules/pools/volume/volume.ts","../src/modules/pools/factory/composable-stable/composable-stable.factory.ts","../src/modules/pools/factory/weighted/weighted.factory.ts","../src/modules/pools/factory/types.ts","../src/modules/pools/factory/linear/linear.factory.ts","../src/modules/pools/pool-factory__factory.ts","../src/modules/pools/queries/params_builder.ts","../src/modules/pools/queries/get_encoder.ts","../src/modules/pools/emissions/index.ts","../src/modules/pools/proportional-amounts/index.ts","../src/modules/pools/index.ts","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/strings/lib.esm/_version.js","../node_modules/@ethersproject/strings/lib.esm/utf8.js","../node_modules/@ethersproject/strings/lib.esm/bytes32.js","../node_modules/js-sha3/src/sha3.js","../node_modules/@ethersproject/solidity/lib.esm/_version.js","../node_modules/@ethersproject/solidity/lib.esm/index.js","../node_modules/@ethersproject/keccak256/lib.esm/index.js","../src/modules/data/gyro-config/repository.ts","../src/modules/data/gauge-controller/multicall.ts","../src/modules/subgraph/repository/abstract-subgraph-repository.ts","../src/modules/subgraph/repository/balancer-subgraph-repository.ts","../src/modules/subgraph/repository/gauges-subgraph-repository.ts","../src/modules/data/gauge-shares/repository.ts","../src/modules/data/liquidity-gauges/multicall.ts","../src/modules/data/liquidity-gauges/subgraph.ts","../src/modules/data/liquidity-gauges/provider.ts","../src/modules/api/balancer-api.client.ts","../src/modules/data/pool/balancer-api.ts","../src/modules/data/pool/subgraph-helpers.ts","../src/modules/data/pool/subgraph.ts","../src/modules/data/pool/subgraphOnChain.ts","../src/modules/data/pool-gauges/repository.ts","../src/modules/data/pool-joinExit/types.ts","../src/modules/data/pool-joinExit/repository.ts","../src/modules/data/pool-shares/repository.ts","../src/modules/data/token/static.ts","../src/modules/data/token-prices/coingecko.ts","../src/modules/data/token-prices/coingecko-historical.ts","../src/modules/data/token-prices/subgraph.ts","../src/modules/data/token-prices/provider.ts","../src/modules/data/token-prices/historical-price-provider.ts","../src/modules/contracts/implementations/feeDistributor.ts","../src/modules/data/fee-distributor/repository.ts","../src/modules/data/fee-collector/repository.ts","../src/modules/data/protocol-fees/provider.ts","../src/modules/data/token-yields/repository.ts","../src/modules/data/block-number/index.ts","../src/modules/data/index.ts","../src/modules/relayer/actions.ts","../src/modules/liquidity-managment/migrations/helpers.ts","../src/modules/liquidity-managment/migrations/builder.ts","../src/modules/liquidity-managment/migrations.ts","../src/modules/swaps/joinExit/actions/types.ts","../src/modules/swaps/joinExit/actions/baseAction.ts","../src/modules/swaps/joinExit/actions/exit.ts","../src/modules/swaps/joinExit/actions/join.ts","../src/modules/swaps/joinExit/actions/swap.ts","../src/modules/swaps/joinExit/actions/helpers.ts","../src/modules/swaps/joinExit/joinAndExit.ts","../src/modules/sdk.module.ts","../src/modules/data/pool/fallback.ts","../src/modules/data/pool/static.ts","../src/modules/data/token-prices/static.ts","../src/pool-weighted/normalizedWeights.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\n// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that (Legacy)BasePool uses to detect the special exit enabled in recovery mode.\nenum BasePoolExitKind {\n  RECOVERY_MODE = 255,\n}\n\nexport class BasePoolEncoder {\n  /**\n   * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for\n   * an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static recoveryModeExit = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [BasePoolExitKind.RECOVERY_MODE, bptAmountIn]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePhantomPoolJoinKind {\n  INIT = 0,\n  COLLECT_PROTOCOL_FEES,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [StablePoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n   */\n  static joinCollectProtocolFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  MANAGEMENT_FEE_TOKENS_OUT,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [WeightedPoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool for withdrawing management fees.\n   * This can only be done by the pool owner.\n   */\n  static exitForManagementFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [WeightedPoolExitKind.MANAGEMENT_FEE_TOKENS_OUT]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { StablePhantomPoolJoinKind } from '../pool-stable/index';\n\nexport enum ComposableStablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum ComposableStablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\n}\n\nexport class ComposableStablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a ComposableStablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [ComposableStablePoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n   */\n  static joinCollectProtocolFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a ComposableStablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        ComposableStablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n        amountsIn,\n        minimumBPT,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a ComposableStablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        ComposableStablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a ComposableStablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForAllTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [\n        ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\n        bptAmountIn,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a ComposableStablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the max acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        ComposableStablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? prefix + \": \" + provided : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): {\n  address: string;\n  specialization: PoolSpecialization;\n  nonce: BigNumber;\n} => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","export enum Network {\n  MAINNET = 1,\n  GOERLI = 5,\n  GÖRLI = 5,\n  OPTIMISM = 10,\n  GNOSIS = 100,\n  POLYGON = 137,\n  FANTOM = 250,\n  BASE = 8453,\n  ZKEVM = 1101,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  SEPOLIA = 11155111,\n  AURORA = 1313161554,\n  TELOS = 40,\n}\n","import { Network } from '@/lib/constants/network';\n\n// Do not display APR values greater than this amount; they are likely to be nonsensical\n// These can arise from pools with extremely low balances (e.g., completed LBPs)\nexport const APR_THRESHOLD = 10_000;\n\n/**\n * For proportional exits from ComposableStable pools the ExactBPTInForTokensOut\n * exit type was removed. Therefore we have to use BPTInForExactTokensOut which\n * makes proportional exits using a user's total BPT balance impossible. In\n * order to 'fix' this we need to subtract a little bit from the bptIn value\n * when calculating the ExactTokensOut. The variable below is that \"little bit\".\n */\nexport const SHALLOW_COMPOSABLE_STABLE_BUFFER = 1e6; // EVM scale, so this is 1 Mwei\n\ntype FactoryType =\n  | 'oracleWeightedPool'\n  | 'weightedPool'\n  | 'stablePool'\n  | 'managedPool'\n  | 'liquidityBootstrappingPool'\n  | 'boostedPool'\n  | 'composableStablePool';\n\ntype PoolMetadata = {\n  name: string;\n  hasIcon: boolean;\n};\n\nexport type NamedPools = {\n  staBAL: string;\n  bbAaveUSD: {\n    v1: string;\n    v2: string;\n  };\n  xMatic: {\n    v1: string;\n    v2: string;\n  };\n  stMatic: {\n    v1: string;\n    v2: string;\n  };\n  mai4: {\n    mai4: string;\n    maiBbaUsd: string;\n  };\n  veBAL: string;\n};\n\ntype Pools = {\n  IdsMap: Partial<NamedPools>;\n  Pagination: {\n    PerPage: number;\n    PerPool: number;\n    PerPoolInitial: number;\n  };\n  DelegateOwner: string;\n  ZeroAddress: string;\n  DynamicFees: {\n    Gauntlet: string[];\n  };\n  BlockList: string[];\n  ExcludedPoolTypes: string[];\n  Stable: {\n    AllowList: string[];\n  };\n  Investment: {\n    AllowList: string[];\n  };\n  Factories: Record<string, FactoryType>;\n  Stakable: {\n    AllowList: string[];\n  };\n  Metadata: Record<string, PoolMetadata>;\n};\n\nconst POOLS_GOERLI: Pools = {\n  IdsMap: {\n    staBAL:\n      '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n    bbAaveUSD: {\n      v1: '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      v2: '0x3d5981bdd8d3e49eb7bbdc1d2b156a3ee019c18e0000000000000000000001a7',\n    },\n    veBAL: '0xf8a0623ab66f985effc1c69d05f1af4badb01b00000200000000000000000060',\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [\n    '0x22d398c68030ef6b1c55321cca6e0cecc5c93b2f000200000000000000000678',\n  ],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear', 'FX'],\n  Stable: {\n    AllowList: [\n      '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      '0xb60e46d90f2de35f7062a27d3a98749414036d5d000200000000000000000061',\n      '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n      '0xc957b1acceb21707b782eb8eee2ed8e20088463d000200000000000000000076',\n      '0x3d5981bdd8d3e49eb7bbdc1d2b156a3ee019c18e0000000000000000000001a7',\n      '0x14f93df8a4e37bfdb49d2cec4789df7a010603d700000000000000000000011d',\n      '0x00a62d31b6c776b6813543bc99ff265f7222dbe100000000000000000000011e',\n      '0x0c925fce89a22e36ebd9b3c6e0262234e853d2f600000000000000000000019c',\n    ],\n  },\n  Investment: {\n    AllowList: [],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0x44afeb87c871d8fea9398a026dea2bd3a13f5769': 'stablePool',\n    '0xa55f73e2281c60206ba43a3590db07b8955832be': 'stablePool', // Metastable\n    '0xb48cc42c45d262534e46d5965a9ac496f1b7a830': 'liquidityBootstrappingPool',\n    '0xb0c726778c3ae4b3454d85557a48e8fa502bdd6a': 'liquidityBootstrappingPool', // LBP (zero protocol fee)\n    '0x41e9036ae350baedcc7107760a020dca3c0731ec': 'boostedPool',\n    '0xb848f50141f3d4255b37ac288c25c109104f2158': 'composableStablePool',\n    '0x94f68b54191f62f781fe8298a8a5fa3ed772d227': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x16faf9f73748013155b7bc116a3008b57332d1e600020000000000000000005b',\n      '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n      '0x67f8fcb9d3c463da05de1392efdbb2a87f8599ea000200000000000000000059',\n    ],\n  },\n  Metadata: {\n    '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: false,\n    },\n  },\n};\n\nconst POOLS_MAINNET: Pools = {\n  IdsMap: {\n    staBAL:\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n    bbAaveUSD: {\n      v1: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n      v2: '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n    },\n    veBAL: '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014',\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'Linear',\n    'ERC4626Linear',\n    'Gyro2',\n    'Gyro3',\n    'GyroE',\n    'FX',\n  ],\n  Stable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063', // staBAL3 (DAI-USD-USDC)\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066', // WBTC-renBTC-sBTC\n      '0x9f19a375709baf0e8e35c2c5c65aca676c4c719100000000000000000000006e', // PAR-sEUR-EURS\n      '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080', // Lido Metastable\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112', // Rocket Pool Metastable\n      '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe', // Mainnet bb-a-USD\n      '0x851523a36690bf267bbfec389c823072d82921a90002000000000000000001ed', // wstETH/WETH #2\n      '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249', // b-auraBAL-Stable (auraBal / 8020 BALETH)\n      '0x2d011adf89f0576c9b722c28269fcb5d50c2d17900020000000000000000024d', // sdBAL Stable Pool (sdBAL / 8020 BALETH)\n      '0x178e029173417b1f9c8bc16dcec6f697bc32374600000000000000000000025d', // Fiat DAO Stable Pool\n      '0xf93579002dbe8046c43fefe86ec78b1112247bb80000000000000000000002bc', // USDD 3 pool\n      '0xf3aeb3abba741f0eece8a1b1d2f11b85899951cb000200000000000000000351', // MAI stable pool\n      '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d', // bb-a-USD V2\n      '0x5b3240b6be3e7487d61cd1afdfc7fe4fa1d81e6400000000000000000000037b', // DOLA/INV stable pool\n    ],\n  },\n  Investment: {\n    AllowList: [\n      '0xccf5575570fac94cec733a58ff91bb3d073085c70002000000000000000000af', // iROBOT mainnet\n      '0xe7b1d394f3b40abeaa0b64a545dbcf89da1ecb3f00010000000000000000009a', // Techemy mainnet\n      '0x3b40d7d5ae25df2561944dd68b252016c4c7b2800001000000000000000000c2', // WSB-DEFI mainnet\n    ],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0x67d27634e44793fe63c467035e31ea8635117cd4': 'stablePool', // Metastable\n    '0x751a0bc0e3f75b38e01cf25bfce7ff36de1c87de': 'liquidityBootstrappingPool', // Mainnet LBP\n    '0x0f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e': 'liquidityBootstrappingPool', // Mainnet LBP (zero protocol fee)\n    '0x48767f9f868a4a7b86a90736632f6e44c2df7fa9': 'managedPool', // Mainnet Managed\n    '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2': 'boostedPool', // mainnet stablephantom\n    '0x8df6efec5547e31b0eb7d1291b511ff8a2bf987c': 'stablePool', // stable pool v2\n    '0xf9ac7b9df2b3454e841110cce5550bd5ac6f875f': 'composableStablePool', // ComposableStable\n    '0xcc508a455f5b0073973107db6a878ddbdab957bc': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n      '0x072f14b85add63488ddad88f855fda4a99d6ac9b000200000000000000000027',\n      '0x0b09dea16768f0799065c475be02919503cb2a3500020000000000000000001a',\n      '0x186084ff790c65088ba694df11758fae4943ee9e000200000000000000000013',\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112',\n      '0x27c9f71cc31464b906e0006d4fcbc8900f48f15f00020000000000000000010f',\n      '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',\n      '0x350196326aeaa9b98f1903fb5e8fc2686f85318c000200000000000000000084',\n      '0x3e5fa9518ea95c3e533eb377c001702a9aacaa32000200000000000000000052',\n      '0x51735bdfbfe3fc13dea8dc6502e2e958989429610002000000000000000000a0',\n      '0x5d66fff62c17d841935b60df5f07f6cf79bd0f4700020000000000000000014c',\n      '0x5f7fa48d765053f8dd85e052843e12d23e3d7bc50002000000000000000000c0',\n      '0x702605f43471183158938c1a3e5f5a359d7b31ba00020000000000000000009f',\n      '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n      '0x7edde0cb05ed19e03a9a47cd5e53fc57fde1c80c0002000000000000000000c8',\n      '0x8f4205e1604133d1875a3e771ae7e4f2b086563900020000000000000000010e',\n      '0x90291319f1d4ea3ad4db0dd8fe9e12baf749e84500020000000000000000013c',\n      '0x96646936b91d6b9d7d0c47c496afbf3d6ec7b6f8000200000000000000000019',\n      '0x96ba9025311e2f47b840a1f68ed57a3df1ea8747000200000000000000000160',\n      '0xa02e4b3d18d4e6b8d18ac421fbc3dfff8933c40a00020000000000000000004b',\n      '0xa6f548df93de924d73be7d25dc02554c6bd66db500020000000000000000000e',\n      '0xbaeec99c90e3420ec6c1e7a769d2a856d2898e4d00020000000000000000008a',\n      '0xbf96189eee9357a95c7719f4f5047f76bde804e5000200000000000000000087',\n      '0xe2469f47ab58cf9cf59f9822e3c5de4950a41c49000200000000000000000089',\n      '0xe99481dc77691d8e2456e5f3f61c1810adfc1503000200000000000000000018',\n      '0xec60a5fef79a92c741cb74fdd6bfc340c0279b01000200000000000000000015',\n      '0xedf085f65b4f6c155e13155502ef925c9a756003000200000000000000000123',\n      '0xefaa1604e82e1b3af8430b90192c1b9e8197e377000200000000000000000021',\n      '0xf4c0dd9b82da36c07605df83c8a416f11724d88b000200000000000000000026',\n      '0xf5aaf7ee8c39b651cebf5f1f50c10631e78e0ef9000200000000000000000069',\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066',\n      '0x92762b42a06dcdddc5b7362cfb01e631c4d44b40000200000000000000000182',\n      '0xde8c195aa41c11a0c4787372defbbddaa31306d2000200000000000000000181',\n      '0x17ddd9646a69c9445cd8a9f921d4cd93bf50d108000200000000000000000159',\n      '0xc45d42f801105e861e86658648e3678ad7aa70f900010000000000000000011e',\n      '0x2d344a84bac123660b021eebe4eb6f12ba25fe8600020000000000000000018a',\n      '0xb460daa847c45f1c4a41cb05bfb3b51c92e41b36000200000000000000000194',\n      '0x5122e01d819e58bb2e22528c0d68d310f0aa6fd7000200000000000000000163',\n      '0x851523a36690bf267bbfec389c823072d82921a90002000000000000000001ed',\n      '0xe8cc7e765647625b95f59c15848379d10b9ab4af0002000000000000000001de',\n      '0x85370d9e3bb111391cc89f6de344e801760461830002000000000000000001ef',\n      '0xa7ff759dbef9f3efdd1d59beee44b966acafe214000200000000000000000180',\n      '0x3f7c10701b14197e2695dec6428a2ca4cf7fc3b800020000000000000000023c',\n      '0x2d011adf89f0576c9b722c28269fcb5d50c2d17900020000000000000000024d',\n      '0x178e029173417b1f9c8bc16dcec6f697bc32374600000000000000000000025d',\n      '0xcfca23ca9ca720b6e98e3eb9b6aa0ffc4a5c08b9000200000000000000000274',\n      '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249',\n      '0x0578292cb20a443ba1cde459c985ce14ca2bdee5000100000000000000000269',\n      '0x8eb6c82c3081bbbd45dcac5afa631aac53478b7c000100000000000000000270',\n      '0x1b65fe4881800b91d4277ba738b567cbb200a60d0002000000000000000002cc',\n      '0x99a14324cfd525a34bbc93ac7e348929909d57fd00020000000000000000030e',\n      '0x9b532ab955417afd0d012eb9f7389457cd0ea712000000000000000000000338',\n      '0x48607651416a943bf5ac71c41be1420538e78f87000200000000000000000327',\n      '0x6a5ead5433a50472642cd268e584dafa5a394490000200000000000000000366',\n      '0x0fd5663d4893ae0d579d580584806aadd2dd0b8b000200000000000000000367',\n      '0x441b8a1980f2f2e43a9397099d15cc2fe6d3625000020000000000000000035f',\n      '0xf3aeb3abba741f0eece8a1b1d2f11b85899951cb000200000000000000000351',\n      '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n    ],\n  },\n  Metadata: {\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063': {\n      name: 'Balancer Stable USD',\n      hasIcon: true,\n    },\n    '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249': {\n      name: 'AuraBAL Stable Pool',\n      hasIcon: false,\n    },\n  },\n};\n\nconst POOLS_POLYGON: Pools = {\n  IdsMap: {\n    xMatic: {\n      v1: '0xc17636e36398602dd37bb5d1b3a9008c7629005f0002000000000000000004c4',\n      v2: '0xb20fc01d21a50d2c734c4a1262b4404d41fa7bf000000000000000000000075c',\n    },\n    stMatic: {\n      v1: '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366',\n      v2: '0x8159462d255c1d24915cb51ec361f700174cd99400000000000000000000075d',\n    },\n    mai4: {\n      mai4: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012',\n      maiBbaUsd:\n        '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n    },\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'Linear',\n    'ERC4626Linear',\n    'Gyro2',\n    'Gyro3',\n    'GyroE',\n    'FX',\n  ],\n  Stable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012', // polygon MAI/DAI/USDC/USDT\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc5600020000000000000000001e', // polygon WBTC/renBTC\n      '0xf38cf113d2d4f60c36cbd95af2f48a9a0167045a00000000000000000000005b', // polygon,\n      '0x0d34e5dd4d8f043557145598e4e2dc286b35fd4f000000000000000000000068', // tusd polygon\n      '0x5028497af0c9a54ea8c6d42a054c0341b9fc616800020000000000000000007b', // dusd polygon\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366', // polygon staked matic\n      '0xb4670d1389c758e4380c4211bcbc85342688b9c50002000000000000000003d8', // vQi,\n      '0xc31a37105b94ab4efca1954a14f059af11fcd9bb000000000000000000000455', // 4pool\n      '0xc17636e36398602dd37bb5d1b3a9008c7629005f0002000000000000000004c4', // maticx metastable\n      '0xb4b22bd6cdad0ab828be6f8a4086dfa54e9b373600020000000000000000058f', // Polygon tetuBAL-80BAL-20WETH\n      '0xb797adfb7b268faeaa90cadbfed464c76ee599cd0002000000000000000005ba', // tetuBAL-80BAL-20WETH V2 (with short name)\n      '0x0b8319061732b34cab22445fa83b81f950e4b7ed000000000000000000000709',\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366',\n      '0x8159462d255c1d24915cb51ec361f700174cd99400000000000000000000075d',\n      '0xb20fc01d21a50d2c734c4a1262b4404d41fa7bf000000000000000000000075c',\n      '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e', // mai / bb-am-USD\n      '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b', // bb-am-USD\n      '0xa48d164f6eb0edc68bd03b56fa59e12f24499ad10000000000000000000007c4', // ageur stable\n    ],\n  },\n  Investment: {\n    AllowList: [''],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0xdae7e32adc5d490a43ccba1f0c736033f2b4efca': 'stablePool', // Metastable\n    '0x751a0bc0e3f75b38e01cf25bfce7ff36de1c87de': 'liquidityBootstrappingPool', // LBP\n    '0x41b953164995c11c81da73d212ed8af25741b7ac': 'liquidityBootstrappingPool', // LBP (zero protocol fee)\n    '0x0f7bb7ce7b6ed9366f9b6b910adefe72dc538193': 'managedPool', // Polygon Managed\n    '0xc128a9954e6c874ea3d62ce62b468ba073093f25': 'boostedPool', // polygon stablephantom\n    '0xca96c4f198d343e251b1a01f3eba061ef3da73c1': 'stablePool', // stable pool v2,\n    '0x136fd06fa01ecf624c7f2b3cb15742c1339dc2c4': 'composableStablePool', // ComposableStable\n    '0x0e39c3d9b2ec765efd9c5c70bb290b1fcd8536e3': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x0297e37f1873d2dab4487aa67cd56b58e2f27875000100000000000000000002',\n      '0x03cd191f589d12b0582a99808cf19851e468e6b500010000000000000000000a',\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012',\n      '0x0d34e5dd4d8f043557145598e4e2dc286b35fd4f000000000000000000000068',\n      '0x10f21c9bd8128a29aa785ab2de0d044dcdd79436000200000000000000000059',\n      '0x186084ff790c65088ba694df11758fae4943ee9e000200000000000000000032',\n      '0x36128d5436d2d70cab39c9af9cce146c38554ff0000100000000000000000008',\n      '0x5a6ae1fd70d04ba4a279fc219dfabc53825cb01d00020000000000000000020e',\n      '0x614b5038611729ed49e0ded154d8a5d3af9d1d9e00010000000000000000001d',\n      '0x7c9cf12d783821d5c63d8e9427af5c44bad92445000100000000000000000051',\n      '0x805ca3ccc61cc231851dee2da6aabff0a7714aa7000200000000000000000361',\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366',\n      '0xb204bf10bc3a5435017d3db247f56da601dfe08a0002000000000000000000fe',\n      '0xc31a37105b94ab4efca1954a14f059af11fcd9bb000000000000000000000455',\n      '0xce66904b68f1f070332cbc631de7ee98b650b499000100000000000000000009',\n      '0xcf354603a9aebd2ff9f33e1b04246d8ea204ae9500020000000000000000005a',\n      '0xdb1db6e248d7bb4175f6e5a382d0a03fe3dcc813000100000000000000000035',\n      '0xea4e073c8ac859f2994c07e627178719c8002dc00002000000000000000003dc',\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc5600020000000000000000001e',\n      '0xc17636e36398602dd37bb5d1b3a9008c7629005f0002000000000000000004c4',\n      '0x2dbc9ab0160087ae59474fb7bed95b9e808fa6bc0001000000000000000003db',\n      '0xb797adfb7b268faeaa90cadbfed464c76ee599cd0002000000000000000005ba',\n      '0x8f9dd2064eb38e8e40f2ab67bde27c0e16ea9b080002000000000000000004ca',\n      '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n      '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n      '0x8159462d255c1d24915cb51ec361f700174cd99400000000000000000000075d',\n      '0xb20fc01d21a50d2c734c4a1262b4404d41fa7bf000000000000000000000075c',\n    ],\n  },\n  Metadata: {},\n};\n\nconst POOLS_ARBITRUM: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear', 'FX'],\n  Stable: {\n    AllowList: [\n      '0x9be7de742865d021c0e8fb9d64311b2c040c1ec1000200000000000000000012', // arbitrum\n      '0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016', // arbitrum\n      '0x386b5d43ba8b97c43d4afb4cdae7877a1b295e8a000000000000000000000020', // tusd arbitrum\n      '0x0510ccf9eb3ab03c1508d3b9769e8ee2cfd6fdcf00000000000000000000005d', // mai\n      '0x5a5884fc31948d59df2aeccca143de900d49e1a300000000000000000000006f', // VST\n      '0xd89746affa5483627a87e55713ec1905114394950002000000000000000000bf', // fluid stable\n      '0x7bceaa9c5e7f4836fec3bce2d5346637c9b13970000000000000000000000102', // vesta new stable\n      '0xfb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159', // stETH\n    ],\n  },\n  Investment: {\n    AllowList: [''],\n  },\n  Factories: {\n    '0x7dfdef5f355096603419239ce743bfaf1120312b': 'weightedPool', // Arbitrum Weighted\n    '0xcf0a32bbef8f064969f21f7e02328fb577382018': 'weightedPool', // Arbitrum WeightedOracle\n    '0x2433477a10fc5d31b9513c638f19ee85caed53fd': 'stablePool', // Arbitrum Stable\n    '0xebfd5681977e38af65a7487dc70b8221d089ccad': 'stablePool', // Arbitrum MetaStable\n    '0x142b9666a0a3a30477b052962dda81547e7029ab': 'liquidityBootstrappingPool', // Arbitrum LBP (old)\n    '0x1802953277fd955f9a254b80aa0582f193cf1d77': 'liquidityBootstrappingPool', // Arbitrum LBP (new)\n    '0xacd615b3705b9c880e4e7293f1030b34e57b4c1c': 'managedPool', // arbitrum managed\n    '0xdae7e32adc5d490a43ccba1f0c736033f2b4efca': 'boostedPool', // arbitrum stablephantom\n    '0xef44d6786b2b4d544b7850fe67ce6381626bf2d6': 'stablePool', // stable pool v2\n    '0xaeb406b0e430bf5ea2dc0b9fe62e4e53f74b3a33': 'composableStablePool', // ComposableStable\n    '0x8df6efec5547e31b0eb7d1291b511ff8a2bf987c': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x0510ccf9eb3ab03c1508d3b9769e8ee2cfd6fdcf00000000000000000000005d',\n      '0x0adeb25cb5920d4f7447af4a0428072edc2cee2200020000000000000000004a',\n      '0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016',\n      '0x1779900c7707885720d39aa741f4086886307e9e00020000000000000000004b',\n      '0x4a3a22a3e7fee0ffbb66f1c28bfac50f75546fc7000200000000000000000008',\n      '0x5a5884fc31948d59df2aeccca143de900d49e1a300000000000000000000006f',\n      '0x64541216bafffeec8ea535bb71fbc927831d0595000100000000000000000002',\n      '0x651e00ffd5ecfa7f3d4f33d62ede0a97cf62ede2000200000000000000000006',\n      '0xb28670b3e7ad27bd41fb5938136bf9e9cba90d6500020000000000000000001e',\n      '0xb340b6b1a34019853cb05b2de6ee8ffd0b89a008000100000000000000000036',\n      '0xb5b77f1ad2b520df01612399258e7787af63025d000200000000000000000010',\n      '0xc2f082d33b5b8ef3a7e3de30da54efd3114512ac000200000000000000000017',\n      '0xc61ff48f94d801c1ceface0289085197b5ec44f000020000000000000000004d',\n      '0xcc65a812ce382ab909a11e434dbf75b34f1cc59d000200000000000000000001',\n      '0xe1b40094f1446722c424c598ac412d590e0b3ffb000200000000000000000076',\n      '0xb3028ca124b80cfe6e9ca57b70ef2f0ccc41ebd40002000000000000000000ba',\n      '0x7bceaa9c5e7f4836fec3bce2d5346637c9b13970000000000000000000000102',\n      '0xfb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159',\n      '0x178e029173417b1f9c8bc16dcec6f697bc323746000200000000000000000158',\n    ],\n  },\n  Metadata: {},\n};\n\nconst POOLS_GNOSIS: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'Linear',\n    'ERC4626Linear',\n    'FX',\n    'Gyro2',\n    'Gyro3',\n    'GyroE',\n    'HighAmpComposableStable',\n    'FX',\n  ],\n  Stable: {\n    AllowList: [\n      '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000004',\n      '0x707b7d4a1bae449d546dcab869256591bbb3d70b000000000000000000000000',\n    ],\n  },\n  Investment: {\n    AllowList: [],\n  },\n  Factories: {},\n  Stakable: {\n    AllowList: [],\n  },\n  Metadata: {},\n};\n\nconst POOLS_GENERIC: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear', 'FX'],\n  Stable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066',\n      '0x9f19a375709baf0e8e35c2c5c65aca676c4c719100000000000000000000006e',\n      '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080', // Lido Metastable\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112', // Rocket Pool Metastable\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012', // polygon\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc5600020000000000000000001e', // polygon\n      '0x9be7de742865d021c0e8fb9d64311b2c040c1ec1000200000000000000000012', // arbitrum\n      '0x9f19a375709baf0e8e35c2c5c65aca676c4c7191000200000000000000000022', // polygon PAR/PAR,\n      '0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016', // arbitrum\n      '0xf38cf113d2d4f60c36cbd95af2f48a9a0167045a00000000000000000000005b', // polygon,\n      '0x0d34e5dd4d8f043557145598e4e2dc286b35fd4f000000000000000000000068', // tusd polygon\n      '0x386b5d43ba8b97c43d4afb4cdae7877a1b295e8a000000000000000000000020', // tusd arbitrum\n      '0x5028497af0c9a54ea8c6d42a054c0341b9fc616800020000000000000000007b', // dusd polygon\n      '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe', // Mainnet bb-a-USD\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366', // staked matic\n    ],\n  },\n  Investment: {\n    AllowList: [\n      '0xccf5575570fac94cec733a58ff91bb3d073085c70002000000000000000000af', // iROBOT mainnet\n      '0xe7b1d394f3b40abeaa0b64a545dbcf89da1ecb3f00010000000000000000009a', // Techemy mainnet\n      '0x3b40d7d5ae25df2561944dd68b252016c4c7b2800001000000000000000000c2', // WSB-DEFI mainnet\n    ],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0x67d27634e44793fe63c467035e31ea8635117cd4': 'stablePool', // Metastable\n    '0x7dfdef5f355096603419239ce743bfaf1120312b': 'weightedPool', // Arbitrum Weighted\n    '0xcf0a32bbef8f064969f21f7e02328fb577382018': 'weightedPool', // Arbitrum WeightedOracle\n    '0x2433477a10fc5d31b9513c638f19ee85caed53fd': 'stablePool', // Arbitrum Stable\n    '0xebfd5681977e38af65a7487dc70b8221d089ccad': 'stablePool', // Arbitrum MetaStable\n    '0x751a0bc0e3f75b38e01cf25bfce7ff36de1c87de': 'liquidityBootstrappingPool', // Mainnet LBP\n    '0x0f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e': 'liquidityBootstrappingPool', // Mainnet LBP (zero protocol fee)\n    '0x142b9666a0a3a30477b052962dda81547e7029ab': 'liquidityBootstrappingPool', // Arbitrum LBP (old)\n    '0x1802953277fd955f9a254b80aa0582f193cf1d77': 'liquidityBootstrappingPool', // Arbitrum LBP (new)\n    '0x48767f9f868a4a7b86a90736632f6e44c2df7fa9': 'managedPool', // Mainnet Managed\n    '0x0f7bb7ce7b6ed9366f9b6b910adefe72dc538193': 'managedPool', // Polygon Managed\n    '0xacd615b3705b9c880e4e7293f1030b34e57b4c1c': 'managedPool', // arbitrum managed\n    '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2': 'boostedPool', // mainnet stablephantom\n    '0xdae7e32adc5d490a43ccba1f0c736033f2b4efca': 'boostedPool', // arbitrum stablephantom\n    '0xc128a9954e6c874ea3d62ce62b468ba073093f25': 'boostedPool', // polygon stablephantom\n  },\n  Stakable: {\n    AllowList: [],\n  },\n  Metadata: {\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0xd387dfd3a786e7caa06e6cf0c675352c7ffff30400000000000000000000063e': {\n      name: 'Balancer Stable USD',\n      hasIcon: true,\n    },\n  },\n};\n\nconst POOLS_MAP = {\n  [Network.GOERLI]: POOLS_GOERLI,\n  [Network.MAINNET]: POOLS_MAINNET,\n  [Network.POLYGON]: POOLS_POLYGON,\n  [Network.ARBITRUM]: POOLS_ARBITRUM,\n  [Network.GNOSIS]: POOLS_GNOSIS,\n};\n\nexport function POOLS(networkId: Network): Pools {\n  const id = networkId as keyof typeof POOLS_MAP;\n  return POOLS_MAP[id] ? POOLS_MAP[id] : POOLS_GENERIC;\n}\n","export enum PoolGaugesAttributes {\n  Id = 'id',\n  Address = 'address',\n  PoolId = 'poolId',\n}\n\nexport interface PoolGauges {\n  preferentialGauge: {\n    id: string;\n  };\n  gauges: {\n    id: string;\n    relativeWeightCap?: string | null;\n  }[];\n}\n","export enum PoolShareAttributes {\n  Balance = 'balance',\n  Id = 'id',\n  PoolId = 'poolId',\n  UserAddress = 'userAddress',\n}\n\nexport interface PoolShare {\n  id: string;\n  userAddress: string;\n  poolId: string;\n  balance: string;\n}\n","export enum GaugeShareAttributes {\n  Id = 'id',\n  UserAddress = 'user',\n  GaugeId = 'gauge',\n  Balance = 'balance',\n}\n\nexport interface GaugeShare {\n  id: string;\n  balance: string;\n  userAddress: string;\n  gauge: {\n    id: string;\n    poolId?: string;\n    isKilled: boolean;\n    totalSupply: string;\n  };\n}\n","import { Network } from './lib/constants/network';\nimport type { BigNumberish } from '@ethersproject/bignumber';\nimport type { Contract } from '@ethersproject/contracts';\nimport type { PoolDataService, TokenPriceService } from '@balancer-labs/sor';\nimport type {\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n  JoinPoolAttributes,\n} from './modules/pools/pool-types/concerns/types';\nimport type {\n  Findable,\n  Searchable,\n  LiquidityGauge,\n  PoolAttribute,\n  TokenAttribute,\n  Cacheable,\n} from '@/modules/data/types';\nimport type {\n  BaseFeeDistributor,\n  GaugeSharesRepository,\n  PoolGaugesRepository,\n  PoolSharesRepository,\n  ProtocolFeesProvider,\n  PoolJoinExitRepository,\n} from './modules/data';\nimport type { GraphQLArgs } from './lib/graphql';\nimport type { AprBreakdown } from '@/modules/pools/apr/apr';\nimport { SubgraphPoolDataService } from '@/modules/sor/pool-data/subgraphPoolDataService';\nimport * as Queries from '@/modules/pools/queries/types';\nimport { GyroConfigRepository } from '@/modules/data/gyro-config/repository';\n\nexport * from '@/modules/data/types';\nexport { Network, AprBreakdown };\n\nexport type Address = string;\n\nexport interface BalancerSdkConfig {\n  //use a known network or provide an entirely custom config\n  network: Network | BalancerNetworkConfig;\n  rpcUrl: string;\n  //overwrite the subgraph url if you don't want to use the balancer labs maintained version\n  customSubgraphUrl?: string;\n  subgraphQuery?: GraphQLQuery;\n  //optionally overwrite parts of the standard SOR config\n  sor?: Partial<BalancerSdkSorConfig>;\n  tenderly?: BalancerTenderlyConfig;\n  enableLogging?: boolean;\n  coingecko?: CoingeckoConfig;\n}\n\nexport interface BalancerTenderlyConfig {\n  accessKey: string;\n  user: string;\n  project: string;\n  blockNumber?: number;\n}\n\nexport interface BalancerSdkSorConfig {\n  //use a built-in service or provide a custom implementation of a TokenPriceService\n  //defaults to coingecko\n  tokenPriceService: 'api' | 'coingecko' | 'subgraph' | TokenPriceService;\n  //use a built-in service or provide a custom implementation of a PoolDataService\n  //defaults to subgraph\n  poolDataService: 'subgraph' | PoolDataService;\n  //if a custom PoolDataService is provided, on chain balance fetching needs to be handled externally\n  //default to true.\n  fetchOnChainBalances: boolean;\n}\n\nexport interface ContractAddresses {\n  vault: string;\n  multicall: string;\n  poolDataQueries: string;\n  gaugeClaimHelper?: string;\n  balancerHelpers: string;\n  balancerMinter?: string;\n  lidoRelayer?: string;\n  balancerRelayer: string;\n  gaugeController?: string;\n  feeDistributor?: string;\n  veBal?: string;\n  veBalProxy?: string;\n  protocolFeePercentagesProvider?: string;\n  weightedPoolFactory?: string;\n  composableStablePoolFactory?: string;\n\n  aaveLinearPoolFactory?: string;\n  erc4626LinearPoolFactory?: string;\n  eulerLinearPoolFactory?: string;\n  gearboxLinearPoolFactory?: string;\n  yearnLinearPoolFactory?: string;\n\n  [key: string]: string | undefined;\n}\n\nexport interface BalancerNetworkConfig {\n  chainId: Network;\n  addresses: {\n    contracts: ContractAddresses;\n    tokens: {\n      wrappedNativeAsset: string;\n      lbpRaisingTokens?: string[];\n      stETH?: string;\n      wstETH?: string;\n      bal: string;\n      veBal?: string;\n      bbaUsd?: string;\n    };\n  };\n  tenderly?: BalancerTenderlyConfig;\n  urls: {\n    subgraph: string;\n    gaugesSubgraph?: string;\n    blockNumberSubgraph?: string;\n  };\n  thirdParty: {\n    coingecko: {\n      nativeAssetId: string;\n      platformId: string;\n    };\n  };\n  averageBlockTime?: number; // In seconds, used if blockNumberSubgraph not set\n  multicallBatchSize?: number; // Only zkEVM needs a smaller batch size of 128, defaults to 1024\n  pools: {\n    wETHwstETH?: PoolReference;\n  };\n  poolsToIgnore?: string[];\n  sorConnectingTokens?: { symbol: string; address: string }[];\n  sorTriPathMidPoolIds?: string[];\n}\n\nexport interface BalancerDataRepositories {\n  feeDistributor?: BaseFeeDistributor;\n  feeCollector: Findable<number>;\n  gaugeShares?: GaugeSharesRepository;\n  gyroConfigRepository?: GyroConfigRepository;\n  liquidityGauges?: Findable<LiquidityGauge>;\n  protocolFees?: ProtocolFeesProvider;\n  /**\n   * Why do we need 3 different pools repositories?\n   */\n  pools: Findable<Pool, PoolAttribute> & Searchable<Pool>;\n  // Does it need to be different from the pools repository?\n  poolsForSimulations: SubgraphPoolDataService;\n  poolGauges?: PoolGaugesRepository;\n  poolJoinExits: PoolJoinExitRepository;\n  // Perhaps better to use a function to get upto date balances when needed.\n  poolsOnChain: Findable<Pool, PoolAttribute> &\n    Searchable<Pool> &\n    Cacheable<Pool>;\n  poolShares: PoolSharesRepository;\n  tokenHistoricalPrices: Findable<Price>;\n  tokenMeta: Findable<Token, TokenAttribute>;\n  tokenPrices: Findable<Price>;\n  tokenYields: Findable<number>;\n  // Replace with a swapFeeRepository, we don't need historic pools for any other reason than to get the swap fee\n  yesterdaysPools?: Findable<Pool, PoolAttribute> & Searchable<Pool>;\n}\n\nexport type PoolReference = {\n  id: string;\n  address: string;\n};\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: string[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n\nexport interface TransactionData {\n  contract?: Contract;\n  function: string;\n  params: string[];\n  outputs?: {\n    amountsIn?: string[];\n    amountsOut?: string[];\n  };\n}\n\nexport type Currency = 'eth' | 'usd';\n\nexport type Price = { [currency in Currency]?: string };\nexport type TokenPrices = { [address: string]: Price };\nexport type HistoricalPrices = {\n  prices: [[number, number]];\n  market_caps: [[number, number]];\n  total_volumes: [[number, number]];\n};\n\nexport interface Token {\n  address: string;\n  decimals?: number;\n  symbol?: string;\n  price?: Price;\n}\n\nexport interface PoolToken extends Token {\n  balance: string;\n  priceRate?: string;\n  weight?: string | null;\n  isExemptFromYieldProtocolFee?: boolean;\n  token?: SubPoolMeta;\n}\n\nexport interface SubPoolMeta {\n  pool: SubPool | null;\n  latestUSDPrice?: string;\n  latestFXPrice?: string;\n}\n\nexport interface SubPool {\n  id: string;\n  address: string;\n  poolType: PoolType;\n  totalShares: string;\n  mainIndex: number;\n  tokens?: PoolToken[];\n}\n\nexport interface OnchainTokenData {\n  balance: string;\n  weight: number;\n  decimals: number;\n  logoURI: string | undefined;\n  name: string;\n  symbol: string;\n}\n\nexport interface OnchainPoolData {\n  tokens: Record<Address, OnchainTokenData>;\n  totalSupply: string;\n  decimals: number;\n  swapFee: string;\n  amp?: string;\n  swapEnabled: boolean;\n  tokenRates?: string[];\n}\n\nexport enum PoolType {\n  Weighted = 'Weighted',\n  Investment = 'Investment',\n  Stable = 'Stable',\n  ComposableStable = 'ComposableStable',\n  MetaStable = 'MetaStable',\n  StablePhantom = 'StablePhantom',\n  LiquidityBootstrapping = 'LiquidityBootstrapping',\n  Element = 'Element',\n  Gyro2 = 'Gyro2',\n  Gyro3 = 'Gyro3',\n  GyroE = 'GyroE',\n  Managed = 'Managed',\n  // Linear Pools defined below all operate the same mathematically but have different factories and names in Subgraph\n  AaveLinear = 'AaveLinear',\n  Linear = 'Linear',\n  EulerLinear = 'EulerLinear',\n  ERC4626Linear = 'ERC4626Linear',\n  BeefyLinear = 'BeefyLinear',\n  GearboxLinear = 'GearboxLinear',\n  MidasLinear = 'MidasLinear',\n  ReaperLinear = 'ReaperLinear',\n  SiloLinear = 'SiloLinear',\n  TetuLinear = 'TetuLinear',\n  YearnLinear = 'YearnLinear',\n  FX = 'FX',\n}\n\nexport interface Pool {\n  id: string;\n  name: string;\n  address: string;\n  chainId: number;\n  poolType: PoolType;\n  poolTypeVersion: number;\n  swapFee: string;\n  protocolYieldFeeCache: string;\n  protocolSwapFeeCache: string;\n  owner?: string;\n  factory?: string;\n  tokens: PoolToken[];\n  tokensList: string[];\n  tokenAddresses?: string[];\n  totalLiquidity: string;\n  totalShares: string;\n  totalSwapFee?: string;\n  totalSwapVolume?: string;\n  onchain?: OnchainPoolData;\n  createTime?: number;\n  mainTokens?: string[];\n  wrappedTokens?: string[];\n  unwrappedTokens?: string[];\n  isNew?: boolean;\n  volumeSnapshot?: string;\n  feesSnapshot?: string;\n  boost?: string;\n  symbol?: string;\n  swapEnabled: boolean;\n  amp?: string;\n  wrappedIndex?: number;\n  mainIndex?: number;\n  apr?: AprBreakdown;\n  liquidity?: string;\n  totalWeight: string;\n  lowerTarget: string;\n  upperTarget: string;\n  priceRateProviders?: PriceRateProvider[];\n  lastJoinExitInvariant?: string;\n  isInRecoveryMode?: boolean;\n  isPaused?: boolean;\n  tokenRates?: string[];\n}\n\nexport interface PriceRateProvider {\n  address: string;\n  token: {\n    address: string;\n  };\n}\n\n/**\n * Pool use-cases / controller layer\n */\nexport interface PoolWithMethods extends Pool, Queries.ParamsBuilder {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param joiner Account address joining pool\n   * @param tokensIn Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param amountsIn Token amounts provided for joining pool in EVM scale\n   * @param slippage Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin: (\n    joiner: string,\n    tokensIn: string[],\n    amountsIn: string[],\n    slippage: string\n  ) => JoinPoolAttributes;\n\n  /**\n   * Calculate price impact of bptAmount against zero price impact BPT amount.\n   * @param tokenAmounts Token amounts. Needs a value for each pool token.\n   * @param bptAmount BPT amount for comparison (in EVM scale).\n   * @param isJoin boolean indicating if the price impact is for a join or exit.\n   * @returns price impact in EVM scale.\n   */\n  calcPriceImpact: (\n    tokenAmounts: string[],\n    bptAmount: string,\n    isJoin: boolean\n  ) => Promise<string>;\n\n  /**\n   * Build exit pool transaction parameters with exact BPT in and minimum token amounts out based on slippage tolerance\n   * @param exiter Account address exiting pool\n   * @param bptIn BPT provided for exiting pool in EVM scale\n   * @param slippage Maximum slippage tolerance in bps. i.e. 50 = 5%\n   * @param shouldUnwrapNativeAsset Indicates whether wrapped native asset should be unwrapped after exit. Defaults to false.\n   * @param singleTokenOut Optional: token address that if provided will exit to given token\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildExitExactBPTIn: (\n    exiter: string,\n    bptIn: string,\n    slippage: string,\n    shouldUnwrapNativeAsset?: boolean,\n    singleTokenOut?: string,\n    toInternalBalance?: boolean\n  ) => ExitExactBPTInAttributes;\n\n  /**\n   * Build exit pool transaction parameters with exact tokens out and maximum BPT in based on slippage tolerance\n   * @param exiter Account address exiting pool\n   * @param tokensOut Tokens provided for exiting pool (same length and order as amountsOut)\n   * @param amountsOut Amounts provided for exiting pool in EVM scale\n   * @param slippage Maximum slippage tolerance in bps. i.e. 50 = 5%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildExitExactTokensOut: (\n    exiter: string,\n    tokensOut: string[],\n    amountsOut: string[],\n    slippage: string,\n    toInternalBalance?: boolean\n  ) => ExitExactTokensOutAttributes;\n\n  /**\n   * Build recovery exit pool transaction parameters with exact BPT in and minimum token amounts out based on slippage tolerance\n   * @param exiter Account address exiting pool\n   * @param bptIn BPT amount in EVM scale\n   * @param slippage Maximum slippage tolerance in basis points. i.e. 50 = 5%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildRecoveryExit: (\n    exiter: string,\n    bptIn: string,\n    slippage: string,\n    toInternalBalance?: boolean\n  ) => ExitExactBPTInAttributes;\n\n  /**\n   * Calculate spot price for swapping tokenIn with tokenOut\n   * @param tokenIn Token address\n   * @param tokenOut Token address\n   * @returns spot price for swapping tokenIn with tokenOut in EVM scale\n   */\n  calcSpotPrice: (tokenIn: string, tokenOut: string) => string;\n\n  bptIndex: number;\n}\n\nexport interface GraphQLQuery {\n  args: GraphQLArgs;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  attrs: any;\n}\n\nexport type CoingeckoConfig = {\n  coingeckoApiKey: string;\n  tokensPerPriceRequest?: number;\n  isDemoApiKey?: boolean;\n};\n","export class Logger {\n  private enableLogging: boolean;\n\n  private static instance: Logger;\n\n  private constructor() {\n    this.enableLogging = true; // Logging is initially enabled\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  setLoggingEnabled(enabled: boolean): void {\n    this.enableLogging = enabled;\n  }\n\n  info(message: string): void {\n    if (this.enableLogging) {\n      console.log(`[INFO] ${message}`);\n    }\n  }\n\n  warn(message: string): void {\n    if (this.enableLogging) {\n      console.warn(`[WARN] ${message}`);\n    }\n  }\n\n  error(message: string): void {\n    if (this.enableLogging) {\n      console.error(`[ERROR] ${message}`);\n    }\n  }\n\n  time(message: string): void {\n    if (this.enableLogging) {\n      console.time(`[TIME] ${message}`);\n    }\n  }\n\n  timeEnd(message: string): void {\n    if (this.enableLogging) {\n      console.timeEnd(`[TIME] ${message}`);\n    }\n  }\n}\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number =>\n  tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1;\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean =>\n    getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string =>\n    this.isETH(token) ? this.WETH : token;\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(\n    tokens: string[],\n    ...others: unknown[][]\n  ): [string[], ...unknown[][]] {\n    others.forEach((array) =>\n      invariant(tokens.length === array.length, 'array length mismatch')\n    );\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [\n      string,\n      ...unknown[]\n    ][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) =>\n      cmpTokens(tokenA, tokenB)\n    );\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(\n      sortedTranspose\n    ) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND ',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'UNAUTHORIZED_OPERATION',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean =>\n    Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(\n      ([, message]) => message === error\n    );\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (\n    calldata: string,\n    deadline: BigNumberish,\n    signature: string\n  ): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return {\n      ...splitSignature(signature),\n      deadline: BigNumber.from(deadline),\n    };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{\n  v: number;\n  r: string;\n  s: string;\n  deadline: BigNumber;\n  nonce: BigNumber;\n}> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  const domain = {\n    name: await token.name(),\n    version: '1',\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return {\n    ...splitSignature(signature),\n    deadline: BigNumber.from(deadline),\n    nonce: BigNumber.from(nonce),\n  };\n};\n","export const BZERO = BigInt(0);\nexport const BONE = BigInt(1);\nexport const ONE = BigInt('1000000000000000000'); // 18 decimal places\n\nconst _require = (b: boolean, message: string) => {\n  if (!b) throw new Error(message);\n};\n\n/**\n * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\n * it had 18 decimals.\n */\nexport function _computeScalingFactor(tokenDecimals: bigint): bigint {\n  // Tokens with more than 18 decimals are not supported.\n  const decimalsDifference = BigInt(18) - tokenDecimals;\n  return ONE * BigInt(10) ** decimalsDifference;\n}\n\n/**\n * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\n * scaling or not.\n */\nexport function _upscale(amount: bigint, scalingFactor: bigint): bigint {\n  // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\n  // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\n  // the same direction for all amounts, as the impact of this rounding is expected to be minimal (and there's no\n  // rounding error unless `_scalingFactor()` is overriden).\n  return SolidityMaths.mulDownFixed(amount, scalingFactor);\n}\n\n/**\n * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\n * the `amounts` array.\n */\nexport function _upscaleArray(\n  amounts: bigint[],\n  scalingFactors: bigint[]\n): bigint[] {\n  const upscaledAmounts = new Array<bigint>(amounts.length);\n  for (let i = 0; i < amounts.length; ++i) {\n    upscaledAmounts[i] = SolidityMaths.mulDownFixed(\n      amounts[i],\n      scalingFactors[i]\n    );\n  }\n  return upscaledAmounts;\n}\n\n/**\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\n * whether it needed scaling or not. The result is rounded down.\n */\nexport function _downscaleDown(amount: bigint, scalingFactor: bigint): bigint {\n  return SolidityMaths.divDownFixed(amount, scalingFactor);\n}\n\n/**\n * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\n * *mutates* the `amounts` array.\n */\nexport function _downscaleDownArray(\n  amounts: bigint[],\n  scalingFactors: bigint[]\n): bigint[] {\n  const downscaledAmounts = new Array<bigint>(amounts.length);\n  for (let i = 0; i < amounts.length; ++i) {\n    downscaledAmounts[i] = SolidityMaths.divDownFixed(\n      amounts[i],\n      scalingFactors[i]\n    );\n  }\n  return downscaledAmounts;\n}\n\n/**\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\n * whether it needed scaling or not. The result is rounded up.\n */\nexport function _downscaleUp(amount: bigint, scalingFactor: bigint): bigint {\n  return SolidityMaths.divUpFixed(amount, scalingFactor);\n}\n\nexport class SolidityMaths {\n  /**\n   * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\n   */\n  // add(a: bigint, b: bigint): bigint {\n  //     const c = a + b;\n  //     // _require(c >= a, Errors.ADD_OVERFLOW);\n  //     return c;\n  // }\n\n  /**\n   * @dev Returns the addition of two signed integers, reverting on overflow.\n   */\n  static add(a: bigint, b: bigint): bigint {\n    const c = a + b;\n    _require((b >= 0 && c >= a) || (b < 0 && c < a), 'Errors.ADD_OVERFLOW');\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\n   */\n  static sub(a: bigint, b: bigint): bigint {\n    _require(b <= a, 'Errors.SUB_OVERFLOW');\n    const c = a - b;\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two signed integers, reverting on overflow.\n   */\n  // sub(int256 a, int256 b) internal pure returns (int256) {\n  //     int256 c = a - b;\n  //     // _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\n  //     return c;\n  // }\n\n  /**\n   * @dev Returns the largest bigint in the array.\n   */\n  static max(args: bigint[]): bigint {\n    if (args.length === 0) throw new Error('Errors.EMPTY_ARRAY');\n    if (args.length === 1) return args[0];\n    return args.reduce((previous, current) =>\n      current > previous ? current : previous\n    );\n  }\n\n  /**\n   * @dev Returns the smallest of two numbers of 256 bits.\n   */\n  static min(a: bigint, b: bigint): bigint {\n    return a < b ? a : b;\n  }\n\n  static mul(a: bigint, b: bigint): bigint {\n    const c = a * b;\n    _require(a == BZERO || c / a == b, 'Errors.MUL_OVERFLOW');\n    return c;\n  }\n\n  static div(a: bigint, b: bigint, roundUp: boolean): bigint {\n    return roundUp ? this.divUp(a, b) : this.divDown(a, b);\n  }\n\n  static divDown(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n    return a / b;\n  }\n\n  static divUp(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n\n    if (a == BZERO) {\n      return BZERO;\n    } else {\n      return BONE + (a - BONE) / b;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static MAX_POW_RELATIVE_ERROR = BigInt(10000);\n\n  static mulUpFixed(a: bigint, b: bigint): bigint {\n    const product = a * b;\n    _require(a == BZERO || product / a == b, 'Errors.MUL_OVERFLOW');\n\n    if (product == BZERO) {\n      return BZERO;\n    } else {\n      // The traditional divUp formula is:\n      // divUp(x, y) := (x + y - 1) / y\n      // To avoid intermediate overflow in the addition, we distribute the division and get:\n      // divUp(x, y) := (x - 1) / y + 1\n      // Note that this requires x != 0, which we already tested for.\n\n      return (product - BONE) / ONE + BONE;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static divDownFixed(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n    if (a == BZERO) {\n      return BZERO;\n    } else {\n      const aInflated = a * ONE;\n      // _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\n\n      return aInflated / b;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static divUpFixed(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n\n    if (a == BZERO) {\n      return BZERO;\n    } else {\n      const aInflated = a * ONE;\n      _require(aInflated / a == ONE, 'Errors.DIV_INTERNAL'); // mul overflow\n\n      // The traditional divUp formula is:\n      // divUp(x, y) := (x + y - 1) / y\n      // To avoid intermediate overflow in the addition, we distribute the division and get:\n      // divUp(x, y) := (x - 1) / y + 1\n      // Note that this requires x != 0, which we already tested for.\n\n      return (aInflated - BONE) / b + BONE;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static powUpFixed(x: bigint, y: bigint): bigint {\n    const raw = LogExpMath.pow(x, y);\n    const maxError = this.add(\n      this.mulUpFixed(raw, this.MAX_POW_RELATIVE_ERROR),\n      BONE\n    );\n\n    return this.add(raw, maxError);\n  }\n\n  // Modification: Taken from the fixed point class\n  static complementFixed(x: bigint): bigint {\n    return x < ONE ? ONE - x : BZERO;\n  }\n\n  static mulDownFixed(a: bigint, b: bigint): bigint {\n    const product = a * b;\n    _require(a == BZERO || product / a == b, 'Errors.MUL_OVERFLOW');\n\n    return product / ONE;\n  }\n}\n\nclass LogExpMath {\n  // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n  // two numbers, and multiply by ONE when dividing them.\n\n  // All arguments and return values are 18 decimal fixed point numbers.\n  static ONE_18 = BigInt('1000000000000000000');\n\n  // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n  // case of ln36, 36 decimals.\n  static ONE_20 = BigInt('100000000000000000000');\n  static ONE_36 = BigInt('1000000000000000000000000000000000000');\n\n  // The domain of natural exponentiation is bound by the word size and number of decimals used.\n  //\n  // Because internally the result will be stored using 20 decimals, the largest possible result is\n  // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n  // The smallest possible result is 10^(-18), which makes largest negative argument\n  // ln(10^(-18)) = -41.446531673892822312.\n  // We use 130.0 and -41.0 to have some safety margin.\n  static MAX_NATURAL_EXPONENT = BigInt('130000000000000000000');\n  static MIN_NATURAL_EXPONENT = BigInt('-41000000000000000000');\n\n  // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n  // 256 bit integer.\n  static LN_36_LOWER_BOUND: bigint =\n    BigInt(LogExpMath.ONE_18) - BigInt('100000000000000000');\n  static LN_36_UPPER_BOUND: bigint =\n    BigInt(LogExpMath.ONE_18) + BigInt('100000000000000000');\n\n  static MILD_EXPONENT_BOUND: bigint =\n    BigInt(2) ** BigInt(254) / LogExpMath.ONE_20;\n\n  // 18 decimal constants\n  static x0 = BigInt('128000000000000000000'); // 2ˆ7\n  static a0 = BigInt(\n    '38877084059945950922200000000000000000000000000000000000'\n  ); // eˆ(x0) (no decimals)\n  static x1 = BigInt('64000000000000000000'); // 2ˆ6\n  static a1 = BigInt('6235149080811616882910000000'); // eˆ(x1) (no decimals)\n\n  // 20 decimal constants\n  static x2 = BigInt('3200000000000000000000'); // 2ˆ5\n  static a2 = BigInt('7896296018268069516100000000000000'); // eˆ(x2)\n  static x3 = BigInt('1600000000000000000000'); // 2ˆ4\n  static a3 = BigInt('888611052050787263676000000'); // eˆ(x3)\n  static x4 = BigInt('800000000000000000000'); // 2ˆ3\n  static a4 = BigInt('298095798704172827474000'); // eˆ(x4)\n  static x5 = BigInt('400000000000000000000'); // 2ˆ2\n  static a5 = BigInt('5459815003314423907810'); // eˆ(x5)\n  static x6 = BigInt('200000000000000000000'); // 2ˆ1\n  static a6 = BigInt('738905609893065022723'); // eˆ(x6)\n  static x7 = BigInt('100000000000000000000'); // 2ˆ0\n  static a7 = BigInt('271828182845904523536'); // eˆ(x7)\n  static x8 = BigInt('50000000000000000000'); // 2ˆ-1\n  static a8 = BigInt('164872127070012814685'); // eˆ(x8)\n  static x9 = BigInt('25000000000000000000'); // 2ˆ-2\n  static a9 = BigInt('128402541668774148407'); // eˆ(x9)\n  static x10 = BigInt('12500000000000000000'); // 2ˆ-3\n  static a10 = BigInt('113314845306682631683'); // eˆ(x10)\n  static x11 = BigInt('6250000000000000000'); // 2ˆ-4\n  static a11 = BigInt('106449445891785942956'); // eˆ(x11)\n\n  // All arguments and return values are 18 decimal fixed point numbers.\n  static pow(x: bigint, y: bigint): bigint {\n    if (y === BZERO) {\n      // We solve the 0^0 indetermination by making it equal one.\n      return this.ONE_18;\n    }\n\n    if (x == BZERO) {\n      return BZERO;\n    }\n\n    // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n    // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n    // x^y = exp(y * ln(x)).\n\n    // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n    _require(\n      x <\n        BigInt(\n          '57896044618658097711785492504343953926634992332820282019728792003956564819968'\n        ),\n      'Errors.X_OUT_OF_BOUNDS'\n    );\n    const x_int256 = x;\n\n    // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n    // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n    // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n    _require(y < this.MILD_EXPONENT_BOUND, 'Errors.Y_OUT_OF_BOUNDS');\n    const y_int256 = y;\n\n    let logx_times_y;\n    if (\n      this.LN_36_LOWER_BOUND < x_int256 &&\n      x_int256 < this.LN_36_UPPER_BOUND\n    ) {\n      const ln_36_x = this._ln_36(x_int256);\n\n      // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n      // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n      // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n      // (downscaled) last 18 decimals.\n      logx_times_y =\n        (ln_36_x / this.ONE_18) * y_int256 +\n        ((ln_36_x % this.ONE_18) * y_int256) / this.ONE_18;\n    } else {\n      logx_times_y = this._ln(x_int256) * y_int256;\n    }\n    logx_times_y /= this.ONE_18;\n\n    // Finally, we compute exp(y * ln(x)) to arrive at x^y\n    _require(\n      this.MIN_NATURAL_EXPONENT <= logx_times_y &&\n        logx_times_y <= this.MAX_NATURAL_EXPONENT,\n      'Errors.PRODUCT_OUT_OF_BOUNDS'\n    );\n\n    // return uint256(exp(logx_times_y));\n    return this.exp(logx_times_y);\n  }\n\n  static exp(x: bigint): bigint {\n    _require(\n      x >= this.MIN_NATURAL_EXPONENT && x <= this.MAX_NATURAL_EXPONENT,\n      'Errors.INVALID_EXPONENT'\n    );\n\n    if (x < 0) {\n      // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n      // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n      // Fixed point division requires multiplying by ONE_18.\n      return (this.ONE_18 * this.ONE_18) / this.exp(BigInt(-1) * x);\n    }\n\n    // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n    // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n    // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n    // decomposition.\n    // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest x_n.\n    // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n    // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n    // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n    // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n    // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n    // decomposition.\n\n    // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n    // it and compute the accumulated product.\n\n    let firstAN;\n    if (x >= this.x0) {\n      x -= this.x0;\n      firstAN = this.a0;\n    } else if (x >= this.x1) {\n      x -= this.x1;\n      firstAN = this.a1;\n    } else {\n      firstAN = BigInt(1); // One with no decimal places\n    }\n\n    // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n    // smaller terms.\n    x *= BigInt(100);\n\n    // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n    // one. Recall that fixed point multiplication requires dividing by ONE_20.\n    let product = this.ONE_20;\n\n    if (x >= this.x2) {\n      x -= this.x2;\n      product = (product * this.a2) / this.ONE_20;\n    }\n    if (x >= this.x3) {\n      x -= this.x3;\n      product = (product * this.a3) / this.ONE_20;\n    }\n    if (x >= this.x4) {\n      x -= this.x4;\n      product = (product * this.a4) / this.ONE_20;\n    }\n    if (x >= this.x5) {\n      x -= this.x5;\n      product = (product * this.a5) / this.ONE_20;\n    }\n    if (x >= this.x6) {\n      x -= this.x6;\n      product = (product * this.a6) / this.ONE_20;\n    }\n    if (x >= this.x7) {\n      x -= this.x7;\n      product = (product * this.a7) / this.ONE_20;\n    }\n    if (x >= this.x8) {\n      x -= this.x8;\n      product = (product * this.a8) / this.ONE_20;\n    }\n    if (x >= this.x9) {\n      x -= this.x9;\n      product = (product * this.a9) / this.ONE_20;\n    }\n\n    // x10 and x11 are unnecessary here since we have high enough precision already.\n\n    // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n    // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n    let seriesSum = this.ONE_20; // The initial one in the sum, with 20 decimal places.\n    let term; // Each term in the sum, where the nth term is (x^n / n!).\n\n    // The first term is simply x.\n    term = x;\n    seriesSum += term;\n\n    // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n    // multiplying by it requires dividing by this.ONE_20, but dividing by the non-fixed point n values does not.\n\n    term = (term * x) / this.ONE_20 / BigInt(2);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(3);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(4);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(5);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(6);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(7);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(8);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(9);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(10);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(11);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(12);\n    seriesSum += term;\n\n    // 12 Taylor terms are sufficient for 18 decimal precision.\n\n    // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n    // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n    // all three (one 20 decimal fixed point multiplication, dividing by this.ONE_20, and one integer multiplication),\n    // and then drop two digits to return an 18 decimal value.\n\n    return (((product * seriesSum) / this.ONE_20) * firstAN) / BigInt(100);\n  }\n\n  static _ln_36(x: bigint): bigint {\n    // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n    // worthwhile.\n\n    // First, we transform x to a 36 digit fixed point value.\n    x *= this.ONE_18;\n\n    // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n    // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n    // division by ONE_36.\n    const z = ((x - this.ONE_36) * this.ONE_36) / (x + this.ONE_36);\n    const z_squared = (z * z) / this.ONE_36;\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(3);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(5);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(7);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(9);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(11);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(13);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(15);\n\n    // 8 Taylor terms are sufficient for 36 decimal precision.\n\n    // All that remains is multiplying by 2 (non fixed point).\n    return seriesSum * BigInt(2);\n  }\n\n  /**\n   * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n   */\n  static _ln(a: bigint): bigint {\n    if (a < this.ONE_18) {\n      // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n      // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\n      // Fixed point division requires multiplying by this.ONE_18.\n      return BigInt(-1) * this._ln((this.ONE_18 * this.ONE_18) / a);\n    }\n\n    // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n    // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n    // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n    // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n    // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest a_n.\n    // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n    // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n    // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n    // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n    // this.ONE_18 to convert them to fixed point.\n    // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n    // by it and compute the accumulated sum.\n\n    let sum = BZERO;\n    if (a >= this.a0 * this.ONE_18) {\n      a /= this.a0; // Integer, not fixed point division\n      sum += this.x0;\n    }\n\n    if (a >= this.a1 * this.ONE_18) {\n      a /= this.a1; // Integer, not fixed point division\n      sum += this.x1;\n    }\n\n    // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n    sum *= BigInt(100);\n    a *= BigInt(100);\n\n    // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n    if (a >= this.a2) {\n      a = (a * this.ONE_20) / this.a2;\n      sum += this.x2;\n    }\n\n    if (a >= this.a3) {\n      a = (a * this.ONE_20) / this.a3;\n      sum += this.x3;\n    }\n\n    if (a >= this.a4) {\n      a = (a * this.ONE_20) / this.a4;\n      sum += this.x4;\n    }\n\n    if (a >= this.a5) {\n      a = (a * this.ONE_20) / this.a5;\n      sum += this.x5;\n    }\n\n    if (a >= this.a6) {\n      a = (a * this.ONE_20) / this.a6;\n      sum += this.x6;\n    }\n\n    if (a >= this.a7) {\n      a = (a * this.ONE_20) / this.a7;\n      sum += this.x7;\n    }\n\n    if (a >= this.a8) {\n      a = (a * this.ONE_20) / this.a8;\n      sum += this.x8;\n    }\n\n    if (a >= this.a9) {\n      a = (a * this.ONE_20) / this.a9;\n      sum += this.x9;\n    }\n\n    if (a >= this.a10) {\n      a = (a * this.ONE_20) / this.a10;\n      sum += this.x10;\n    }\n\n    if (a >= this.a11) {\n      a = (a * this.ONE_20) / this.a11;\n      sum += this.x11;\n    }\n\n    // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n    // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n    // Let z = (a - 1) / (a + 1).\n    // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n    // division by ONE_20.\n    const z = ((a - this.ONE_20) * this.ONE_20) / (a + this.ONE_20);\n    const z_squared = (z * z) / this.ONE_20;\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(3);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(5);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(7);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(9);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(11);\n\n    // 6 Taylor terms are sufficient for 36 decimal precision.\n\n    // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n    seriesSum *= BigInt(2);\n\n    // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n    // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n    // value.\n\n    return (sum + seriesSum) / BigInt(100);\n  }\n}\n","import { parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Pool } from '../../types';\nimport {\n  SolidityMaths,\n  _computeScalingFactor,\n  _upscaleArray,\n} from '@/lib/utils/solidityMaths';\nimport { AssetHelpers } from '@/lib/utils/assetHelpers';\n\nexport const AMP_PRECISION = 3; // number of decimals -> precision 1000\n\ntype ParsedPoolInfo = {\n  bptIndex: number;\n  higherBalanceTokenIndex: number;\n  ampWithPrecision: bigint;\n  balancesEvm: bigint[];\n  balancesEvmWithoutBpt: bigint[];\n  priceRates: bigint[];\n  priceRatesWithoutBpt: bigint[];\n  swapFeeEvm: bigint;\n  poolTokens: string[];\n  poolTokensWithoutBpt: string[];\n  weights: bigint[];\n  scalingFactors: bigint[];\n  scalingFactorsWithoutBpt: bigint[];\n  scalingFactorsRaw: bigint[];\n  scalingFactorsRawWithoutBpt: bigint[];\n  upScaledBalances: bigint[];\n  upScaledBalancesWithoutBpt: bigint[];\n  totalSharesEvm: bigint;\n};\n\n/**\n * Parse pool info into EVM amounts. Sorts by token order if wrappedNativeAsset param passed.\n * @param pool Pool object to be parsed\n * @param wrappedNativeAsset e.g. wETH address\n * @param unwrapNativeAsset if true, changes wETH address to ETH address\n * @returns parsed pool info\n */\nexport const parsePoolInfo = (\n  pool: Pool,\n  wrappedNativeAsset?: string,\n  unwrapNativeAsset?: boolean\n): ParsedPoolInfo => {\n  let poolTokens = unwrapNativeAsset\n    ? pool.tokens.map((token) =>\n        token.address === wrappedNativeAsset ? AddressZero : token.address\n      )\n    : pool.tokens.map((token) => token.address);\n  let decimals = pool.tokens.map((token) => {\n    return token.decimals ?? 18;\n  });\n  let balancesEvm = pool.tokens.map((token) =>\n    parseFixed(token.balance, token.decimals).toBigInt()\n  );\n  let weights = pool.tokens.map((token) => {\n    return parseFixed(token.weight ?? '1', 18).toBigInt();\n  });\n  let priceRates = pool.tokens.map((token) => {\n    return parseFixed(token.priceRate ?? '1', 18).toBigInt();\n  });\n\n  let scalingFactorsRaw = decimals.map((d) => _computeScalingFactor(BigInt(d)));\n  let scalingFactors = scalingFactorsRaw.map((sf, i) =>\n    SolidityMaths.mulDownFixed(sf, priceRates[i])\n  );\n  // This assumes token.balance is in human scale (e.g. from SG)\n  let upScaledBalances = _upscaleArray(balancesEvm, scalingFactors);\n  if (wrappedNativeAsset) {\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    [\n      poolTokens,\n      decimals,\n      scalingFactors,\n      scalingFactorsRaw,\n      balancesEvm,\n      upScaledBalances,\n      weights,\n      priceRates,\n    ] = assetHelpers.sortTokens(\n      poolTokens,\n      decimals,\n      scalingFactors,\n      scalingFactorsRaw,\n      balancesEvm,\n      upScaledBalances,\n      weights,\n      priceRates\n    ) as [\n      string[],\n      number[],\n      bigint[],\n      bigint[],\n      bigint[],\n      bigint[],\n      bigint[],\n      bigint[]\n    ];\n  }\n\n  // Solidity maths uses precison method for amp that must be replicated\n  const ampWithPrecision = parseFixed(\n    pool.amp ?? '1',\n    AMP_PRECISION\n  ).toBigInt();\n\n  const higherBalanceTokenIndex = upScaledBalances.indexOf(\n    SolidityMaths.max(upScaledBalances)\n  );\n\n  const scalingFactorsWithoutBpt = [...scalingFactors];\n  const scalingFactorsRawWithoutBpt = [...scalingFactorsRaw];\n  const poolTokensWithoutBpt = [...poolTokens];\n  const balancesEvmWithoutBpt = [...balancesEvm];\n  const priceRatesWithoutBpt = [...priceRates];\n  const upScaledBalancesWithoutBpt = [...upScaledBalances];\n\n  const bptIndex = poolTokens.indexOf(pool.address);\n  if (bptIndex !== -1) {\n    scalingFactorsWithoutBpt.splice(bptIndex, 1);\n    scalingFactorsRawWithoutBpt.splice(bptIndex, 1);\n    poolTokensWithoutBpt.splice(bptIndex, 1);\n    balancesEvmWithoutBpt.splice(bptIndex, 1);\n    priceRatesWithoutBpt.splice(bptIndex, 1);\n    upScaledBalancesWithoutBpt.splice(bptIndex, 1);\n  }\n\n  return {\n    bptIndex,\n    higherBalanceTokenIndex,\n    ampWithPrecision,\n    balancesEvm,\n    balancesEvmWithoutBpt,\n    priceRates,\n    priceRatesWithoutBpt,\n    swapFeeEvm: parseFixed(pool.swapFee, 18).toBigInt(),\n    poolTokens,\n    poolTokensWithoutBpt,\n    weights,\n    scalingFactors,\n    scalingFactorsWithoutBpt,\n    scalingFactorsRaw,\n    scalingFactorsRawWithoutBpt,\n    upScaledBalances,\n    upScaledBalancesWithoutBpt,\n    totalSharesEvm: parseFixed(pool.totalShares || '0', 18).toBigInt(),\n  };\n};\n","import { Network } from '@/lib/constants/network';\n\n/**\n * TYPES\n */\ntype CommonTokens = {\n  nativeAsset: string;\n  wNativeAsset: string;\n  WETH: string;\n  BAL: string;\n  bbaUSD?: string;\n  bbaUSDv2?: string;\n};\n\ntype TokenConstants = {\n  Popular: {\n    Symbols: string[];\n  };\n  Addresses: CommonTokens;\n  PriceChainMap?: Record<string, string>;\n};\n\n/**\n * CONSTANTS\n */\nexport const DEFAULT_TOKEN_DECIMALS = 18;\n\nexport const TOKENS_MAINNET: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    WETH: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    BAL: '0xba100000625a3754423978a60c9317c58a424e3d',\n    bbaUSD: '0x7B50775383d3D6f0215A8F290f2C9e2eEBBEceb2',\n    bbaUSDv2: '0xA13a9247ea42D743238089903570127DdA72fE44',\n  },\n};\n\nexport const TOKENS_POLYGON: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    WETH: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n    BAL: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3',\n  },\n};\n\nexport const TOKENS_ARBITRUM: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    WETH: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    BAL: '0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8',\n  },\n};\n\nexport const TOKENS_GNOSIS: TokenConstants = {\n  Popular: {\n    Symbols: ['xDAI', 'WXDAI', 'WETH', 'BAL'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',\n    WETH: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n    BAL: '0x7eF541E2a22058048904fE5744f9c7E4C57AF717',\n  },\n};\nexport const TOKENS_GOERLI: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'USDT', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n    WETH: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n    BAL: '0xfA8449189744799aD2AcE7e0EBAC8BB7575eff47',\n    bbaUSD: '0x13ACD41C585d7EbB4a9460f7C8f50BE60DC080Cd',\n  },\n  PriceChainMap: {\n    /**\n     * Addresses must be lower case and map from goerli to mainnet, e.g\n     * [goerli address]: mainnet address\n     */\n    '0xdfcea9088c8a88a76ff74892c1457c17dfeef9c1':\n      '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    '0x37f03a12241e9fd3658ad6777d289c3fb8512bc9':\n      '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',\n    '0xfa8449189744799ad2ace7e0ebac8bb7575eff47':\n      '0xba100000625a3754423978a60c9317c58a424e3d',\n    '0xe0c9275e44ea80ef17579d33c55136b7da269aeb':\n      '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    '0x8c9e6c40d3402480ace624730524facc5482798c':\n      '0x6b175474e89094c44da98b954eedeac495271d0f',\n    '0x1f1f156e0317167c11aa412e3d1435ea29dc3cce':\n      '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    '0x4cb1892fddf14f772b2e39e299f44b2e5da90d04':\n      '0x3ed3b47dd13ec9a98b44e6204a523e766b225811',\n    '0x811151066392fd641fe74a9b55a712670572d161':\n      '0xbcca60bb61934080951369a648fb03df4f96263c',\n    '0x89534a24450081aa267c79b07411e9617d984052':\n      '0x028171bca77440897b824ca71d1c56cac55b68a3',\n    '0x829f35cebbcd47d3c120793c12f7a232c903138b':\n      '0x956f47f50a910163d8bf957cf5846d573e7f87ca',\n    '0xff386a3d08f80ac38c77930d173fa56c6286dc8b':\n      '0x6810e776880c02933d47db1b9fc05908e5386b96',\n  },\n};\n\nexport const TOKENS_GENERIC: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    WETH: '0x0000000000000000000000000000000000000000',\n    BAL: '0x0000000000000000000000000000000000000000',\n  },\n};\n\nexport const TOKENS_MAP = {\n  [Network.GOERLI]: TOKENS_GOERLI,\n  [Network.MAINNET]: TOKENS_MAINNET,\n  [Network.POLYGON]: TOKENS_POLYGON,\n  [Network.ARBITRUM]: TOKENS_ARBITRUM,\n  [Network.GNOSIS]: TOKENS_GNOSIS,\n};\n\nexport function TOKENS(networkId: Network): TokenConstants {\n  const id = networkId as keyof typeof TOKENS_MAP;\n  return TOKENS_MAP[id] ? TOKENS_MAP[id] : TOKENS_GENERIC;\n}\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"units/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map","import { Interface } from '@ethersproject/abi';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/contracts';\nimport { Network } from '@/types';\n\nexport const yieldTokens = {\n  [Network.MAINNET]: {\n    waUSDT: '0xf8fd466f12e236f4c96f7cce6c79eadb819abf58',\n    waUSDC: '0xd093fa4fb80d09bb30817fdcd442d4d02ed3e5de',\n    waDAI: '0x02d60b84491589974263d922d9cc7a3152618ef6',\n  },\n  [Network.POLYGON]: {\n    wamDAI: '0xee029120c72b0607344f35b17cdd90025e647b00',\n    wamUSDC: '0x221836a597948dce8f3568e044ff123108acc42a',\n    wamUSDT: '0x19c60a251e525fa88cd6f3768416a8024e98fc19',\n  },\n};\n\nexport const wrappedTokensMap = {\n  [Network.MAINNET]: {\n    // USDT\n    [yieldTokens[Network.MAINNET].waUSDT]: {\n      aToken: '0x3ed3b47dd13ec9a98b44e6204a523e766b225811',\n      underlying: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    },\n    // USDC\n    [yieldTokens[Network.MAINNET].waUSDC]: {\n      aToken: '0xbcca60bb61934080951369a648fb03df4f96263c',\n      underlying: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    },\n    // DAI\n    [yieldTokens[Network.MAINNET].waDAI]: {\n      aToken: '0x028171bca77440897b824ca71d1c56cac55b68a3',\n      underlying: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    },\n  },\n  [Network.POLYGON]: {\n    // USDT\n    [yieldTokens[Network.POLYGON].wamUSDT]: {\n      aToken: '0x60d55f02a771d515e077c9c2403a1ef324885cec',\n      underlying: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',\n    },\n    // USDC\n    [yieldTokens[Network.POLYGON].wamUSDC]: {\n      aToken: '0x1a13f4ca1d028320a707d99520abfefca3998b7f',\n      underlying: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    },\n    // DAI\n    [yieldTokens[Network.POLYGON].wamDAI]: {\n      aToken: '0x27f8d03b3a2196956ed754badc28d73be8830a6e',\n      underlying: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063',\n    },\n  },\n};\n\nconst wrappedATokenInterface = new Interface([\n  'function rate() view returns (uint256)',\n]);\n\nexport interface IAaveRates {\n  getRate: (address: string) => Promise<number>;\n}\n\nexport class AaveRates implements IAaveRates {\n  rates?: Promise<{ [wrappedATokenAddress: string]: number }>;\n\n  constructor(private multicall: Multicall, private network: Network) {}\n\n  private async fetch(\n    network: Network.MAINNET | Network.POLYGON\n  ): Promise<{ [wrappedATokenAddress: string]: number }> {\n    console.time('Fetching aave rates');\n    const addresses = Object.values(yieldTokens[network]);\n    const payload = addresses.map((wrappedATokenAddress) => ({\n      target: wrappedATokenAddress,\n      callData: wrappedATokenInterface.encodeFunctionData('rate', []),\n    }));\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n\n    const rates = addresses.reduce((p: { [key: string]: number }, a, i) => {\n      p[a] ||= res[i] == '0x' ? 0 : parseFloat(formatUnits(res[i], 27));\n      return p;\n    }, {});\n    console.timeEnd('Fetching aave rates');\n\n    return rates;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getRate(wrappedAToken: string): Promise<number> {\n    //To prevent bricked linear pools from effecting this call\n    /*if (this.network != Network.MAINNET && this.network != Network.POLYGON) {\n      return 1;\n    }\n    if (!Object.values(yieldTokens[this.network]).includes(wrappedAToken)) {\n      return 1;\n    }\n    if (!this.rates) {\n      this.rates = this.fetch(this.network);\n    }\n\n    return (await this.rates)[wrappedAToken];*/\n\n    return 1;\n  }\n}\n","import { Token, TokenPrices, Network } from '@/types';\nimport { TOKENS } from '@/lib/constants/tokens';\nimport { wrappedTokensMap as aaveWrappedMap } from '@/modules/data/token-prices/aave-rates';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\n\nexport function tokensToTokenPrices(tokens: Token[]): TokenPrices {\n  const tokenPrices: TokenPrices = {};\n  tokens.forEach((token) => {\n    if (token.price) {\n      tokenPrices[token.address] = token.price;\n    }\n  });\n\n  return tokenPrices;\n}\n\nexport function tokenAddressForPricing(\n  address: string,\n  chainId: Network\n): string {\n  let a = address.toLowerCase();\n  a = addressMapIn(a, chainId);\n  a = unwrapToken(a, chainId);\n\n  return a;\n}\n\n/**\n * Maps testnet tokens, eg: on Göreli to a mainnet one.\n * Used to get the pricing information on networks not supported by a price feed.\n *\n * @param address Address on a testnet network\n */\nexport const addressMapIn = (address: string, chainId: Network): string => {\n  const addressMap = TOKENS(chainId).PriceChainMap;\n  return (addressMap && addressMap[address.toLowerCase()]) || address;\n};\n\n/**\n * Finds an underlying token address for a wrapped one\n *\n * @param wrappedAddress\n * @param chainId\n * @returns underlying token address\n */\nexport const unwrapToken = (\n  wrappedAddress: string,\n  chainId: Network\n): string => {\n  const lowercase = wrappedAddress.toLocaleLowerCase();\n\n  const aaveChain = chainId as keyof typeof aaveWrappedMap;\n  if (\n    aaveWrappedMap[aaveChain] != undefined &&\n    aaveWrappedMap[aaveChain] != null\n  ) {\n    // Double if to avoid skipping just to at after compile: Object.keys()?.includes\n    if (Object.keys(aaveWrappedMap[aaveChain]).includes(lowercase)) {\n      return aaveWrappedMap[aaveChain][\n        lowercase as keyof (typeof aaveWrappedMap)[typeof aaveChain]\n      ].aToken;\n    } else {\n      return lowercase;\n    }\n  } else {\n    return lowercase;\n  }\n};\n\n// filter native asset (e.g. ETH) amounts\nexport const getEthValue = (tokens: string[], amounts: string[]): BigNumber => {\n  const values = amounts.filter((amount, i) => tokens[i] === AddressZero);\n  return values[0] ? BigNumber.from(values[0]) : BigNumber.from(0);\n};\n","/* eslint-disable @typescript-eslint/no-empty-function */\n\n/**\n * Debouncer for different attributes requested over time, which need to be aggregated into a single resolving call\n *\n * Choosing deferred promise since we have setTimeout that returns a promise\n * Some reference for history buffs: https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns\n */\n\ninterface Promised<T> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason: unknown) => void;\n}\n\nconst makePromise = <T>(): Promised<T> => {\n  let resolve: (value: T) => void = () => {};\n  let reject: (reason: unknown) => void = () => {};\n  const promise = new Promise<T>((res, rej) => {\n    [resolve, reject] = [res, rej];\n  });\n  return { promise, reject, resolve };\n};\n\n/**\n * Aggregates attributes and exectutes a debounced call\n *\n * @param fn Function to debounce\n * @param wait Debouncing waiting time [ms]\n * @param limit Maximum number of attributes to execute in one promise\n * @returns Debouncer instance\n */\nexport class Debouncer<T, A> {\n  requestSets = <Set<A>[]>[]; // new Set<A>(); // collection of requested attributes\n  promisedCalls: Promised<T>[] = []; // When requesting a price we return a deferred promise\n  promisedCount = 0; // New request coming when setTimeout is executing will make a new promise\n  timeout?: ReturnType<typeof setTimeout>;\n  debounceCancel = (): void => {}; // Allow to cancel mid-flight requests\n\n  constructor(\n    private fn: (attrs: A[]) => Promise<T>,\n    private wait = 200,\n    private limit = 100\n  ) {}\n\n  fetch(attr?: A): Promise<T> {\n    this.requestSets[this.promisedCount] ||= new Set<A>();\n\n    // Accumulate attributes for debounced execution\n    if (attr) {\n      this.requestSets[this.promisedCount].add(attr);\n    }\n\n    // Execute immediately when limit is reached\n    if (this.requestSets[this.promisedCount].size >= this.limit) {\n      return this.execute(0);\n    }\n\n    // Return a running promise\n    if (this.promisedCalls[this.promisedCount]) {\n      return this.promisedCalls[this.promisedCount].promise;\n    }\n\n    // If no promise is running, start a new one\n    return this.execute(this.wait);\n  }\n\n  execute(timeout = 0): Promise<T> {\n    // if no promise is running, start a new one\n    if (!this.promisedCalls[this.promisedCount]) {\n      this.promisedCalls[this.promisedCount] = makePromise();\n    }\n\n    const { promise, resolve, reject } = this.promisedCalls[this.promisedCount];\n\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    const call = () => {\n      const requestAttrs = [...this.requestSets[this.promisedCount]];\n      this.promisedCount++;\n      this.fn(requestAttrs)\n        .then((results) => {\n          resolve(results);\n          this.debounceCancel = () => {};\n        })\n        .catch((reason) => {\n          if (\n            reason.response &&\n            reason.response.data &&\n            reason.response.data.error\n          ) {\n            reason = reason.response.data.error;\n          }\n          reject(reason);\n        });\n    };\n\n    if (timeout > 0) {\n      this.timeout = setTimeout(call.bind(this), timeout);\n    } else {\n      call();\n    }\n\n    this.debounceCancel = () => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n      reject('Cancelled');\n      delete this.promisedCalls[this.promisedCount];\n    };\n\n    return promise;\n  }\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  parseFixed as _parseFixed,\n  formatFixed as _formatFixed,\n} from '@ethersproject/bignumber';\n\n/**\n * Scales a number up by 10 ^ decimals. Also ensures the returned value is an\n * integer, any additional decimals post scaling are removed.\n * @param value The value to be scaled up\n * @param decimals The total decimal places / order of magnitude to scale by\n * @returns The scaled value\n */\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n  const valueWithTrimmedDecimals = new RegExp(`[0-9]+\\\\.?[0-9]{0,${decimals}}`);\n  const result = value.match(valueWithTrimmedDecimals);\n  let parsedValue = value;\n  if (result) {\n    parsedValue = result[0];\n  }\n\n  return _parseFixed(parsedValue, decimals);\n}\n\n/**\n * Scales a number down by 10 ^ decimals. Also ensures the returned value doesn't\n * have a .0 at the end, so integers are returned as integers.\n * @param value The value to be scaled down\n * @param decimals The total decimal places / order of magnitude to scale down by\n * @returns The scaled value\n */\nexport function formatFixed(\n  value: BigNumberish,\n  decimals: BigNumberish\n): string {\n  const ethersFormat = _formatFixed(value, decimals);\n  return ethersFormat.replace(/(.0$)/, '');\n}\n\nexport function parseToBigInt18(value: string): bigint {\n  return parseFixed(value, 18).toBigInt();\n}\n\nexport function formatFromBigInt18(value: bigint): string {\n  return _formatFixed(BigNumber.from(value), 18);\n}\n\n/**\n * Like parseEther but for numbers. Converts floating point to BigNumber using 18 decimals\n */\nexport const bn = (value: number): BigNumber => _parseFixed(`${value}`, 18);\n","import { BigNumber } from '@ethersproject/bignumber';\n\nconst bpsPerOne = BigNumber.from('10000'); // number of basis points in 100%\n\n/**\n * Multiplies input by slippage amount\n *\n * @param amount Input amount (not parsed)\n * @param slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result delta from multiplying amount and slippage\n */\nexport const mulSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = amount.mul(slippage).div(bpsPerOne);\n  return delta;\n};\n\n/**\n * Reduce input amount by slippage factor\n *\n * @param amount Input in EVM amounts\n * @param slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result amount subtracting slippage\n */\nexport const subSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = mulSlippage(amount, slippage);\n  return amount.sub(delta);\n};\n\n/**\n * Increase input amount by slippage factor\n *\n * @param amount Input in EVM amounts\n * @param slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result amount adding slippage\n */\nexport const addSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = mulSlippage(amount, slippage);\n  return amount.add(delta);\n};\n","import { Address, PoolType } from '@/types';\nimport { getAddress } from '@ethersproject/address';\nimport { Log, TransactionReceipt } from '@ethersproject/providers';\nimport { Interface, LogDescription } from '@ethersproject/abi';\nimport { Logger } from '@/lib/utils/logger';\n\nexport * from './assetHelpers';\nexport * from './errors';\nexport * from './permit';\nexport * from './poolHelper';\nexport * from './signatures';\nexport * from './tokens';\nexport * from './debouncer';\nexport * from './math';\nexport * from './slippageHelper';\n\nexport const isSameAddress = (address1: string, address2: string): boolean =>\n  getAddress(address1) === getAddress(address2);\n\nexport function insert<T>(arr: T[], index: number, newItem: T): T[] {\n  if (index < 0 || index > arr.length) {\n    return arr;\n  }\n  return [\n    // part of the array before the specified index\n    ...arr.slice(0, index),\n    // inserted item\n    newItem,\n    // part of the array after the specified index\n    ...arr.slice(index),\n  ];\n}\n\n/**\n * Returns a new array with item on the specified index replaced by newItem\n * @param arr\n * @param index\n * @param newItem\n */\nexport function replace<T>(arr: T[], index: number, newItem: T): T[] {\n  if (index < 0 || index >= arr.length) {\n    return arr;\n  }\n  return [\n    // part of the array before the specified index\n    ...arr.slice(0, index),\n    // inserted item\n    newItem,\n    // part of the array after the specified index\n    ...arr.slice(index + 1),\n  ];\n}\n\n/**\n * Removes item from array at specified index and returns new array. (Does not mutate original)\n * @param arr Original array\n * @param index Index of item to be removed\n * @returns New array with item at index removed\n */\nexport function removeItem<T>(arr: T[], index: number): T[] {\n  const newArray = [...arr];\n  if (index < 0 || index >= arr.length) {\n    return newArray;\n  }\n  newArray.splice(index, 1);\n  return newArray;\n}\n\n/**\n * REORDER ARRAYS USING A REFERENCE AND ORIGINAL ARRAY,\n * Example:\n * Input -> reference: [c,b,a], original: [a,b,c], others: [[1,2,3], [4,5,6]]\n * Sorts like -> [[c,b,a],[3,2,1],[6,5,4]]\n * Returns -> [6,5,4]\n * @param reference\n * @param original\n * @param others\n * @returns Sorted others\n */\nexport function reorderArrays<T>(\n  reference: T[],\n  original: T[],\n  ...others: unknown[][]\n): unknown[][] {\n  if (\n    reference.length !== original.length ||\n    others.some((arr) => arr.length !== original.length)\n  ) {\n    throw new Error('Array length mismatch');\n  }\n  const indexesOfOriginal = reference.map((value) => original.indexOf(value));\n  if (indexesOfOriginal.indexOf(-1) >= 0) {\n    throw new Error('Invalid reference or original array');\n  }\n  const othersResorted: unknown[][] = [];\n  indexesOfOriginal.forEach((indexOfOriginal, i) => {\n    others.forEach((arr, arrIndex) => {\n      if (!othersResorted[arrIndex]) {\n        othersResorted[arrIndex] = [];\n      }\n      othersResorted[arrIndex][i] = arr[indexOfOriginal];\n    });\n  });\n  return othersResorted;\n}\n\nexport function isLinearish(poolType: string): boolean {\n  const supportedPoolTypes: string[] = Object.values(PoolType);\n  if (poolType.includes('Linear') && supportedPoolTypes.includes(poolType))\n    return true;\n  else return false;\n}\n\nexport function truncateAddresses(addresses: string[]): string[] {\n  return addresses.map((t) => `${t.slice(0, 6)}...${t.slice(38, 42)}`);\n}\n\nexport const findEventInReceiptLogs = ({\n  receipt,\n  to,\n  contractInterface,\n  logName,\n}: {\n  receipt: TransactionReceipt;\n  to: Address;\n  contractInterface: Interface;\n  logName: string;\n}): LogDescription => {\n  const event = receipt.logs\n    .filter((log: Log) => {\n      return isSameAddress(log.address, to);\n    })\n    .map((log) => {\n      try {\n        return contractInterface.parseLog(log);\n      } catch (error) {\n        const logger = Logger.getInstance();\n        logger.warn(error as string);\n        return null;\n      }\n    })\n    .find((parsedLog) => parsedLog?.name === logName);\n  if (!event) {\n    throw new Error('Event not found in logs');\n  }\n  return event;\n};\n\nexport const getRandomBytes32 = (): string => {\n  const getRandomBytes8 = () => Math.random().toString(16).slice(2, 10);\n  const randomBytes32 = Array(8).fill(null).map(getRandomBytes8).join('');\n  return `0x${randomBytes32}`;\n};\n","import { GraphQLArgs, GraphQLArgsFormatter } from '../types';\n\nexport class BalancerAPIArgsFormatter implements GraphQLArgsFormatter {\n  format(args: GraphQLArgs): GraphQLArgs {\n    return args;\n  }\n}\n","import { GraphQLArgs, GraphQLArgsFormatter, GraphQLFilter } from '../types';\n\nexport class SubgraphArgsFormatter implements GraphQLArgsFormatter {\n  operatorMap: Record<string, string>;\n\n  constructor() {\n    this.operatorMap = {\n      gt: '_gt',\n      lt: '_lt',\n      eq: '',\n      in: '_in',\n      not_in: '_not_in',\n      contains: '_contains',\n    };\n  }\n\n  format(args: GraphQLArgs): GraphQLArgs {\n    const whereQuery: Record<string, GraphQLFilter> = {};\n    if (args.where) {\n      Object.entries(args.where).forEach(([name, filter]) => {\n        Object.entries(filter).forEach(([operator, value]) => {\n          whereQuery[`${name}${this.operatorMap[operator]}`] = value;\n        });\n      });\n    }\n\n    return {\n      ...args,\n      ...{ where: whereQuery },\n    };\n  }\n}\n","import { mergeWith } from 'lodash';\nimport { GraphQLArgs, GraphQLArgsFormatter } from './types';\n\nexport * from './formatters';\n\nexport class GraphQLArgsBuilder {\n  constructor(readonly args: GraphQLArgs) {}\n\n  merge(other: GraphQLArgsBuilder): GraphQLArgsBuilder {\n    const mergedArgs = mergeWith(\n      this.args,\n      other.args,\n      (objValue: unknown, srcValue: unknown) => {\n        if (Array.isArray(objValue)) {\n          return objValue.concat(srcValue);\n        }\n      }\n    );\n\n    return new GraphQLArgsBuilder(mergedArgs);\n  }\n\n  format(formatter: GraphQLArgsFormatter): unknown {\n    return formatter.format(this.args);\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  AaveLinearPool,\n  AaveLinearPoolInterface,\n} from \"../AaveLinearPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"contract IVault\",\n            name: \"vault\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"mainToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"wrappedToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"assetManager\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"upperTarget\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pauseWindowDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"bufferPeriodDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"version\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct AaveLinearPool.ConstructorArgs\",\n        name: \"args\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TargetsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTargets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVirtualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newLowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newUpperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTargets\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class AaveLinearPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): AaveLinearPoolInterface {\n    return new utils.Interface(_abi) as AaveLinearPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AaveLinearPool {\n    return new Contract(address, _abi, signerOrProvider) as AaveLinearPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  AaveLinearPoolFactory,\n  AaveLinearPoolFactoryInterface,\n} from \"../AaveLinearPoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBalancerQueries\",\n        name: \"queries\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"initialPauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AaveLinearPoolCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"mainToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"contract AaveLinearPool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastCreatedPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class AaveLinearPoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): AaveLinearPoolFactoryInterface {\n    return new utils.Interface(_abi) as AaveLinearPoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AaveLinearPoolFactory {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as AaveLinearPoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { AaveWrapping, AaveWrappingInterface } from \"../AaveWrapping\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveVault\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStaticATokenLM\",\n        name: \"staticToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"toUnderlying\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapAaveStaticToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStaticATokenLM\",\n        name: \"staticToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"fromUnderlying\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapAaveDynamicToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class AaveWrapping__factory {\n  static readonly abi = _abi;\n  static createInterface(): AaveWrappingInterface {\n    return new utils.Interface(_abi) as AaveWrappingInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AaveWrapping {\n    return new Contract(address, _abi, signerOrProvider) as AaveWrapping;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Authoriser, AuthoriserInterface } from \"../Authoriser\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"admin\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"actionId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"canPerform\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"roles\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRoles\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"roles\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"accounts\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"grantRolesToMany\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"roles\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRoles\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"roles\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"accounts\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"revokeRolesFromMany\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class Authoriser__factory {\n  static readonly abi = _abi;\n  static createInterface(): AuthoriserInterface {\n    return new utils.Interface(_abi) as AuthoriserInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Authoriser {\n    return new Contract(address, _abi, signerOrProvider) as Authoriser;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  BalancerHelpers,\n  BalancerHelpersInterface,\n} from \"../BalancerHelpers\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"_vault\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"minAmountsOut\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.ExitPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"maxAmountsIn\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.JoinPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BalancerHelpers__factory {\n  static readonly abi = _abi;\n  static createInterface(): BalancerHelpersInterface {\n    return new utils.Interface(_abi) as BalancerHelpersInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BalancerHelpers {\n    return new Contract(address, _abi, signerOrProvider) as BalancerHelpers;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  BalancerMinter,\n  BalancerMinterInterface,\n} from \"../BalancerMinter\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IBalancerTokenAdmin\",\n        name: \"tokenAdmin\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IGaugeController\",\n        name: \"gaugeController\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"minted\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Minted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approval\",\n        type: \"bool\",\n      },\n    ],\n    name: \"MinterApprovalSet\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowed_to_mint_for\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBalancerToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBalancerTokenAdmin\",\n    outputs: [\n      {\n        internalType: \"contract IBalancerTokenAdmin\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGaugeController\",\n    outputs: [\n      {\n        internalType: \"contract IGaugeController\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMinterApproval\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"mintFor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"gauges\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"mintMany\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"gauges\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"mintManyFor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"mint_for\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[8]\",\n        name: \"gauges\",\n        type: \"address[8]\",\n      },\n    ],\n    name: \"mint_many\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n    ],\n    name: \"minted\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approval\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setMinterApproval\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approval\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"setMinterApprovalWithSignature\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"toggle_approve_mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BalancerMinter__factory {\n  static readonly abi = _abi;\n  static createInterface(): BalancerMinterInterface {\n    return new utils.Interface(_abi) as BalancerMinterInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BalancerMinter {\n    return new Contract(address, _abi, signerOrProvider) as BalancerMinter;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  BalancerPoolDataQueries,\n  BalancerPoolDataQueriesInterface,\n} from \"../BalancerPoolDataQueries\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"_vault\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getAmpForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getInRecoveryModeForPools\",\n    outputs: [\n      {\n        internalType: \"bool[]\",\n        name: \"\",\n        type: \"bool[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getIsPausedForPools\",\n    outputs: [\n      {\n        internalType: \"bool[]\",\n        name: \"\",\n        type: \"bool[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getLinearTargetsForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[][]\",\n        name: \"\",\n        type: \"uint256[][]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getNormalizedWeightsForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[][]\",\n        name: \"\",\n        type: \"uint256[][]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"poolIds\",\n        type: \"bytes32[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"loadTokenBalanceUpdatesAfterBlock\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadTotalSupply\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadSwapFees\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadLinearWrappedTokenRates\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadLinearTargets\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadNormalizedWeights\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadScalingFactors\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadAmps\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadRates\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"enum TotalSupplyType[]\",\n            name: \"totalSupplyTypes\",\n            type: \"uint8[]\",\n          },\n          {\n            internalType: \"enum SwapFeeType[]\",\n            name: \"swapFeeTypes\",\n            type: \"uint8[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"linearPoolIdxs\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"weightedPoolIdxs\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"scalingFactorPoolIdxs\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"ampPoolIdxs\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"ratePoolIdxs\",\n            type: \"uint256[]\",\n          },\n        ],\n        internalType: \"struct PoolDataQueryConfig\",\n        name: \"config\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getPoolData\",\n    outputs: [\n      {\n        internalType: \"uint256[][]\",\n        name: \"balances\",\n        type: \"uint256[][]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"totalSupplies\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"swapFees\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"linearWrappedTokenRates\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[][]\",\n        name: \"linearTargets\",\n        type: \"uint256[][]\",\n      },\n      {\n        internalType: \"uint256[][]\",\n        name: \"weights\",\n        type: \"uint256[][]\",\n      },\n      {\n        internalType: \"uint256[][]\",\n        name: \"scalingFactors\",\n        type: \"uint256[][]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amps\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"rates\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"ignoreIdxs\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"poolIds\",\n        type: \"bytes32[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"loadInRecoveryMode\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"loadIsPaused\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct PoolStatusQueryConfig\",\n        name: \"config\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getPoolStatus\",\n    outputs: [\n      {\n        internalType: \"bool[]\",\n        name: \"isPaused\",\n        type: \"bool[]\",\n      },\n      {\n        internalType: \"bool[]\",\n        name: \"inRecoveryMode\",\n        type: \"bool[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"poolIds\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPoolTokenBalancesWithUpdatesAfterBlock\",\n    outputs: [\n      {\n        internalType: \"uint256[][]\",\n        name: \"\",\n        type: \"uint256[][]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getRateForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getScalingFactorsForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[][]\",\n        name: \"\",\n        type: \"uint256[][]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"enum SwapFeeType[]\",\n        name: \"swapFeeTypes\",\n        type: \"uint8[]\",\n      },\n    ],\n    name: \"getSwapFeePercentageForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"enum TotalSupplyType[]\",\n        name: \"totalSupplyTypes\",\n        type: \"uint8[]\",\n      },\n    ],\n    name: \"getTotalSupplyForPools\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"poolAddresses\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getWrappedTokenRateForLinearPools\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BalancerPoolDataQueries__factory {\n  static readonly abi = _abi;\n  static createInterface(): BalancerPoolDataQueriesInterface {\n    return new utils.Interface(_abi) as BalancerPoolDataQueriesInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BalancerPoolDataQueries {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as BalancerPoolDataQueries;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  BalancerRelayer,\n  BalancerRelayerInterface,\n} from \"../BalancerRelayer\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"libraryAddress\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"getLibrary\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nexport class BalancerRelayer__factory {\n  static readonly abi = _abi;\n  static createInterface(): BalancerRelayerInterface {\n    return new utils.Interface(_abi) as BalancerRelayerInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BalancerRelayer {\n    return new Contract(address, _abi, signerOrProvider) as BalancerRelayer;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  BatchRelayerLibrary,\n  BatchRelayerLibraryInterface,\n} from \"../BatchRelayerLibrary\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wstETH\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBalancerMinter\",\n        name: \"minter\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveVault\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256[]\",\n        name: \"limits\",\n        type: \"int256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"index\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"key\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct VaultActions.OutputReference[]\",\n        name: \"outputReferences\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"batchSwap\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"enum VaultActions.PoolKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"minAmountsOut\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.ExitPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"index\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"key\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct VaultActions.OutputReference[]\",\n        name: \"outputReferences\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"exitPool\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakingLiquidityGauge[]\",\n        name: \"gauges\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"gaugeClaimRewards\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakingLiquidityGauge\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"gaugeDeposit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"gauges\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"gaugeMint\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"approval\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"gaugeSetMinterApproval\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakingLiquidityGauge\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"gaugeWithdraw\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getEntrypoint\",\n    outputs: [\n      {\n        internalType: \"contract IBalancerRelayer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"enum VaultActions.PoolKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"maxAmountsIn\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.JoinPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"joinPool\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.UserBalanceOpKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"asset\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IVault.UserBalanceOp[]\",\n        name: \"ops\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"manageUserBalance\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"ref\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"peekChainedReferenceValue\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"relayer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"authorisation\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"setRelayerApproval\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stakeETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stakeETHAndWrap\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.SingleSwap\",\n        name: \"singleSwap\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swap\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStaticATokenLM\",\n        name: \"staticToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"toUnderlying\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapAaveStaticToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract ICToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapCompoundV2\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC4626\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapERC4626\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IEulerToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapEuler\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IGearboxDieselToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dieselAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapGearbox\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IReaperTokenVault\",\n        name: \"vaultToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapReaperVaultToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IShareToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapShareToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract ITetuSmartVault\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapTetu\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IUnbuttonToken\",\n        name: \"wrapperToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapUnbuttonToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapWstETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IYearnTokenVault\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unwrapYearn\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20Permit\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"vaultPermit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20PermitDAI\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"vaultPermitDAI\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStaticATokenLM\",\n        name: \"staticToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"fromUnderlying\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapAaveDynamicToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract ICToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapCompoundV2\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC4626\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapERC4626\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IEulerToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"eulerProtocol\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapEuler\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IGearboxDieselToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mainAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapGearbox\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IReaperTokenVault\",\n        name: \"vaultToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapReaperVaultToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IShareToken\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapShareToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapStETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract ITetuSmartVault\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapTetu\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IUnbuttonToken\",\n        name: \"wrapperToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"uAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapUnbuttonToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IYearnTokenVault\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"outputReference\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"wrapYearn\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BatchRelayerLibrary__factory {\n  static readonly abi = _abi;\n  static createInterface(): BatchRelayerLibraryInterface {\n    return new utils.Interface(_abi) as BatchRelayerLibraryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BatchRelayerLibrary {\n    return new Contract(address, _abi, signerOrProvider) as BatchRelayerLibrary;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  ComposableStablePool,\n  ComposableStablePoolInterface,\n} from \"../ComposableStablePool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"contract IVault\",\n            name: \"vault\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IProtocolFeePercentagesProvider\",\n            name: \"protocolFeeProvider\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20[]\",\n            name: \"tokens\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"contract IRateProvider[]\",\n            name: \"rateProviders\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"tokenRateCacheDurations\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"exemptFromYieldProtocolFeeFlags\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amplificationParameter\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pauseWindowDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"bufferPeriodDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"owner\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct ComposableStablePool.NewPoolParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startValue\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endValue\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AmpUpdateStarted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"currentValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AmpUpdateStopped\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"feeType\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"protocolFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ProtocolFeePercentageCacheUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"rate\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenRateCacheUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IRateProvider\",\n        name: \"provider\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"cacheDuration\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenRateProviderSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getActualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAmplificationParameter\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isUpdating\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"precision\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastJoinExitData\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lastJoinExitAmplification\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastPostJoinExitInvariant\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMinimumBpt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"feeType\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProtocolFeePercentageCache\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolSwapFeeDelegation\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRateProviders\",\n    outputs: [\n      {\n        internalType: \"contract IRateProvider[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getTokenRateCache\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"rate\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"oldRate\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"duration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expires\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTokenExemptFromYieldProtocolFee\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"swapRequest\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"poolConfig\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"setAssetManagerPoolConfig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"duration\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTokenRateCacheDuration\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"rawEndValue\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"startAmplificationParameterUpdate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stopAmplificationParameterUpdate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateProtocolFeePercentageCache\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"updateTokenRateCache\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class ComposableStablePool__factory {\n  static readonly abi = _abi;\n  static createInterface(): ComposableStablePoolInterface {\n    return new utils.Interface(_abi) as ComposableStablePoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ComposableStablePool {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as ComposableStablePool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  ComposableStablePoolFactory,\n  ComposableStablePoolFactoryInterface,\n} from \"../ComposableStablePoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amplificationParameter\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IRateProvider[]\",\n        name: \"rateProviders\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"tokenRateCacheDurations\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"bool[]\",\n        name: \"exemptFromYieldProtocolFeeFlags\",\n        type: \"bool[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"contract ComposableStablePool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class ComposableStablePoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): ComposableStablePoolFactoryInterface {\n    return new utils.Interface(_abi) as ComposableStablePoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ComposableStablePoolFactory {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as ComposableStablePoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  ConvergentCurvePool,\n  ConvergentCurvePoolInterface,\n} from \"../ConvergentCurvePool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_underlying\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_bond\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_expiration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_unitSeconds\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_percentFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_percentFeeGov\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_governance\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"collectedBase\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"collectedBond\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"remainingBase\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"remainingBond\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeeCollection\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"FEE_BOUND\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"bond\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"bondDecimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseApproval\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"expiration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feesBond\",\n    outputs: [\n      {\n        internalType: \"uint128\",\n        name: \"\",\n        type: \"uint128\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feesUnderlying\",\n    outputs: [\n      {\n        internalType: \"uint128\",\n        name: \"\",\n        type: \"uint128\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"governance\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseApproval\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"currentBalances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFeeAmounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"currentBalances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFeeAmounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"swapRequest\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"currentBalanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"currentBalanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"percentFee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"percentFeeGov\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountX\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"reserveX\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"reserveY\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"out\",\n        type: \"bool\",\n      },\n    ],\n    name: \"solveTradeInvariant\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"underlying\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"underlyingDecimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unitSeconds\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class ConvergentCurvePool__factory {\n  static readonly abi = _abi;\n  static createInterface(): ConvergentCurvePoolInterface {\n    return new utils.Interface(_abi) as ConvergentCurvePoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ConvergentCurvePool {\n    return new Contract(address, _abi, signerOrProvider) as ConvergentCurvePool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { ERC20, ERC20Interface } from \"../ERC20\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n] as const;\n\nexport class ERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC20Interface {\n    return new utils.Interface(_abi) as ERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  ERC4626LinearPool,\n  ERC4626LinearPoolInterface,\n} from \"../ERC4626LinearPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"contract IVault\",\n            name: \"vault\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"mainToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"wrappedToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"assetManager\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"upperTarget\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pauseWindowDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"bufferPeriodDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"version\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct ERC4626LinearPool.ConstructorArgs\",\n        name: \"args\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TargetsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTargets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVirtualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newLowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newUpperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTargets\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class ERC4626LinearPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC4626LinearPoolInterface {\n    return new utils.Interface(_abi) as ERC4626LinearPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC4626LinearPool {\n    return new Contract(address, _abi, signerOrProvider) as ERC4626LinearPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  ERC4626LinearPoolFactory,\n  ERC4626LinearPoolFactoryInterface,\n} from \"../ERC4626LinearPoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBalancerQueries\",\n        name: \"queries\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"initialPauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Erc4626LinearPoolCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"mainToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"contract LinearPool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastCreatedPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class ERC4626LinearPoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC4626LinearPoolFactoryInterface {\n    return new utils.Interface(_abi) as ERC4626LinearPoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC4626LinearPoolFactory {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as ERC4626LinearPoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  EulerLinearPool,\n  EulerLinearPoolInterface,\n} from \"../EulerLinearPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"contract IVault\",\n            name: \"vault\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"mainToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"wrappedToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"assetManager\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"upperTarget\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pauseWindowDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"bufferPeriodDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"version\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct EulerLinearPool.ConstructorArgs\",\n        name: \"args\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TargetsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTargets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVirtualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newLowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newUpperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTargets\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class EulerLinearPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): EulerLinearPoolInterface {\n    return new utils.Interface(_abi) as EulerLinearPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): EulerLinearPool {\n    return new Contract(address, _abi, signerOrProvider) as EulerLinearPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  EulerLinearPoolFactory,\n  EulerLinearPoolFactoryInterface,\n} from \"../EulerLinearPoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBalancerQueries\",\n        name: \"queries\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"initialPauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_eulerProtocol\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"EulerLinearPoolCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"mainToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"contract LinearPool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"eulerProtocol\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastCreatedPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class EulerLinearPoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): EulerLinearPoolFactoryInterface {\n    return new utils.Interface(_abi) as EulerLinearPoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): EulerLinearPoolFactory {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as EulerLinearPoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { FXPool, FXPoolInterface } from \"../FXPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"_assetsToRegister\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_protocolPercentFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_symbol\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"numeraire\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"weight\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AssetIncluded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"derivative\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"numeraire\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"assimilator\",\n        type: \"address\",\n      },\n    ],\n    name: \"AssimilatorIncluded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newCollector\",\n        type: \"address\",\n      },\n    ],\n    name: \"ChangeCollectorAddress\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"isEmergency\",\n        type: \"bool\",\n      },\n    ],\n    name: \"EmergencyAlarm\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lptAmountBurned\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"amountsWithdrawn\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"EmergencyWithdraw\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"feesCollected\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeesAccrued\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"feesCollected\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeesCollected\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lptAmountBurned\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"amountsWithdrawn\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"OnExitPool\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lptAmountMinted\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"amountsDeposited\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"OnJoinPool\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"alpha\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"beta\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"delta\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"epsilon\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lambda\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ParametersSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"updater\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newProtocolPercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ProtocolFeeShareUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"origin\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"originAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"targetAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Trade\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_derivative\",\n        type: \"address\",\n      },\n    ],\n    name: \"assimilator\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"assimilator_\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"collectorAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"curve\",\n    outputs: [\n      {\n        internalType: \"int128\",\n        name: \"alpha\",\n        type: \"int128\",\n      },\n      {\n        internalType: \"int128\",\n        name: \"beta\",\n        type: \"int128\",\n      },\n      {\n        internalType: \"int128\",\n        name: \"delta\",\n        type: \"int128\",\n      },\n      {\n        internalType: \"int128\",\n        name: \"epsilon\",\n        type: \"int128\",\n      },\n      {\n        internalType: \"int128\",\n        name: \"lambda\",\n        type: \"int128\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"cap\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"fxPoolAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"derivatives\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"emergency\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"_assets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"_assetWeights\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"liquidity\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"total_\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"individual_\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"numeraires\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFeeAmounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFeeAmounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"swapRequest\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"protocolPercentFee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"reserves\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_cap\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setCap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_collectorAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"setCollectorAddress\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"_emergency\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setEmergency\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_alpha\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_beta\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_feeAtHalt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_epsilon\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_lambda\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setParams\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"setPaused\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_protocolPercentFee\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setProtocolPercentFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalUnclaimedFeesInNumeraire\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"totalDepositNumeraire\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"viewDeposit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"viewParameters\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"alpha_\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"beta_\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"delta_\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"epsilon_\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lambda_\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_curvesToBurn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"viewWithdraw\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class FXPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): FXPoolInterface {\n    return new utils.Interface(_abi) as FXPoolInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): FXPool {\n    return new Contract(address, _abi, signerOrProvider) as FXPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  GaugeClaimHelper,\n  GaugeClaimHelperInterface,\n} from \"../GaugeClaimHelper\";\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"CLAIM_FREQUENCY\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IRewardsOnlyGauge\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimRewardsFromGauge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IRewardsOnlyGauge[]\",\n        name: \"gauges\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimRewardsFromGauges\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IRewardsOnlyGauge\",\n        name: \"gauge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPendingRewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class GaugeClaimHelper__factory {\n  static readonly abi = _abi;\n  static createInterface(): GaugeClaimHelperInterface {\n    return new utils.Interface(_abi) as GaugeClaimHelperInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): GaugeClaimHelper {\n    return new Contract(address, _abi, signerOrProvider) as GaugeClaimHelper;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  GearboxLinearPool,\n  GearboxLinearPoolInterface,\n} from \"../GearboxLinearPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"contract IVault\",\n            name: \"vault\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"mainToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"wrappedToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"assetManager\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"upperTarget\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pauseWindowDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"bufferPeriodDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"version\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct GearboxLinearPool.ConstructorArgs\",\n        name: \"args\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TargetsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTargets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVirtualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newLowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newUpperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTargets\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class GearboxLinearPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): GearboxLinearPoolInterface {\n    return new utils.Interface(_abi) as GearboxLinearPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): GearboxLinearPool {\n    return new Contract(address, _abi, signerOrProvider) as GearboxLinearPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  GearboxLinearPoolFactory,\n  GearboxLinearPoolFactoryInterface,\n} from \"../GearboxLinearPoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBalancerQueries\",\n        name: \"queries\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"initialPauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"GearboxLinearPoolCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"mainToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"contract GearboxLinearPool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastCreatedPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class GearboxLinearPoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): GearboxLinearPoolFactoryInterface {\n    return new utils.Interface(_abi) as GearboxLinearPoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): GearboxLinearPoolFactory {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as GearboxLinearPoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { GyroConfig, GyroConfigInterface } from \"../GyroConfig\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"previousValue\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ConfigChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"ConfigFrozen\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"ConfigUnset\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newGovernor\",\n        type: \"address\",\n      },\n    ],\n    name: \"GovernorChangeRequested\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"oldGovernor\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newGovernor\",\n        type: \"address\",\n      },\n    ],\n    name: \"GovernorChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"acceptGovernance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newGovernor\",\n        type: \"address\",\n      },\n    ],\n    name: \"changeGovernor\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"freeze\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"defaultValue\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getConfigMeta\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getUint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"governor\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"hasKey\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_governor\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"listKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"\",\n        type: \"bytes32[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pendingGovernor\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"newValue\",\n        type: \"address\",\n      },\n    ],\n    name: \"setAddress\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setUint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"unset\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class GyroConfig__factory {\n  static readonly abi = _abi;\n  static createInterface(): GyroConfigInterface {\n    return new utils.Interface(_abi) as GyroConfigInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): GyroConfig {\n    return new Contract(address, _abi, signerOrProvider) as GyroConfig;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { LidoRelayer, LidoRelayerInterface } from \"../LidoRelayer\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IwstETH\",\n        name: \"wstETH\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256[]\",\n        name: \"limits\",\n        type: \"int256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"batchSwap\",\n    outputs: [\n      {\n        internalType: \"int256[]\",\n        name: \"swapAmounts\",\n        type: \"int256[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"minAmountsOut\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.ExitPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exitPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getStETH\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWstETH\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"maxAmountsIn\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.JoinPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"joinPool\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.SingleSwap\",\n        name: \"singleSwap\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapAmount\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nexport class LidoRelayer__factory {\n  static readonly abi = _abi;\n  static createInterface(): LidoRelayerInterface {\n    return new utils.Interface(_abi) as LidoRelayerInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): LidoRelayer {\n    return new Contract(address, _abi, signerOrProvider) as LidoRelayer;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { LinearPool, LinearPoolInterface } from \"../LinearPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"mainToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TargetsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTargets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVirtualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"poolConfig\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"setAssetManagerPoolConfig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setPaused\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newLowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newUpperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTargets\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class LinearPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): LinearPoolInterface {\n    return new utils.Interface(_abi) as LinearPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): LinearPool {\n    return new Contract(address, _abi, signerOrProvider) as LinearPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  LiquidityGaugeV5,\n  LiquidityGaugeV5Interface,\n} from \"../LiquidityGaugeV5\";\n\nconst _abi = [\n  {\n    name: \"Deposit\",\n    inputs: [\n      {\n        name: \"provider\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"value\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Withdraw\",\n    inputs: [\n      {\n        name: \"provider\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"value\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"UpdateLiquidityLimit\",\n    inputs: [\n      {\n        name: \"user\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"original_balance\",\n        type: \"uint256\",\n        indexed: false,\n      },\n      {\n        name: \"original_supply\",\n        type: \"uint256\",\n        indexed: false,\n      },\n      {\n        name: \"working_balance\",\n        type: \"uint256\",\n        indexed: false,\n      },\n      {\n        name: \"working_supply\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Transfer\",\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Approval\",\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        name: \"veBoostProxy\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"deposit\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"deposit\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"deposit\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_claim_rewards\",\n        type: \"bool\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"withdraw\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"withdraw\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_claim_rewards\",\n        type: \"bool\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"claim_rewards\",\n    inputs: [],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"claim_rewards\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"claim_rewards\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_receiver\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"transferFrom\",\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"transfer\",\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"approve\",\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"permit\",\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_deadline\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_v\",\n        type: \"uint8\",\n      },\n      {\n        name: \"_r\",\n        type: \"bytes32\",\n      },\n      {\n        name: \"_s\",\n        type: \"bytes32\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"increaseAllowance\",\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_added_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"decreaseAllowance\",\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_subtracted_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"user_checkpoint\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"set_rewards_receiver\",\n    inputs: [\n      {\n        name: \"_receiver\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"kick\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"deposit_reward_token\",\n    inputs: [\n      {\n        name: \"_reward_token\",\n        type: \"address\",\n      },\n      {\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"add_reward\",\n    inputs: [\n      {\n        name: \"_reward_token\",\n        type: \"address\",\n      },\n      {\n        name: \"_distributor\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"set_reward_distributor\",\n    inputs: [\n      {\n        name: \"_reward_token\",\n        type: \"address\",\n      },\n      {\n        name: \"_distributor\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"set_killed\",\n    inputs: [\n      {\n        name: \"_is_killed\",\n        type: \"bool\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"claimed_reward\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"claimable_reward\",\n    inputs: [\n      {\n        name: \"_user\",\n        type: \"address\",\n      },\n      {\n        name: \"_reward_token\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"claimable_reward_write\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"claimable_tokens\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"integrate_checkpoint\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"future_epoch_time\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"inflation_rate\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"decimals\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"version\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"allowance\",\n    inputs: [\n      {\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"initialize\",\n    inputs: [\n      {\n        name: \"_lp_token\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"balanceOf\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"totalSupply\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"name\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"symbol\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"DOMAIN_SEPARATOR\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"nonces\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"factory\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"lp_token\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"is_killed\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"reward_count\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"reward_data\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            name: \"distributor\",\n            type: \"address\",\n          },\n          {\n            name: \"period_finish\",\n            type: \"uint256\",\n          },\n          {\n            name: \"rate\",\n            type: \"uint256\",\n          },\n          {\n            name: \"last_update\",\n            type: \"uint256\",\n          },\n          {\n            name: \"integral\",\n            type: \"uint256\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"rewards_receiver\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"reward_integral_for\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n      {\n        name: \"arg1\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"working_balances\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"working_supply\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"integrate_inv_supply_of\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"integrate_checkpoint_of\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"integrate_fraction\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"period\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"int128\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"reward_tokens\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"period_timestamp\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"integrate_inv_supply\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n] as const;\n\nexport class LiquidityGaugeV5__factory {\n  static readonly abi = _abi;\n  static createInterface(): LiquidityGaugeV5Interface {\n    return new utils.Interface(_abi) as LiquidityGaugeV5Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): LiquidityGaugeV5 {\n    return new Contract(address, _abi, signerOrProvider) as LiquidityGaugeV5;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Multicall, MulticallInterface } from \"../Multicall\";\n\nconst _abi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate\",\n    outputs: [\n      {\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        name: \"returnData\",\n        type: \"bytes[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class Multicall__factory {\n  static readonly abi = _abi;\n  static createInterface(): MulticallInterface {\n    return new utils.Interface(_abi) as MulticallInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Multicall {\n    return new Contract(address, _abi, signerOrProvider) as Multicall;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Multicall3, Multicall3Interface } from \"../Multicall3\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"returnData\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"allowFailure\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Call3[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate3\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"allowFailure\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Call3Value[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate3Value\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"blockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBasefee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"basefee\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getChainId\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainid\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockCoinbase\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"coinbase\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockDifficulty\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"difficulty\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockGasLimit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"gaslimit\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getEthBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryBlockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall3.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class Multicall3__factory {\n  static readonly abi = _abi;\n  static createInterface(): Multicall3Interface {\n    return new utils.Interface(_abi) as Multicall3Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Multicall3 {\n    return new Contract(address, _abi, signerOrProvider) as Multicall3;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { StablePool, StablePoolInterface } from \"../StablePool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amplificationParameter\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startValue\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endValue\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AmpUpdateStarted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"currentValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AmpUpdateStopped\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAmplificationParameter\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isUpdating\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"precision\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"swapRequest\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"poolConfig\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"setAssetManagerPoolConfig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setPaused\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"rawEndValue\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"startAmplificationParameterUpdate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stopAmplificationParameterUpdate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class StablePool__factory {\n  static readonly abi = _abi;\n  static createInterface(): StablePoolInterface {\n    return new utils.Interface(_abi) as StablePoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StablePool {\n    return new Contract(address, _abi, signerOrProvider) as StablePool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  StaticATokenRateProvider,\n  StaticATokenRateProviderInterface,\n} from \"../StaticATokenRateProvider\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IStaticAToken\",\n        name: \"_waToken\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"waToken\",\n    outputs: [\n      {\n        internalType: \"contract IStaticAToken\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class StaticATokenRateProvider__factory {\n  static readonly abi = _abi;\n  static createInterface(): StaticATokenRateProviderInterface {\n    return new utils.Interface(_abi) as StaticATokenRateProviderInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StaticATokenRateProvider {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as StaticATokenRateProvider;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Vault, VaultInterface } from \"../Vault\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"authorizer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IWETH\",\n        name: \"weth\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IAuthorizer\",\n        name: \"newAuthorizer\",\n        type: \"address\",\n      },\n    ],\n    name: \"AuthorizerChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ExternalBalanceTransfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IFlashLoanRecipient\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"feeAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FlashLoan\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"delta\",\n        type: \"int256\",\n      },\n    ],\n    name: \"InternalBalanceChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256[]\",\n        name: \"deltas\",\n        type: \"int256[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"protocolFeeAmounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"PoolBalanceChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"assetManager\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"cashDelta\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"managedDelta\",\n        type: \"int256\",\n      },\n    ],\n    name: \"PoolBalanceManaged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"poolAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IVault.PoolSpecialization\",\n        name: \"specialization\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"PoolRegistered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"relayer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RelayerApprovalChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"tokenIn\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"tokenOut\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amountIn\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Swap\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"TokensDeregistered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"address[]\",\n        name: \"assetManagers\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"TokensRegistered\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"WETH\",\n    outputs: [\n      {\n        internalType: \"contract IWETH\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256[]\",\n        name: \"limits\",\n        type: \"int256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"batchSwap\",\n    outputs: [\n      {\n        internalType: \"int256[]\",\n        name: \"assetDeltas\",\n        type: \"int256[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"deregisterTokens\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"minAmountsOut\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.ExitPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exitPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IFlashLoanRecipient\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"flashLoan\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getInternalBalance\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IVault.PoolSpecialization\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPoolTokenInfo\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cash\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"managed\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"assetManager\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPoolTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract ProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"relayer\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasApprovedRelayer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"maxAmountsIn\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.JoinPoolRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"joinPool\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.PoolBalanceOpKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IVault.PoolBalanceOp[]\",\n        name: \"ops\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"managePoolBalance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.UserBalanceOpKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"asset\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IVault.UserBalanceOp[]\",\n        name: \"ops\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"manageUserBalance\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"queryBatchSwap\",\n    outputs: [\n      {\n        internalType: \"int256[]\",\n        name: \"\",\n        type: \"int256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.PoolSpecialization\",\n        name: \"specialization\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"registerPool\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"assetManagers\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"registerTokens\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"newAuthorizer\",\n        type: \"address\",\n      },\n    ],\n    name: \"setAuthorizer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setPaused\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"relayer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setRelayerApproval\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.SingleSwap\",\n        name: \"singleSwap\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountCalculated\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nexport class Vault__factory {\n  static readonly abi = _abi;\n  static createInterface(): VaultInterface {\n    return new utils.Interface(_abi) as VaultInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Vault {\n    return new Contract(address, _abi, signerOrProvider) as Vault;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { WeightedPool, WeightedPoolInterface } from \"../WeightedPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20[]\",\n            name: \"tokens\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"normalizedWeights\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"contract IRateProvider[]\",\n            name: \"rateProviders\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"assetManagers\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct WeightedPool.NewPoolParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"version\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"feeType\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"protocolFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ProtocolFeePercentageCacheUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getATHRateProduct\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getActualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getInvariant\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastPostJoinExitInvariant\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getNormalizedWeights\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"feeType\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProtocolFeePercentageCache\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolSwapFeeDelegation\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRateProviders\",\n    outputs: [\n      {\n        internalType: \"contract IRateProvider[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"poolConfig\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"setAssetManagerPoolConfig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateProtocolFeePercentageCache\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class WeightedPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): WeightedPoolInterface {\n    return new utils.Interface(_abi) as WeightedPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): WeightedPool {\n    return new Contract(address, _abi, signerOrProvider) as WeightedPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  WeightedPoolFactory,\n  WeightedPoolFactoryInterface,\n} from \"../WeightedPoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"normalizedWeights\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"contract IRateProvider[]\",\n        name: \"rateProviders\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class WeightedPoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): WeightedPoolFactoryInterface {\n    return new utils.Interface(_abi) as WeightedPoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): WeightedPoolFactory {\n    return new Contract(address, _abi, signerOrProvider) as WeightedPoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  YearnLinearPool,\n  YearnLinearPoolInterface,\n} from \"../YearnLinearPool\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"contract IVault\",\n            name: \"vault\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"symbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"mainToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"wrappedToken\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"assetManager\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"upperTarget\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFeePercentage\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"pauseWindowDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"bufferPeriodDuration\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"string\",\n            name: \"version\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct YearnLinearPool.ConstructorArgs\",\n        name: \"args\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"RecoveryModeStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TargetsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableRecoveryMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBptIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeparator\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMainToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNextNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeesCollector\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeesCollector\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getScalingFactors\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTargets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"lowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVirtualSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWrappedTokenRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inRecoveryMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFees\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"indexOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newLowerTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newUpperTarget\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTargets\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class YearnLinearPool__factory {\n  static readonly abi = _abi;\n  static createInterface(): YearnLinearPoolInterface {\n    return new utils.Interface(_abi) as YearnLinearPoolInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): YearnLinearPool {\n    return new Contract(address, _abi, signerOrProvider) as YearnLinearPool;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  YearnLinearPoolFactory,\n  YearnLinearPoolFactoryInterface,\n} from \"../YearnLinearPoolFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"protocolFeeProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBalancerQueries\",\n        name: \"queries\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"factoryVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"poolVersion\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"initialPauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"FactoryDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"PoolCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"YearnLinearPoolCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"mainToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"wrappedToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"upperTarget\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"contract LinearPool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disable\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCode\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCreationCodeContracts\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractA\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"contractB\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastCreatedPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPauseConfiguration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowDuration\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodDuration\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolVersion\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProtocolFeePercentagesProvider\",\n    outputs: [\n      {\n        internalType: \"contract IProtocolFeePercentagesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"pool\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPoolFromFactory\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class YearnLinearPoolFactory__factory {\n  static readonly abi = _abi;\n  static createInterface(): YearnLinearPoolFactoryInterface {\n    return new utils.Interface(_abi) as YearnLinearPoolFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): YearnLinearPoolFactory {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as YearnLinearPoolFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { GyroEV2, GyroEV2Interface, GyroECLPPool } from \"../GyroEV2\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"contract IVault\",\n                name: \"vault\",\n                type: \"address\",\n              },\n              {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n              },\n              {\n                internalType: \"string\",\n                name: \"symbol\",\n                type: \"string\",\n              },\n              {\n                internalType: \"contract IERC20\",\n                name: \"token0\",\n                type: \"address\",\n              },\n              {\n                internalType: \"contract IERC20\",\n                name: \"token1\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"swapFeePercentage\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"pauseWindowDuration\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"bufferPeriodDuration\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"bool\",\n                name: \"oracleEnabled\",\n                type: \"bool\",\n              },\n              {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct ExtensibleWeightedPool2Tokens.NewPoolParams\",\n            name: \"baseParams\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"alpha\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"beta\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"c\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"s\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"lambda\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct GyroECLPMath.Params\",\n            name: \"eclpParams\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                components: [\n                  {\n                    internalType: \"int256\",\n                    name: \"x\",\n                    type: \"int256\",\n                  },\n                  {\n                    internalType: \"int256\",\n                    name: \"y\",\n                    type: \"int256\",\n                  },\n                ],\n                internalType: \"struct GyroECLPMath.Vector2\",\n                name: \"tauAlpha\",\n                type: \"tuple\",\n              },\n              {\n                components: [\n                  {\n                    internalType: \"int256\",\n                    name: \"x\",\n                    type: \"int256\",\n                  },\n                  {\n                    internalType: \"int256\",\n                    name: \"y\",\n                    type: \"int256\",\n                  },\n                ],\n                internalType: \"struct GyroECLPMath.Vector2\",\n                name: \"tauBeta\",\n                type: \"tuple\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"u\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"v\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"w\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"z\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"dSq\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct GyroECLPMath.DerivedParams\",\n            name: \"derivedEclpParams\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"address\",\n            name: \"rateProvider0\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"rateProvider1\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"capManager\",\n            type: \"address\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bool\",\n                name: \"capEnabled\",\n                type: \"bool\",\n              },\n              {\n                internalType: \"uint120\",\n                name: \"perAddressCap\",\n                type: \"uint120\",\n              },\n              {\n                internalType: \"uint128\",\n                name: \"globalCap\",\n                type: \"uint128\",\n              },\n            ],\n            internalType: \"struct ICappedLiquidity.CapParams\",\n            name: \"capParams\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"address\",\n            name: \"pauseManager\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct GyroECLPPool.GyroParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"configAddress\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"capManager\",\n        type: \"address\",\n      },\n    ],\n    name: \"CapManagerUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"capEnabled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint120\",\n            name: \"perAddressCap\",\n            type: \"uint120\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"globalCap\",\n            type: \"uint128\",\n          },\n        ],\n        indexed: false,\n        internalType: \"struct ICappedLiquidity.CapParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"CapParamsUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"derivedParamsValidated\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ECLPDerivedParamsValidated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paramsValidated\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ECLPParamsValidated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"invariantAfterJoin\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"InvariantAterInitializeJoin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"oldInvariant\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newInvariant\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"InvariantOldAndNew\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"enabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"OracleEnabledChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"oracleUpdatedIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"OracleIndexUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"oldPauseManager\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newPauseManager\",\n        type: \"address\",\n      },\n    ],\n    name: \"PauseManagerChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"PausedLocally\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"PausedStateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapFeePercentageChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"x\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"y\",\n            type: \"int256\",\n          },\n        ],\n        indexed: false,\n        internalType: \"struct GyroECLPMath.Vector2\",\n        name: \"invariant\",\n        type: \"tuple\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapParams\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"UnpausedLocally\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_dSq\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_paramsAlpha\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_paramsBeta\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_paramsC\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_paramsLambda\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_paramsS\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_tauAlphaX\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_tauAlphaY\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_tauBetaX\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_tauBetaY\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_u\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_v\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_w\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_z\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"capManager\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"capParams\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"capEnabled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint120\",\n            name: \"perAddressCap\",\n            type: \"uint120\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"globalCap\",\n            type: \"uint128\",\n          },\n        ],\n        internalType: \"struct ICappedLiquidity.CapParams\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_pauseManager\",\n        type: \"address\",\n      },\n    ],\n    name: \"changePauseManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"startIndex\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"endIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"dirtyUninitializedOracleSamples\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableOracle\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getECLPParams\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"alpha\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"beta\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"c\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"s\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"lambda\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct GyroECLPMath.Params\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"x\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"y\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct GyroECLPMath.Vector2\",\n            name: \"tauAlpha\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"x\",\n                type: \"int256\",\n              },\n              {\n                internalType: \"int256\",\n                name: \"y\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct GyroECLPMath.Vector2\",\n            name: \"tauBeta\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"u\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"v\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"w\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"z\",\n            type: \"int256\",\n          },\n          {\n            internalType: \"int256\",\n            name: \"dSq\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct GyroECLPMath.DerivedParams\",\n        name: \"d\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getInvariant\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLargestSafeQueryWindow\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastInvariant\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IPriceOracle.Variable\",\n        name: \"variable\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getLatest\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMiscData\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"logInvariant\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"logTotalSupply\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"oracleSampleCreationTimestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"oracleIndex\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"oracleEnabled\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getNormalizedWeights\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IPriceOracle.Variable\",\n            name: \"variable\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"ago\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IPriceOracle.OracleAccumulatorQuery[]\",\n        name: \"queries\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"getPastAccumulators\",\n    outputs: [\n      {\n        internalType: \"int256[]\",\n        name: \"results\",\n        type: \"int256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPausedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"pauseWindowEndTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bufferPeriodEndTime\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPoolId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"spotPrice\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getSample\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"logPairPrice\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"accLogPairPrice\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"logBptPrice\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"accLogBptPrice\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"logInvariant\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"accLogInvariant\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSwapFeePercentage\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IPriceOracle.Variable\",\n            name: \"variable\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"secs\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"ago\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IPriceOracle.OracleAverageQuery[]\",\n        name: \"queries\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"getTimeWeightedAverage\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"results\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTokenRates\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"rate0\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rate1\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTotalSamples\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"gyroConfig\",\n    outputs: [\n      {\n        internalType: \"contract IGyroConfig\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onExitPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"onJoinPool\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"dueProtocolFeeAmounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IERC20\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"lastChangeBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IPoolSwapStructs.SwapRequest\",\n        name: \"request\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"balanceTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"onSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pauseManager\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryExit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsOut\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"poolId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"balances\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"protocolSwapFeePercentage\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"userData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"queryJoin\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"bptOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountsIn\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rateProvider0\",\n    outputs: [\n      {\n        internalType: \"contract IRateProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rateProvider1\",\n    outputs: [\n      {\n        internalType: \"contract IRateProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_capManager\",\n        type: \"address\",\n      },\n    ],\n    name: \"setCapManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"capEnabled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint120\",\n            name: \"perAddressCap\",\n            type: \"uint120\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"globalCap\",\n            type: \"uint128\",\n          },\n        ],\n        internalType: \"struct ICappedLiquidity.CapParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setCapParams\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"paused\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setPaused\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"swapFeePercentage\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSwapFeePercentage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class GyroEV2__factory {\n  static readonly abi = _abi;\n  static createInterface(): GyroEV2Interface {\n    return new utils.Interface(_abi) as GyroEV2Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): GyroEV2 {\n    return new Contract(address, _abi, signerOrProvider) as GyroEV2;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { VeBal, VeBalInterface } from \"../VeBal\";\n\nconst _abi = [\n  {\n    name: \"Deposit\",\n    inputs: [\n      {\n        name: \"provider\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"value\",\n        type: \"uint256\",\n        indexed: false,\n      },\n      {\n        name: \"locktime\",\n        type: \"uint256\",\n        indexed: true,\n      },\n      {\n        name: \"type\",\n        type: \"int128\",\n        indexed: false,\n      },\n      {\n        name: \"ts\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Withdraw\",\n    inputs: [\n      {\n        name: \"provider\",\n        type: \"address\",\n        indexed: true,\n      },\n      {\n        name: \"value\",\n        type: \"uint256\",\n        indexed: false,\n      },\n      {\n        name: \"ts\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Supply\",\n    inputs: [\n      {\n        name: \"prevSupply\",\n        type: \"uint256\",\n        indexed: false,\n      },\n      {\n        name: \"supply\",\n        type: \"uint256\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"token_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_name\",\n        type: \"string\",\n      },\n      {\n        name: \"_symbol\",\n        type: \"string\",\n      },\n      {\n        name: \"_authorizer_adaptor\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"token\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"name\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"symbol\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"decimals\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"admin\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"commit_smart_wallet_checker\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"apply_smart_wallet_checker\",\n    inputs: [],\n    outputs: [],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"get_last_user_slope\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"int128\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"user_point_history__ts\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_idx\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"locked__end\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"checkpoint\",\n    inputs: [],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"deposit_for\",\n    inputs: [\n      {\n        name: \"_addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"create_lock\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_unlock_time\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"increase_amount\",\n    inputs: [\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"increase_unlock_time\",\n    inputs: [\n      {\n        name: \"_unlock_time\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"withdraw\",\n    inputs: [],\n    outputs: [],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"balanceOf\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"balanceOf\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_t\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"balanceOfAt\",\n    inputs: [\n      {\n        name: \"addr\",\n        type: \"address\",\n      },\n      {\n        name: \"_block\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"totalSupply\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"totalSupply\",\n    inputs: [\n      {\n        name: \"t\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"totalSupplyAt\",\n    inputs: [\n      {\n        name: \"_block\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"supply\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"locked\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"amount\",\n            type: \"int128\",\n          },\n          {\n            name: \"end\",\n            type: \"uint256\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"epoch\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"point_history\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"bias\",\n            type: \"int128\",\n          },\n          {\n            name: \"slope\",\n            type: \"int128\",\n          },\n          {\n            name: \"ts\",\n            type: \"uint256\",\n          },\n          {\n            name: \"blk\",\n            type: \"uint256\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"user_point_history\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n      {\n        name: \"arg1\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"bias\",\n            type: \"int128\",\n          },\n          {\n            name: \"slope\",\n            type: \"int128\",\n          },\n          {\n            name: \"ts\",\n            type: \"uint256\",\n          },\n          {\n            name: \"blk\",\n            type: \"uint256\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"user_point_epoch\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"slope_changes\",\n    inputs: [\n      {\n        name: \"arg0\",\n        type: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"int128\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"future_smart_wallet_checker\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"smart_wallet_checker\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n  },\n] as const;\n\nexport class VeBal__factory {\n  static readonly abi = _abi;\n  static createInterface(): VeBalInterface {\n    return new utils.Interface(_abi) as VeBalInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): VeBal {\n    return new Contract(address, _abi, signerOrProvider) as VeBal;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  VeDelegationProxy,\n  VeDelegationProxyInterface,\n} from \"../VeDelegationProxy\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"votingEscrow\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IVeDelegation\",\n        name: \"delegation\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"DelegationImplementationUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"adjustedBalanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"adjusted_balance_of\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"selector\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"getActionId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAuthorizer\",\n    outputs: [\n      {\n        internalType: \"contract IAuthorizer\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDelegationImplementation\",\n    outputs: [\n      {\n        internalType: \"contract IVeDelegation\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVault\",\n    outputs: [\n      {\n        internalType: \"contract IVault\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVotingEscrow\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"killDelegation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IVeDelegation\",\n        name: \"delegation\",\n        type: \"address\",\n      },\n    ],\n    name: \"setDelegation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class VeDelegationProxy__factory {\n  static readonly abi = _abi;\n  static createInterface(): VeDelegationProxyInterface {\n    return new utils.Interface(_abi) as VeDelegationProxyInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): VeDelegationProxy {\n    return new Contract(address, _abi, signerOrProvider) as VeDelegationProxy;\n  }\n}\n","import { SwapInfo } from '@balancer-labs/sor';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Vault } from '@/contracts/Vault';\n\nexport interface TokenAmounts {\n  [token: string]: string;\n}\n\nexport interface SwapsOptions {\n  maxPools?: number;\n  gasPrice?: string;\n  deadline?: string;\n  maxSlippage?: number;\n}\n\nexport enum SwapType {\n  SwapExactIn,\n  SwapExactOut,\n}\n\nexport type FundManagement = {\n  sender: string;\n  recipient: string;\n  fromInternalBalance: boolean;\n  toInternalBalance: boolean;\n};\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapType;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  request: SingleSwap;\n  funds: FundManagement;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n  value?: BigNumberish;\n  outputReference?: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: string;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapType;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n  value?: BigNumberish;\n  outputReferences?: { index: BigNumberish; key: BigNumberish }[];\n};\n\nexport interface SwapInput {\n  tokenIn: string;\n  tokenOut: string;\n  swapType: SwapType;\n  amount: string;\n}\n\nexport interface QuerySimpleFlashSwapParameters {\n  poolIds: string[];\n  assets: BatchSwap['assets'];\n  flashLoanAmount: string;\n  vaultContract: Vault;\n}\n\nexport interface SimpleFlashSwapParameters {\n  poolIds: string[];\n  assets: BatchSwap['assets'];\n  flashLoanAmount: string;\n  walletAddress: string;\n}\n\nexport interface QuerySimpleFlashSwapResponse {\n  profits: Record<string, string>;\n  isProfitable: boolean;\n}\n\nexport interface FindRouteParameters {\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumber;\n  gasPrice: BigNumber;\n  maxPools?: number;\n}\n\nexport interface BuildTransactionParameters {\n  userAddress: string;\n  recipient?: string;\n  swapInfo: SwapInfo;\n  kind: SwapType;\n  deadline: string;\n  maxSlippage: number;\n}\n\nexport interface SwapTransactionRequest {\n  to: string;\n  data: string;\n  value?: BigNumber;\n}\n\nexport interface SwapAttributes {\n  to: string;\n  functionName: string;\n  attributes: Swap | BatchSwap;\n  data: string;\n  value?: BigNumber;\n}\n","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\n\nimport { SwapType } from './types';\nimport { isSameAddress } from '@/lib/utils';\n\n/**\n * Helper to create limits using a defined slippage amount.\n * @param tokensIn - Array of token in addresses.\n * @param tokensOut - Array of token out addresses.\n * @param swapType - Type of swap - SwapExactIn or SwapExactOut\n * @param deltas - An array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array.\n * @param assets - array contains the addresses of all assets involved in the swaps.\n * @param slippage - Slippage to be applied. i.e. 5%=50000000000000000.\n * @returns Returns an array (same length as assets) with limits applied for each asset.\n */\nexport function getLimitsForSlippage(\n  tokensIn: string[],\n  tokensOut: string[],\n  swapType: SwapType,\n  deltas: BigNumberish[],\n  assets: string[],\n  slippage: BigNumberish\n): BigNumberish[] {\n  // Limits:\n  // +ve means max to send\n  // -ve mean min to receive\n  // For a multihop the intermediate tokens should be 0\n  const limits: BigNumber[] = new Array(assets.length).fill(Zero);\n\n  assets.forEach((token, i) => {\n    if (tokensIn.some((tokenIn) => isSameAddress(token, tokenIn))) {\n      // For SwapExactOut slippage is on tokenIn, i.e. amtIn + slippage\n      const slippageAmount = BigNumber.from(slippage).add(WeiPerEther);\n      limits[i] =\n        swapType === SwapType.SwapExactOut\n          ? limits[i].add(\n              BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)\n            )\n          : limits[i].add(deltas[i]);\n    }\n\n    if (tokensOut.some((tokenOut) => isSameAddress(token, tokenOut))) {\n      // For SwapExactIn slippage is on tokenOut, i.e. amtOut - slippage\n      const slippageAmount = WeiPerEther.sub(BigNumber.from(slippage));\n      limits[i] =\n        swapType === SwapType.SwapExactIn\n          ? limits[i].add(\n              BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)\n            )\n          : limits[i].add(deltas[i]);\n    }\n  });\n\n  return limits;\n}\n","import { Network } from './network';\nimport { BalancerNetworkConfig } from '@/types';\nimport addressesByNetwork from './addresses.json';\n\nexport const balancerVault = '0x6985436a0E5247A3E1dc29cdA9e1D89C5b59e26b';\n\n// Info fetched using npm package slot20\nexport const BPT_SLOT = 0;\nexport const BPT_DECIMALS = 18;\n\nexport const BALANCER_NETWORK_CONFIG: Record<Network, BalancerNetworkConfig> = {\n  [Network.MAINNET]: {\n    chainId: Network.MAINNET, //1\n    addresses: {\n      //Mainnet deployment addresses: https://docs.balancer.fi/reference/contracts/deployment-addresses/mainnet.html\n      contracts: {\n        multicall: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n        poolDataQueries: '0xf5CDdF6feD9C589f1Be04899F48f9738531daD59',\n        lidoRelayer: '0xdcdbf71A870cc60C6F9B621E28a7D3Ffd6Dd4965',\n        veBal: '0xC128a9954e6c874eA3d62ce62B468bA073093F25',\n        gaugeControllerCheckpointer:\n          '0x8e5698dc4897dc12243c8642e77b4f21349db97c',\n        veBalProxy: '0x6f5a2eE11E7a772AeB5114A20d0D7c0ff61EB8A0',\n        gyroConfigProxy: '0xac89cc9d78bbad7eb3a02601b4d65daa1f908aa6',\n        ...addressesByNetwork[Network.MAINNET].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.MAINNET].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.MAINNET].contracts.weth,\n        bbaUsd: addressesByNetwork[Network.MAINNET].tokens.bb_a_usd,\n        lbpRaisingTokens: [\n          '0x6b175474e89094c44da98b954eedeac495271d0f', // DAI\n          '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC\n          '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // WETH\n        ],\n        stETH: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n        wstETH: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n        veBal: '0xC128a9954e6c874eA3d62ce62B468bA073093F25',\n        ...addressesByNetwork[Network.MAINNET].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'ethereum',\n      },\n    },\n    pools: {\n      wETHwstETH: {\n        id: '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',\n        address: '0x32296969ef14eb0c6d29669c550d4a0449130230',\n      },\n    },\n    poolsToIgnore: [\n      '0xbd482ffb3e6e50dc1c437557c3bea2b68f3683ee0000000000000000000003c6', // a pool made by an external dev who was playing with a novel rate provider mechanism in production.\n      '0x0afbd58beca09545e4fb67772faf3858e610bcd00000000000000000000004b9',\n      '0xf22ff21e17157340575158ad7394e068048dd98b0000000000000000000004b8',\n      '0xf71d0774b214c4cf51e33eb3d30ef98132e4dbaa00000000000000000000046e',\n    ],\n    sorConnectingTokens: [\n      {\n        symbol: 'wEth',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      {\n        symbol: 'wstEth',\n        address: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n      },\n      {\n        symbol: 'DOLA',\n        address: '0x865377367054516e17014CcdED1e7d814EDC9ce4',\n      },\n      {\n        symbol: 'rEth',\n        address: '0xae78736cd615f374d3085123a210448e74fc6393',\n      },\n      {\n        symbol: 'ETHx',\n        address: '0xa35b1b31ce002fbf2058d22f30f95d405200a15b',\n      },\n    ],\n    sorTriPathMidPoolIds: [\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112', // rETH/WETH\n    ],\n  },\n  [Network.POLYGON]: {\n    chainId: Network.POLYGON, //137\n    addresses: {\n      //Polygon deployment addresses: https://docs.balancer.fi/reference/contracts/deployment-addresses/polygon.html\n      contracts: {\n        multicall: '0xa1B2b503959aedD81512C37e9dce48164ec6a94d',\n        poolDataQueries: '0x84813aA3e079A665C0B80F944427eE83cBA63617',\n        gaugeClaimHelper: '0xaeb406b0e430bf5ea2dc0b9fe62e4e53f74b3a33',\n        gyroConfigProxy: '0xfdc2e9e03f515804744a40d0f8d25c16e93fbe67',\n        ...addressesByNetwork[Network.POLYGON].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.POLYGON].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.POLYGON].contracts.weth,\n        lbpRaisingTokens: [\n          '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063', // DAI\n          '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', // USDC\n          '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', // WMATIC\n        ],\n        ...addressesByNetwork[Network.POLYGON].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-polygon-prune-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-polygon',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/ianlapham/polygon-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: '',\n        platformId: 'polygon-pos',\n      },\n    },\n    pools: {},\n    poolsToIgnore: [\n      '0x600bd01b6526611079e12e1ff93aba7a3e34226f0000000000000000000009e4', // This pool has rateProviders with incorrect scaling\n      '0xc31a37105b94ab4efca1954a14f059af11fcd9bb000000000000000000000455', // Stable pool with Convergence issues\n    ],\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n      },\n      {\n        symbol: 'bbrz2',\n        address: '0xe22483774bd8611be2ad2f4194078dac9159f4ba',\n      }, // Joins Stables<>BRZ via https://app.balancer.fi/#/polygon/pool/0x4a0b73f0d13ff6d43e304a174697e3d5cfd310a400020000000000000000091c\n    ],\n  },\n  [Network.ARBITRUM]: {\n    chainId: Network.ARBITRUM, //42161\n    //Arbitrum deployment addresses: https://docs.balancer.fi/reference/contracts/deployment-addresses/arbitrum.html\n    addresses: {\n      contracts: {\n        multicall: '0x269ff446d9892c9e19082564df3f5e8741e190a1',\n        poolDataQueries: '0x7Ba29fE8E83dd6097A7298075C4AFfdBda3121cC',\n        gaugeClaimHelper: '0xa0dabebaad1b243bbb243f933013d560819eb66f',\n        ...addressesByNetwork[Network.ARBITRUM].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.ARBITRUM].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.ARBITRUM].contracts.weth,\n        lbpRaisingTokens: [\n          '0xda10009cbd5d07dd0cecc66161fc93d7c9000da1', // DAI\n          '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC\n          '0x82af49447d8a07e3bd95bd0d56f35241523fbab1', // WETH\n        ],\n        ...addressesByNetwork[Network.ARBITRUM].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-arbitrum-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-arbitrum',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-one-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'arbitrum-one',\n      },\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n      },\n    ],\n    sorTriPathMidPoolIds: [\n      '0x178e029173417b1f9c8bc16dcec6f697bc323746000200000000000000000158', // wstEth/USDC.e to open up auraBAL/USDC\n      '0x0052688295413b32626d226a205b95cdb337de860002000000000000000003d1', // arb/USDC.e to open up aura/USDC\n      '0xa1a8bf131571a2139feb79401aa4a2e9482df6270002000000000000000004b4', // wstEth/Stable4Pool\n    ],\n  },\n  [Network.GOERLI]: {\n    chainId: Network.GOERLI, //5\n    //Goerli deployment addresses: https://docs.balancer.fi/reference/contracts/deployment-addresses/goerli.html\n    addresses: {\n      contracts: {\n        multicall: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e',\n        poolDataQueries: '0x6d3197d069F8F9f1Fe7e23665Bc64CB77ED8b089',\n        veBal: '0x33A99Dcc4C85C014cf12626959111D5898bbCAbF',\n        veBalProxy: '0xA1F107D1cD709514AE8A914eCB757E95f9cedB31',\n        erc4626LinearPoolFactory: '0xba240c856498e2d7a70af4911aafae0d6b565a5b',\n        aaveLinearPoolFactory: '0x76578ecf9a141296ec657847fb45b0585bcda3a6',\n        ...addressesByNetwork[Network.GOERLI].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.GOERLI].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.GOERLI].contracts.weth,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-goerli',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/blocklytics/goerli-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'ethereum',\n      },\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    ],\n  },\n  [Network.OPTIMISM]: {\n    chainId: Network.OPTIMISM, //10\n    // Optimism deployment addresses: https://docs.balancer.fi/reference/contracts/deployment-addresses/optimism.html\n    addresses: {\n      contracts: {\n        multicall: '0x2dc0e2aa608532da689e89e237df582b783e552c',\n        poolDataQueries: '0x6B5dA774890Db7B7b96C6f44e6a4b0F657399E2e',\n        gyroConfigProxy: '0x32acb44fc929339b9f16f0449525cc590d2a23f3',\n        ...addressesByNetwork[Network.OPTIMISM].contracts,\n      },\n      tokens: {\n        bal: '0xfe8b128ba8c78aabc59d4c64cee7ff28e9379921',\n        wrappedNativeAsset: addressesByNetwork[Network.OPTIMISM].contracts.weth,\n        lbpRaisingTokens: [\n          '0xda10009cbd5d07dd0cecc66161fc93d7c9000da1', // DAI\n          '0x7f5c764cbc14f9669b88837ca1490cca17c31607', // USDC\n          '0x4200000000000000000000000000000000000006', // WETH\n        ],\n        ...addressesByNetwork[Network.OPTIMISM].tokens,\n      },\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'optimistic-ethereum',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/beethovenxfi/beethovenx-optimism',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-optimism',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/lyra-finance/optimism-mainnet-blocks',\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x4200000000000000000000000000000000000006',\n      },\n    ],\n  },\n  [Network.GNOSIS]: {\n    chainId: Network.GNOSIS, //100\n    // Gnosis deployment addresses: https://docs.balancer.fi/reference/contracts/deployment-addresses/gnosis.html\n    addresses: {\n      contracts: {\n        multicall: '0xbb6fab6b627947dae0a75808250d8b2652952cb5',\n        poolDataQueries: '0x3f170631ed9821Ca51A59D996aB095162438DC10',\n        ...addressesByNetwork[Network.GNOSIS].contracts,\n      },\n      tokens: {\n        wrappedNativeAsset: addressesByNetwork[Network.GNOSIS].contracts.weth,\n        bal: addressesByNetwork[Network.GNOSIS].contracts.bal,\n        ...addressesByNetwork[Network.GNOSIS].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gnosis-chain-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-gnosis-chain',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'xdai',\n        platformId: 'xdai',\n      },\n    },\n    averageBlockTime: 5,\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n      },\n      {\n        symbol: 'wsEth',\n        address: '0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6',\n      },\n    ],\n    sorTriPathMidPoolIds: [\n      '0xeb30c85cc528537f5350cf5684ce6a4538e13394000200000000000000000059', // 3POOL_BPT/wstETH\n      '0x7644fa5d0ea14fcf3e813fdf93ca9544f8567655000000000000000000000066', // sBAL3\n    ],\n  },\n  [Network.FANTOM]: {\n    chainId: Network.FANTOM, //250\n    //Fantom deployment addresses: https://docs.beets.fi/technicals/deployments\n    addresses: {\n      contracts: {\n        vault: '0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce',\n        multicall: '0x66335d7ad8011f6aa3f48aadcb523b62b38ed961',\n        poolDataQueries: '0xb132F1E145DcC085980C531e2dA81f2b84efc14F',\n        gaugeClaimHelper: '0x0000000000000000000000000000000000000000', // no guages on fantom\n        balancerRelayer: '0x419f7925b8c9e409b6ee8792242556fa210a7a09',\n        balancerHelpers: '0xfE18C7C70b0a2c6541bEde0367124278BC345Dc8',\n        weightedPoolFactory: '0x60467cb225092cE0c989361934311175f437Cf53',\n        composableStablePoolFactory:\n          '0x44814E3A603bb7F1198617995c5696C232F6e8Ed',\n        yearnLinearPoolFactory: '0x1f73ae6ed391a2b1e84ff988a1bb5394b78a4a71',\n      },\n      tokens: {\n        bal: '0xF24Bcf4d1e507740041C9cFd2DddB29585aDCe1e', //beets\n        wrappedNativeAsset: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n        lbpRaisingTokens: [\n          '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', // WFTM\n          '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', // USDC\n          '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E', // DAI\n        ],\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/beethovenxfi/beethovenx-v2-fantom',\n      gaugesSubgraph: '', // no guages on fantom\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/beethovenxfi/fantom-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'ftm',\n        platformId: 'fantom',\n      },\n    },\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [\n      {\n        symbol: 'wftm',\n        address: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n      },\n    ],\n  },\n  [Network.SEPOLIA]: {\n    chainId: Network.SEPOLIA, //11155111\n    addresses: {\n      contracts: {\n        multicall: '0xcA11bde05977b3631167028862bE2a173976CA11',\n        poolDataQueries: '0x9805dcfD25e6De36bad8fe9D3Fe2c9b44B764102',\n        ...addressesByNetwork[Network.SEPOLIA].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.SEPOLIA].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.SEPOLIA].contracts.weth,\n        ...addressesByNetwork[Network.SEPOLIA].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.studio.thegraph.com/query/24660/balancer-sepolia-v2/version/latest',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'ethereum',\n      },\n    },\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [],\n  },\n  [Network.ZKEVM]: {\n    chainId: Network.ZKEVM, //1101\n    addresses: {\n      contracts: {\n        balancerMinter: '0x475D18169BE8a89357A9ee3Ab00ca386d20fA229',\n        multicall: '0xcA11bde05977b3631167028862bE2a173976CA11',\n        poolDataQueries: '0xF24917fB88261a37Cc57F686eBC831a5c0B9fD39',\n        ...addressesByNetwork[Network.ZKEVM].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.ZKEVM].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.ZKEVM].contracts.weth,\n        ...addressesByNetwork[Network.ZKEVM].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.studio.thegraph.com/query/24660/balancer-polygon-zk-v2/version/latest',\n      gaugesSubgraph:\n        'https://api.studio.thegraph.com/query/24660/balancer-gauges-polygon-zk/version/latest',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'polygon-zkevm',\n      },\n    },\n    averageBlockTime: 4,\n    multicallBatchSize: 128,\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9',\n      },\n      {\n        symbol: 'wsEth',\n        address: '0x5D8cfF95D7A57c0BF50B30b43c7CC0D52825D4a9',\n      },\n    ],\n  },\n  [Network.AVALANCHE]: {\n    chainId: Network.AVALANCHE, //43114\n    addresses: {\n      contracts: {\n        balancerMinter: '0xEa924b45a3fcDAAdf4E5cFB1665823B8F8F2039B',\n        multicall: '0xcA11bde05977b3631167028862bE2a173976CA11',\n        poolDataQueries: '0x67af5D428d38C5176a286a2371Df691cDD914Fb8',\n        ...addressesByNetwork[Network.AVALANCHE].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.AVALANCHE].contracts.bal,\n        wrappedNativeAsset:\n          addressesByNetwork[Network.AVALANCHE].contracts.weth,\n        ...addressesByNetwork[Network.AVALANCHE].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-avalanche-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-avalanche',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/iliaazhel/avalanche-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'avalanche-2',\n        platformId: 'avalanche',\n      },\n    },\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [\n      {\n        symbol: 'WAVAX',\n        address: '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',\n      },\n      {\n        symbol: 'sAVAX',\n        address: '0x2b2c81e08f1af8835a78bb2a90ae924ace0ea4be',\n      },\n    ],\n  },\n  [Network.BASE]: {\n    chainId: Network.BASE, //8453\n    addresses: {\n      contracts: {\n        balancerMinter: '0xc7E5ED1054A24Ef31D827E6F86caA58B3Bc168d7',\n        multicall: '0xcA11bde05977b3631167028862bE2a173976CA11',\n        poolDataQueries: '',\n        ...addressesByNetwork[Network.BASE].contracts,\n      },\n      tokens: {\n        bal: addressesByNetwork[Network.BASE].contracts.bal,\n        wrappedNativeAsset: addressesByNetwork[Network.BASE].contracts.weth,\n        ...addressesByNetwork[Network.BASE].tokens,\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.studio.thegraph.com/query/24660/balancer-base-v2/version/latest',\n      gaugesSubgraph:\n        'https://api.studio.thegraph.com/query/24660/balancer-gauges-base/version/latest',\n      blockNumberSubgraph:\n        'https://api.studio.thegraph.com/query/48427/bleu-base-blocks/version/latest',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'base',\n      },\n    },\n    averageBlockTime: 2,\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x4200000000000000000000000000000000000006',\n      },\n    ],\n    sorTriPathMidPoolIds: [\n      '0x2db50a0e0310723ef0c2a165cb9a9f80d772ba2f00020000000000000000000d', // weth/staBal\n    ],\n  },\n  [Network.AURORA]: {\n    chainId: Network.AURORA, //1313161554\n    addresses: {\n      contracts: {\n        poolDataQueries: '0xD141F942aaE365995350e02D3C8111BD034E0C53',\n        vault: '0x6985436a0E5247A3E1dc29cdA9e1D89C5b59e26b',\n        multicall: '0x04364F8908BDCB4cc7EA881d0DE869398BA849C9',\n        balancerHelpers: '0x530D85776e560303D18094a366f127ff2F113526',\n        balancerMinterAddress: '0xfc5803Ba89e46D37Bbac542B7449b4c1c0628587',\n        balancerRelayer: '0x28965a81eF4Fc8d236047122C458918532A28CA8',\n        gaugeController: '0x31eCA9385Fa44e0f8D83322F79937943216Df7c5',\n        feeDistributor: '0xd30b72Ff398DE0fF24934fFdb49B28D738076302',\n        protocolFeePercentagesProvider:\n          '0xa07Fca3c96B55daF89E5e4C0887040B0C8a85219',\n        veBal: '0xBe96730583b46140210efA92AC6039EF11247657',\n        veBalProxy: '0xDA4765fE5AfAEac3A0582eDAF78E76b6C4cF9a7C',\n        weightedPoolFactory: '0x98b5584A0c40F2c50CBa0Adb40E51A8caD79b9AC',\n        composableStablePoolFactory:\n          '0xA408376E84DedD19616e8Cd79753eb4B594acd85',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',\n        bal: '0xeAf7665969f1DaA3726CEADa7c40Ab27B3245993',\n        veBal: '0xBe96730583b46140210efA92AC6039EF11247657',\n        bbaUsd: '0xB12BFcA5A55806AaF64E99521918A4bf0fC40802',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/polarisfinance/polaris-dex-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/polarisfinance/polaris-gauges',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/polarisfinance/aurora-blocks',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'eth',\n        platformId: 'aurora',\n      },\n    },\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [\n      {\n        symbol: 'usdc',\n        address: '0xB12BFcA5A55806AaF64E99521918A4bf0fC40802',\n      },\n      {\n        symbol: 'pNEAR',\n        address: '0x990e50E781004EA75e2bA3A67eB69c0B1cD6e3A6',\n      },\n    ],\n  },\n  [Network.TELOS]: {\n    chainId: Network.TELOS, //40\n    addresses: {\n      contracts: {\n        poolDataQueries: '0x402545Ec0BE161Debd8f68047b0A6786C148CDF1',\n        vault: '0x9Ced3B4E4DC978265484d1F1f569010E13f911c9',\n        multicall: '0x075A47CDF38Bc67A018A4742a2Fe7e9053d41C8c',\n        balancerHelpers: '0xf0f3b9Eee32b1F490A4b8720cf6F005d4aE9eA86',\n        balancerRelayer: '0x15F707033cA3a44FB3deC7EBC2F3ac5DB3b4e099',\n        weightedPoolFactory: '0x981071AA1A430fC1b54C3E171608f88975497cF3',\n        composableStablePoolFactory:\n          '0x2Af7e5b19405A02FC99468Af38a23aa270921781',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\n        bal: '0x1073E53ac92F711761475Cd30fab157620AFdAb0',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.goldsky.com/api/public/project_clqbhfggr3ii501w02mp62ver/subgraphs/polaris-dex-v2-telos/1.0.1/gn',\n      gaugesSubgraph:\n        'https://api.goldsky.com/api/public/project_clqbhfggr3ii501w02mp62ver/subgraphs/gauges-telos/1.0.0/gn',\n      blockNumberSubgraph:\n        'https://api.goldsky.com/api/public/project_clqbhfggr3ii501w02mp62ver/subgraphs/blocks-telos/1.0.0/gn',\n    },\n    thirdParty: {\n      coingecko: {\n        nativeAssetId: 'tlos',\n        platformId: 'telos',\n      },\n    },\n    pools: {},\n    poolsToIgnore: [],\n    sorConnectingTokens: [],\n  },\n};\n\nexport const networkAddresses = (\n  chainId: number\n): BalancerNetworkConfig['addresses'] =>\n  BALANCER_NETWORK_CONFIG[chainId as Network].addresses;\n","export enum BalancerErrorCode {\n  ABOVE_MAX_TOKENS = 'ABOVE_MAX_TOKENS',\n  BELOW_MIN_TOKENS = 'BELOW_MIN_TOKENS',\n  EXIT_DELTA_AMOUNTS = 'EXIT_DELTA_AMOUNTS',\n  FEE_PROVIDER_NOT_PROVIDED = 'FEE_PROVIDER_NOT_PROVIDED',\n  GAUGES_HELPER_ADDRESS_NOT_PROVIDED = 'GAUGES_HELPER_ADDRESS_NOT_PROVIDED',\n  GAUGES_NOT_FOUND = 'GAUGES_NOT_FOUND',\n  GAUGES_REWARD_MINTER_ADDRESS_NOT_PROVIDED = 'GAUGES_REWARD_MINTER_ADDRESS_NOT_PROVIDED',\n  GAUGES_REWARD_TOKEN_EMPTY = 'GAUGES_REWARD_TOKEN_EMPTY',\n  ILLEGAL_PARAMETER = 'ILLEGAL_PARAMETER',\n  INTERNAL_ERROR_INVALID_ABI = 'INTERNAL_ERROR_INVALID_ABI',\n  INPUT_LENGTH_MISMATCH = 'INPUT_LENGTH_MISMATCH',\n  INPUT_OUT_OF_BOUNDS = 'INPUT_OUT_OF_BOUNDS',\n  INPUT_TOKEN_INVALID = 'INPUT_TOKEN_INVALID',\n  INVALID_PROTOCOL_ID = 'INVALID_PROTOCOL_ID',\n  INVALID_SWAP_FEE_PERCENTAGE = 'INVALID_SWAP_FEE_PERCENTAGE',\n  INVALID_WEIGHTS = 'INVALID_WEIGHTS',\n  JOIN_DELTA_AMOUNTS = 'JOIN_DELTA_AMOUNTS',\n  JOIN_WITH_ZERO_AMOUNT = 'JOIN_WITH_ZERO_AMOUNT',\n  MISSING_AMP = 'MISSING_AMP',\n  MISSING_DECIMALS = 'MISSING_DECIMALS',\n  MISSING_PRICE_RATE = 'MISSING_PRICE_RATE',\n  MISSING_TOKENS = 'MISSING_TOKENS',\n  MISSING_WEIGHT = 'MISSING_WEIGHT',\n  NO_POOL_DATA = 'NO_POOL_DATA',\n  NO_VALUE_PARAMETER = 'NO_VALUE_PARAMETER',\n  POOL_DOESNT_EXIST = 'POOL_DOESNT_EXIST',\n  QUERY_BATCH_SWAP = 'QUERY_BATCH_SWAP',\n  RELAY_SWAP_AMOUNTS = 'RELAY_SWAP_AMOUNTS',\n  REWARD_TOKEN_ZERO = 'REWARD_TOKEN_ZERO',\n  TIMESTAMP_IN_THE_FUTURE = 'TIMESTAMP_IN_THE_FUTURE',\n  TOKEN_MISMATCH = 'TOKEN_MISMATCH',\n  UNSUPPORTED_PAIR = 'UNSUPPORTED_PAIR',\n  UNSUPPORTED_POOL_TYPE = 'UNSUPPORTED_POOL_TYPE',\n  UNSUPPORTED_POOL_TYPE_VERSION = 'UNSUPPORTED_POOL_TYPE_VERSION',\n}\n\nexport class BalancerError extends Error {\n  constructor(public code: BalancerErrorCode) {\n    super(BalancerError.getMessage(code));\n    this.name = 'BalancerError';\n  }\n\n  static getMessage(code: BalancerErrorCode): string {\n    switch (code) {\n      case BalancerErrorCode.ABOVE_MAX_TOKENS:\n        return 'the array contains more tokens than the maximum allowed';\n      case BalancerErrorCode.BELOW_MIN_TOKENS:\n        return 'the array does not contain the minimum quantity of tokens';\n      case BalancerErrorCode.EXIT_DELTA_AMOUNTS:\n        return 'Error when checking exit call deltas';\n      case BalancerErrorCode.FEE_PROVIDER_NOT_PROVIDED:\n        return 'Fee Provider Repository has not been provided';\n      case BalancerErrorCode.GAUGES_HELPER_ADDRESS_NOT_PROVIDED:\n        return 'Liquidity Gauges Helper Contract address has not been provided';\n      case BalancerErrorCode.GAUGES_NOT_FOUND:\n        return 'Liquidity Gauges not found with given addresses';\n      case BalancerErrorCode.GAUGES_REWARD_MINTER_ADDRESS_NOT_PROVIDED:\n        return 'Liquidity Gauges Reward Minter Contract address has not been provided';\n      case BalancerErrorCode.GAUGES_REWARD_TOKEN_EMPTY:\n        return 'No Reward Tokens for Liquidity Gauges provided';\n      case BalancerErrorCode.INPUT_LENGTH_MISMATCH:\n        return 'input length mismatch';\n      case BalancerErrorCode.INPUT_OUT_OF_BOUNDS:\n        return 'input out of bounds';\n      case BalancerErrorCode.INPUT_TOKEN_INVALID:\n        return 'input token invalid';\n      case BalancerErrorCode.INVALID_PROTOCOL_ID:\n        return 'The provided protocol id does not correspond to a protocol';\n      case BalancerErrorCode.INVALID_SWAP_FEE_PERCENTAGE:\n        return 'The swap fee needs to be greater than zero and less than 1e17(10%)';\n      case BalancerErrorCode.INVALID_WEIGHTS:\n        return 'The sum of the weights needs to be equal to 1e18(100%)';\n      case BalancerErrorCode.JOIN_DELTA_AMOUNTS:\n        return 'Error when checking join call deltas';\n      case BalancerErrorCode.JOIN_WITH_ZERO_AMOUNT:\n        return 'Cant join pool with 0 amount of token in';\n      case BalancerErrorCode.MISSING_AMP:\n        return 'missing amp';\n      case BalancerErrorCode.MISSING_DECIMALS:\n        return 'missing decimals';\n      case BalancerErrorCode.MISSING_PRICE_RATE:\n        return 'missing price rate';\n      case BalancerErrorCode.MISSING_TOKENS:\n        return 'missing tokens';\n      case BalancerErrorCode.MISSING_WEIGHT:\n        return 'missing weight';\n      case BalancerErrorCode.NO_POOL_DATA:\n        return 'no pool data';\n      case BalancerErrorCode.NO_VALUE_PARAMETER:\n        return 'Illegal value passed as parameter';\n      case BalancerErrorCode.POOL_DOESNT_EXIST:\n        return 'balancer pool does not exist';\n      case BalancerErrorCode.RELAY_SWAP_AMOUNTS:\n        return 'Error when checking swap amounts';\n      case BalancerErrorCode.REWARD_TOKEN_ZERO:\n        return 'All Zero Values for Reward Tokens';\n      case BalancerErrorCode.TIMESTAMP_IN_THE_FUTURE:\n        return 'Timestamp cannot be in the future';\n      case BalancerErrorCode.TOKEN_MISMATCH:\n        return 'token mismatch';\n      case BalancerErrorCode.UNSUPPORTED_PAIR:\n        return 'unsupported token pair';\n      case BalancerErrorCode.UNSUPPORTED_POOL_TYPE:\n        return 'unsupported pool type';\n      default:\n        return 'Unknown error';\n    }\n  }\n}\n","import { ONE, SolidityMaths } from '@/lib/utils/solidityMaths';\n\nexport function calcPriceImpact(\n  bptAmount: bigint,\n  bptZeroPriceImpact: bigint,\n  isJoin: boolean\n): bigint {\n  if (isJoin) return calcPriceImpactJoin(bptAmount, bptZeroPriceImpact);\n  else return calcPriceImpactExit(bptAmount, bptZeroPriceImpact);\n}\n\nfunction calcPriceImpactJoin(\n  bptAmount: bigint,\n  bptZeroPriceImpact: bigint\n): bigint {\n  // 1 - (bptAmount/bptZeroPI)\n  const pi = ONE - SolidityMaths.divDownFixed(bptAmount, bptZeroPriceImpact);\n  return pi < 0 ? BigInt(0) : pi;\n}\nfunction calcPriceImpactExit(\n  bptAmount: bigint,\n  bptZeroPriceImpact: bigint\n): bigint {\n  // (bptAmount/bptZeroPI) - 1\n  const pi = SolidityMaths.divDownFixed(bptAmount, bptZeroPriceImpact) - ONE;\n  return pi < 0 ? BigInt(0) : pi;\n}\n","import { BZERO, SolidityMaths } from './solidityMaths';\n\nconst AMP_PRECISION = BigInt(1e3);\n\nexport function bptSpotPrice(\n  amp: bigint,\n  balances: bigint[],\n  bptSupply: bigint,\n  tokenIndexIn: number\n): bigint {\n  const totalCoins = balances.length;\n  const D = _calculateInvariant(amp, balances, true);\n  let S = BZERO;\n  let D_P = D / BigInt(totalCoins);\n  for (let i = 0; i < totalCoins; i++) {\n    if (i != tokenIndexIn) {\n      S = S + balances[i];\n      D_P = (D_P * D) / (BigInt(totalCoins) * balances[i]);\n    }\n  }\n  const x = balances[tokenIndexIn];\n  const alpha = amp * BigInt(totalCoins);\n  const beta = alpha * S; // units: 10 ** 21\n  const gamma = BigInt(AMP_PRECISION) - alpha;\n  const partial_x = BigInt(2) * alpha * x + beta + gamma * D;\n  const minus_partial_D =\n    D_P * BigInt(totalCoins + 1) * AMP_PRECISION - gamma * x;\n  const ans = SolidityMaths.divUpFixed(\n    (partial_x * bptSupply) / minus_partial_D,\n    D\n  );\n  return ans;\n}\n\nfunction _calculateInvariant(\n  amp: bigint,\n  balances: bigint[],\n  roundUp: boolean\n): bigint {\n  /**********************************************************************************************\n      // invariant                                                                                 //\n      // D = invariant                                                  D^(n+1)                    //\n      // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\n      // S = sum of balances                                             n^n P                     //\n      // P = product of balances                                                                   //\n      // n = number of tokens                                                                      //\n      *********x************************************************************************************/\n\n  // We support rounding up or down.\n\n  let sum = BZERO;\n  const numTokens = balances.length;\n  for (let i = 0; i < numTokens; i++) {\n    sum = sum + balances[i];\n  }\n  if (sum == BZERO) {\n    return BZERO;\n  }\n\n  let prevInvariant = BZERO;\n  let invariant = sum;\n  const ampTimesTotal = amp * BigInt(numTokens);\n\n  for (let i = 0; i < 255; i++) {\n    let P_D = balances[0] * BigInt(numTokens);\n    for (let j = 1; j < numTokens; j++) {\n      P_D = SolidityMaths.div(\n        SolidityMaths.mul(\n          SolidityMaths.mul(P_D, balances[j]),\n          BigInt(numTokens)\n        ),\n        invariant,\n        roundUp\n      );\n    }\n    prevInvariant = invariant;\n    invariant = SolidityMaths.div(\n      SolidityMaths.mul(\n        SolidityMaths.mul(BigInt(numTokens), invariant),\n        invariant\n      ) +\n        SolidityMaths.div(\n          SolidityMaths.mul(SolidityMaths.mul(ampTimesTotal, sum), P_D),\n          AMP_PRECISION,\n          roundUp\n        ),\n      SolidityMaths.mul(BigInt(numTokens + 1), invariant) +\n        // No need to use checked arithmetic for the amp precision, the amp is guaranteed to be at least 1\n        SolidityMaths.div(\n          SolidityMaths.mul(ampTimesTotal - AMP_PRECISION, P_D),\n          AMP_PRECISION,\n          !roundUp\n        ),\n      roundUp\n    );\n\n    if (invariant > prevInvariant) {\n      if (invariant - prevInvariant <= 1) {\n        return invariant;\n      }\n    } else if (prevInvariant - invariant <= 1) {\n      return invariant;\n    }\n  }\n\n  throw new Error('Errors.STABLE_INVARIANT_DIDNT_CONVERGE');\n}\n","import { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { ONE, BZERO, _upscale } from '@/lib/utils/solidityMaths';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Pool } from '@/types';\nimport { bptSpotPrice } from '@/lib/utils/stableMathHelpers';\nimport { parsePoolInfo } from '@/lib/utils';\n\n// Note: this concern is used by Stable, MetaStable and StablePhantom pools\nexport class StablePoolPriceImpact implements PriceImpactConcern {\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    // upscales amp, swapfee, totalshares\n    const {\n      ampWithPrecision,\n      scalingFactorsWithoutBpt,\n      totalSharesEvm,\n      upScaledBalancesWithoutBpt,\n    } = parsePoolInfo(pool);\n\n    // Check against array without BPT because concern is being reused by stablePhantom pools\n    // Stable and MetaStable pools don't have BPT in the token list, so array without BPT is the same as the original array\n    if (tokenAmounts.length !== upScaledBalancesWithoutBpt.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    let bptZeroPriceImpact = BZERO;\n    for (let i = 0; i < upScaledBalancesWithoutBpt.length; i++) {\n      const price = bptSpotPrice(\n        ampWithPrecision,\n        upScaledBalancesWithoutBpt,\n        totalSharesEvm,\n        i\n      );\n      const amountUpscaled = _upscale(\n        tokenAmounts[i],\n        scalingFactorsWithoutBpt[i]\n      );\n      const newTerm = (price * amountUpscaled) / ONE;\n      bptZeroPriceImpact += newTerm;\n    }\n    return bptZeroPriceImpact;\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: bigint[],\n    bptAmount: bigint,\n    isJoin: boolean\n  ): string {\n    const bptZeroPriceImpact = this.bptZeroPriceImpact(pool, tokenAmounts);\n    return calcPriceImpact(bptAmount, bptZeroPriceImpact, isJoin).toString();\n  }\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport * as SOR from '@balancer-labs/sor';\nimport {\n  ExitConcern,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPool,\n  ExitPoolAttributes,\n} from '../types';\nimport { AssetHelpers, isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport { balancerVault } from '@/lib/constants/config';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport {\n  _downscaleDown,\n  _downscaleDownArray,\n  _upscaleArray,\n} from '@/lib/utils/solidityMaths';\nimport { Pool } from '@/types';\nimport { BasePoolEncoder } from '@/pool-base';\nimport { StablePoolPriceImpact } from '../stable/priceImpact.concern';\n\ninterface SortedValues {\n  poolTokens: string[];\n  ampWithPrecision: bigint;\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  upScaledBalances: bigint[];\n}\n\ntype ExactBPTInSortedValues = SortedValues & {\n  scalingFactors: bigint[];\n  singleTokenOutIndex: number;\n};\n\ntype ExactTokensOutSortedValues = SortedValues & {\n  upScaledAmountsOut: bigint[];\n  downScaledAmountsOut: string[];\n};\ntype CalcBptInGivenExactTokensOutParams = ExactTokensOutSortedValues &\n  Pick<ExitExactTokensOutParameters, 'slippage'>;\n\ntype SortValuesParams = {\n  pool: Pool;\n  wrappedNativeAsset: string;\n  shouldUnwrapNativeAsset?: boolean;\n};\n\ntype SortValuesExactBptInParams = SortValuesParams & {\n  singleTokenOut?: string;\n};\n\ntype SortValuesExactTokensOutParams = SortValuesParams & {\n  amountsOut: string[];\n  tokensOut: string[];\n};\n\ntype EncodeExitParams = Pick<\n  ExitExactBPTInParameters,\n  'exiter' | 'toInternalBalance'\n> & {\n  poolTokens: string[];\n  poolId: string;\n  userData: string;\n  minAmountsOut: string[];\n};\n\nexport class StablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenOut,\n    toInternalBalance,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    this.checkInputsExactBPTIn({\n      bptIn,\n      singleTokenOut,\n      pool,\n      shouldUnwrapNativeAsset,\n    });\n    const sortedValues = this.sortValuesExitExactBptIn({\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset,\n      singleTokenOut,\n    });\n    const { minAmountsOut, expectedAmountsOut } =\n      sortedValues.singleTokenOutIndex >= 0\n        ? this.calcTokenOutGivenExactBptIn({\n            ...sortedValues,\n            bptIn,\n            slippage,\n          })\n        : this.calcTokensOutGivenExactBptIn({\n            ...sortedValues,\n            bptIn,\n            slippage,\n          });\n\n    const userData =\n      sortedValues.singleTokenOutIndex >= 0\n        ? StablePoolEncoder.exitExactBPTInForOneTokenOut(\n            bptIn,\n            sortedValues.singleTokenOutIndex\n          )\n        : StablePoolEncoder.exitExactBPTInForTokensOut(bptIn);\n\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n    toInternalBalance,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    this.checkInputsExactTokensOut(amountsOut, tokensOut, pool);\n\n    const sortedValues = this.sortValuesExitExactTokensOut({\n      pool,\n      wrappedNativeAsset,\n      amountsOut,\n      tokensOut,\n    });\n    const { expectedBPTIn, maxBPTIn } = this.calcBptInGivenExactTokensOut({\n      ...sortedValues,\n      slippage,\n    });\n\n    const { downScaledAmountsOut, poolTokens } = sortedValues;\n    const userData = StablePoolEncoder.exitBPTInForExactTokensOut(\n      downScaledAmountsOut,\n      maxBPTIn\n    );\n    const encodedData = this.encodeExitPool({\n      poolId: pool.id,\n      userData,\n      poolTokens,\n      minAmountsOut: downScaledAmountsOut,\n      exiter,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      downScaledAmountsOut.map(BigInt),\n      BigInt(expectedBPTIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedBPTIn,\n      maxBPTIn,\n      priceImpact,\n    };\n  };\n\n  buildRecoveryExit = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    toInternalBalance,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'exiter' | 'pool' | 'bptIn' | 'slippage' | 'toInternalBalance'\n  >): ExitExactBPTInAttributes => {\n    this.checkInputsExactBPTIn({\n      bptIn,\n      singleTokenOut: undefined,\n      pool,\n      shouldUnwrapNativeAsset: false,\n    });\n    const sortedValues = parsePoolInfo(pool);\n    const { minAmountsOut, expectedAmountsOut } =\n      this.calcTokensOutGivenExactBptIn({\n        ...sortedValues,\n        singleTokenOutIndex: -1,\n        bptIn,\n        slippage,\n      });\n\n    const userData = BasePoolEncoder.recoveryModeExit(bptIn);\n\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  /**\n   *  Checks if the input of buildExitExactBPTIn is valid\n   * @param bptIn Bpt inserted in the transaction\n   * @param singleTokenOut (optional) the address of the single token that will be withdrawn, if null|undefined, all tokens will be withdrawn proportionally.\n   * @param pool the pool that is being exited\n   * @param shouldUnwrapNativeAsset Set true if the weth should be unwrapped to Eth\n   */\n  checkInputsExactBPTIn = ({\n    bptIn,\n    singleTokenOut,\n    pool,\n    shouldUnwrapNativeAsset,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'bptIn' | 'singleTokenOut' | 'pool' | 'shouldUnwrapNativeAsset'\n  >): void => {\n    if (!bptIn.length || parseFixed(bptIn, 18).isNegative()) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (\n      singleTokenOut &&\n      singleTokenOut !== AddressZero &&\n      !pool.tokens\n        .map((t) => t.address)\n        .some((a) => isSameAddress(a, singleTokenOut))\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n\n    if (!shouldUnwrapNativeAsset && singleTokenOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenOut should not have conflicting values'\n      );\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n  };\n  /**\n   * Checks if the input of buildExitExactTokensOut is valid\n   * @param amountsOut Must have an amount for each token, if the user will not withdraw any amount for a token, the value shall be '0'\n   * @param tokensOut Must contain all the tokens of the pool\n   * @param pool The pool that is being exited\n   */\n  checkInputsExactTokensOut = (\n    amountsOut: string[],\n    tokensOut: string[],\n    pool: Pool\n  ): void => {\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n  };\n  sortValuesExitExactBptIn = ({\n    pool,\n    wrappedNativeAsset,\n    shouldUnwrapNativeAsset,\n    singleTokenOut,\n  }: SortValuesExactBptInParams): ExactBPTInSortedValues => {\n    const parsedPoolInfo = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const { poolTokens } = parsedPoolInfo;\n    let singleTokenOutIndex = -1;\n    if (singleTokenOut) {\n      singleTokenOutIndex = poolTokens.indexOf(singleTokenOut);\n    }\n    return {\n      ...parsedPoolInfo,\n      singleTokenOutIndex,\n    };\n  };\n  sortValuesExitExactTokensOut = ({\n    pool,\n    wrappedNativeAsset,\n    amountsOut,\n    tokensOut,\n  }: SortValuesExactTokensOutParams): ExactTokensOutSortedValues => {\n    const shouldUnwrapNativeAsset = tokensOut.some((a) => a === AddressZero);\n    // Parse pool info into EVM amounts in order to match amountsOut scaling\n    const parsedPoolInfo = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n    const { scalingFactors } = parsedPoolInfo;\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // Sorts amounts in into ascending order (referenced to token addresses) to match the format expected by the Vault.\n    const [, downScaledAmountsOut] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // Maths should use upscaled amounts, e.g. 1USDC => 1e18 not 1e6\n    const upScaledAmountsOut = _upscaleArray(\n      downScaledAmountsOut.map((a) => BigInt(a)),\n      scalingFactors.map((a) => BigInt(a))\n    );\n\n    return {\n      ...parsedPoolInfo,\n      upScaledAmountsOut,\n      downScaledAmountsOut,\n    };\n  };\n  calcTokenOutGivenExactBptIn = ({\n    poolTokens,\n    ampWithPrecision,\n    upScaledBalances,\n    totalSharesEvm,\n    swapFeeEvm,\n    singleTokenOutIndex,\n    bptIn,\n    slippage,\n    scalingFactors,\n  }: Pick<\n    ExactBPTInSortedValues,\n    | 'poolTokens'\n    | 'ampWithPrecision'\n    | 'upScaledBalances'\n    | 'totalSharesEvm'\n    | 'swapFeeEvm'\n    | 'singleTokenOutIndex'\n    | 'scalingFactors'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    // Calculate amount out given BPT in\n    const amountOut = SOR.StableMathBigInt._calcTokenOutGivenExactBptIn(\n      ampWithPrecision,\n      upScaledBalances,\n      singleTokenOutIndex,\n      BigInt(bptIn),\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    const downscaledAmountOut = _downscaleDown(\n      BigInt(amountOut) - BigInt(1), // The -1 is to solve rounding errors, sometimes the amount comes 1 point lower than expected\n      scalingFactors[singleTokenOutIndex]\n    ).toString();\n\n    const expectedAmountsOut = Array(poolTokens.length).fill('0');\n    const minAmountsOut = Array(poolTokens.length).fill('0');\n\n    expectedAmountsOut[singleTokenOutIndex] = downscaledAmountOut;\n    // Apply slippage tolerance\n    minAmountsOut[singleTokenOutIndex] = subSlippage(\n      BigNumber.from(downscaledAmountOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return { minAmountsOut, expectedAmountsOut };\n  };\n\n  calcTokensOutGivenExactBptIn = ({\n    upScaledBalances,\n    totalSharesEvm,\n    scalingFactors,\n    bptIn,\n    slippage,\n  }: Pick<\n    ExactBPTInSortedValues,\n    | 'upScaledBalances'\n    | 'totalSharesEvm'\n    | 'scalingFactors'\n    | 'singleTokenOutIndex'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    const amountsOut = SOR.StableMathBigInt._calcTokensOutGivenExactBptIn(\n      upScaledBalances,\n      BigInt(bptIn),\n      totalSharesEvm\n    );\n    // Maths return numbers scaled to 18 decimals. Must scale down to token decimals.\n    const amountsOutScaledDown = _downscaleDownArray(\n      amountsOut,\n      scalingFactors\n    );\n\n    const expectedAmountsOut = amountsOutScaledDown.map((amount) =>\n      amount.toString()\n    );\n    // Apply slippage tolerance\n    const minAmountsOut = amountsOutScaledDown.map((amount) => {\n      const minAmount = subSlippage(\n        BigNumber.from(amount),\n        BigNumber.from(slippage)\n      );\n      return minAmount.toString();\n    });\n    return { minAmountsOut, expectedAmountsOut };\n  };\n  calcBptInGivenExactTokensOut = ({\n    ampWithPrecision,\n    upScaledBalances,\n    upScaledAmountsOut,\n    totalSharesEvm,\n    swapFeeEvm,\n    slippage,\n  }: CalcBptInGivenExactTokensOutParams): {\n    maxBPTIn: string;\n    expectedBPTIn: string;\n  } => {\n    // Calculate expected BPT in given tokens out\n    const bptIn = SOR.StableMathBigInt._calcBptInGivenExactTokensOut(\n      ampWithPrecision,\n      upScaledBalances,\n      upScaledAmountsOut,\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    // Apply slippage tolerance\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n    return { maxBPTIn, expectedBPTIn: bptIn };\n  };\n\n  encodeExitPool = ({\n    poolId,\n    exiter,\n    poolTokens,\n    minAmountsOut,\n    userData,\n    toInternalBalance,\n  }: EncodeExitParams): ExitPoolAttributes => {\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: poolTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    };\n    // Encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n    return { data, to, functionName, attributes };\n  };\n}\n","import * as SOR from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { balancerVault } from '@/lib/constants/config';\nimport { AssetHelpers, getEthValue, parsePoolInfo } from '@/lib/utils';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { _upscaleArray } from '@/lib/utils/solidityMaths';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport { Pool } from '@/types';\n\nimport { StablePoolPriceImpact } from '../stable/priceImpact.concern';\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { AddressZero } from '@ethersproject/constants';\n\ntype SortedValues = {\n  poolTokens: string[];\n  ampWithPrecision: bigint;\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  upScaledBalances: bigint[];\n  upScaledAmountsIn: bigint[];\n  sortedAmountsIn: string[];\n};\n\ntype EncodeJoinPoolParams = {\n  joiner: string;\n  poolId: string;\n  minBPTOut: string;\n} & Pick<SortedValues, 'poolTokens' | 'sortedAmountsIn'> &\n  Pick<JoinPoolParameters, 'amountsIn' | 'tokensIn'>;\n\nexport class StablePoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    this.checkInputs(tokensIn, amountsIn, pool);\n    const sortedValues = this.sortValues({\n      pool,\n      wrappedNativeAsset,\n      tokensIn,\n      amountsIn,\n    });\n\n    const { expectedBPTOut, minBPTOut } = this.calcBptOutGivenExactTokensIn({\n      ...sortedValues,\n      slippage,\n    });\n\n    const encodedData = this.encodeJoinPool({\n      joiner,\n      amountsIn,\n      tokensIn,\n      poolId: pool.id,\n      minBPTOut,\n      ...sortedValues,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      sortedValues.sortedAmountsIn.map(BigInt),\n      BigInt(expectedBPTOut),\n      true\n    );\n\n    return {\n      ...encodedData,\n      minBPTOut,\n      expectedBPTOut,\n      priceImpact,\n    };\n  };\n\n  /**\n   * Check if the input parameters of the buildJoin function are right\n   * @param amountsIn Must have an amount for each token, if the user will not deposit any amount for a token, the value shall be '0'\n   * @param tokensIn Must contain all the tokens of the pool\n   * @param pool The pool that is being joined\n   */\n  checkInputs = (amountsIn: string[], tokensIn: string[], pool: Pool): void => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n  };\n\n  sortValues = ({\n    pool,\n    wrappedNativeAsset,\n    amountsIn,\n    tokensIn,\n  }: Pick<\n    JoinPoolParameters,\n    'pool' | 'wrappedNativeAsset' | 'amountsIn' | 'tokensIn'\n  >): SortedValues => {\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      poolTokens,\n      ampWithPrecision,\n      totalSharesEvm,\n      swapFeeEvm,\n      scalingFactors,\n      upScaledBalances,\n    } = parsePoolInfo(pool, wrappedNativeAsset, tokensIn.includes(AddressZero));\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // Sorts amounts in into ascending order (referenced to token addresses) to match the format expected by the Vault.\n    const [, sortedAmountsIn] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n\n    // Maths should use upscaled amounts, e.g. 1USDC => 1e18 not 1e6\n    const upScaledAmountsIn = _upscaleArray(\n      sortedAmountsIn.map((a) => BigInt(a)),\n      scalingFactors.map((a) => BigInt(a))\n    );\n    return {\n      poolTokens,\n      ampWithPrecision,\n      totalSharesEvm,\n      swapFeeEvm,\n      upScaledBalances,\n      upScaledAmountsIn,\n      sortedAmountsIn,\n    };\n  };\n\n  calcBptOutGivenExactTokensIn = ({\n    ampWithPrecision,\n    upScaledBalances,\n    upScaledAmountsIn,\n    totalSharesEvm,\n    swapFeeEvm,\n    slippage,\n  }: Pick<JoinPoolParameters, 'slippage'> &\n    Pick<\n      SortedValues,\n      | 'ampWithPrecision'\n      | 'upScaledBalances'\n      | 'upScaledAmountsIn'\n      | 'totalSharesEvm'\n      | 'swapFeeEvm'\n    >): { expectedBPTOut: string; minBPTOut: string } => {\n    const expectedBPTOut = SOR.StableMathBigInt._calcBptOutGivenExactTokensIn(\n      ampWithPrecision,\n      upScaledBalances,\n      upScaledAmountsIn,\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return {\n      expectedBPTOut,\n      minBPTOut,\n    };\n  };\n\n  encodeJoinPool = ({\n    poolId,\n    joiner,\n    poolTokens,\n    sortedAmountsIn,\n    amountsIn,\n    tokensIn,\n    minBPTOut,\n  }: EncodeJoinPoolParams): Pick<\n    JoinPoolAttributes,\n    'value' | 'data' | 'to' | 'functionName' | 'attributes'\n  > => {\n    const userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmountsIn,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: poolTokens,\n        maxAmountsIn: sortedAmountsIn,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n\n    // If joining with a native asset value must be set in call\n    const value = getEthValue(tokensIn, amountsIn);\n\n    return {\n      attributes,\n      data,\n      functionName,\n      to,\n      value,\n    };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\n\nconst SCALING_FACTOR = 18;\n\nexport class StablePoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = BigNumber.from(0);\n    let sumValue = BigNumber.from(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd.toString(), SCALING_FACTOR);\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, StablePool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class StablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const stablePool = StablePool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = stablePool.parsePoolPairData(tokenIn, tokenOut);\n    return stablePool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { StablePoolExit } from './concerns/stable/exit.concern';\nimport { StablePoolJoin } from './concerns/stable/join.concern';\nimport { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { StablePoolSpotPrice } from './concerns/stable/spotPrice.concern';\nimport { StablePoolPriceImpact } from './concerns/stable/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Stable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePoolExit(),\n    public join: JoinConcern = new StablePoolJoin(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new StablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePoolPriceImpact()\n  ) {}\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, PhantomStablePool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class PhantomStablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const metaStablePool = PhantomStablePool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = metaStablePool.parsePoolPairData(tokenIn, tokenOut);\n    return metaStablePool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { StableMathBigInt } from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { balancerVault } from '@/lib/constants/config';\nimport {\n  AssetHelpers,\n  parsePoolInfo,\n  insert,\n  reorderArrays,\n  getEthValue,\n} from '@/lib/utils';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { _upscaleArray } from '@/lib/utils/solidityMaths';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { Pool } from '@/types';\n\nimport { StablePoolPriceImpact } from '../stable/priceImpact.concern';\nimport {\n  JoinPoolParameters,\n  JoinConcern,\n  JoinPoolAttributes,\n  JoinPool,\n} from '../types';\nimport { AddressZero } from '@ethersproject/constants';\n\ninterface SortedValues {\n  sortedAmountsIn: string[];\n  scalingFactorsWithoutBpt: bigint[];\n  upScaledBalancesWithoutBpt: bigint[];\n  ampWithPrecision: bigint;\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  bptIndex: number;\n  poolTokens: string[];\n}\n\ntype SortedInputs = SortedValues &\n  Pick<JoinPoolParameters, 'slippage' | 'joiner'> & {\n    poolId: string;\n  };\n\nexport class ComposableStablePoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    this.checkInputs(tokensIn, amountsIn, pool.tokensList);\n\n    const sortedValues = this.sortValuesBasedOnPoolVersion({\n      pool,\n      wrappedNativeAsset,\n      amountsIn,\n      tokensIn,\n    });\n\n    const encodedData = this.buildExactTokensInForBPTOut({\n      ...sortedValues,\n      slippage,\n      joiner,\n      poolId: pool.id,\n    });\n\n    // If joining with a native asset value must be set in call\n    const value = getEthValue(tokensIn, amountsIn);\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      sortedValues.sortedAmountsIn.map(BigInt),\n      BigInt(encodedData.expectedBPTOut),\n      true\n    );\n\n    return {\n      ...encodedData,\n      to: balancerVault,\n      value,\n      priceImpact,\n    };\n  };\n\n  /**\n   * Sorts inputs and pool value to be correct order and scale for maths and Vault interaction.\n   * @param pool Pool data\n   * @param wrappedNativeAsset (Used for sorting)\n   * @param amountsIn Downscaled amounts in\n   * @param tokensIn Addresses of token in\n   * @returns Sorted values\n   */\n  sortValuesBasedOnPoolVersion({\n    pool,\n    wrappedNativeAsset,\n    amountsIn,\n    tokensIn,\n  }: Pick<\n    JoinPoolParameters,\n    'pool' | 'wrappedNativeAsset' | 'amountsIn' | 'tokensIn'\n  >): SortedValues {\n    /**\n     * V1: Does not have proportional exits.\n     * V2: Reintroduced proportional exits. Has vulnerability.\n     * V3: Fixed vulnerability. Functionally the same as V2.\n     * V4: Update to use new create method with new salt parameter\n     * V5: Fixed vulnerability. Functionally the same as V4.\n     */\n    return this.sortV1(wrappedNativeAsset, tokensIn, amountsIn, pool);\n    // Not release yet and needs tests to confirm\n    // else if (values.pool.poolTypeVersion === 5)\n    //   sortedValues = this.sortV4(\n    //     values.tokensIn,\n    //     values.amountsIn,\n    //     values.pool\n    //   );\n  }\n\n  /**\n   * Ensure tokensIn and amountsIn match pool tokens length\n   * @param tokensIn\n   * @param amountsIn\n   * @param poolTokens\n   */\n  checkInputs(\n    tokensIn: string[],\n    amountsIn: string[],\n    poolTokens: string[]\n  ): void {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != poolTokens.length - 1\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n  }\n\n  /**\n   * Encodes user data with slippage applied to expected BPT out.\n   * @param expectedBPTOut\n   * @param slippage\n   * @param amountsIn\n   * @returns\n   */\n  encodeUserDataExactTokensInForBPTOut(\n    expectedBPTOut: bigint,\n    slippage: string,\n    amountsIn: string[]\n  ): { userData: string; minBPTOut: string } {\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    //NEEDS TO ENCODE USER DATA WITHOUT BPT AMOUNT\n    return {\n      userData: ComposableStablePoolEncoder.joinExactTokensInForBPTOut(\n        amountsIn, // No BPT amount\n        minBPTOut\n      ),\n      minBPTOut,\n    };\n  }\n\n  /**\n   * Encode transaction data into an ABI byte string which can be sent to the network to be executed\n   * @param poolId\n   * @param sender\n   * @param recipient\n   * @param assetsWithBpt\n   * @param encodedUserData\n   * @param maxAmountsInWithBpt\n   * @returns\n   */\n  encodeJoinPool(\n    poolId: string,\n    sender: string,\n    recipient: string,\n    assetsWithBpt: string[],\n    encodedUserData: string,\n    maxAmountsInWithBpt: string[]\n  ): Pick<JoinPoolAttributes, 'functionName' | 'attributes' | 'data'> {\n    const functionName = 'joinPool';\n    //assets AND maxAmountsIn NEEDS THE BPT VALUE IN THE ARRAY\n    const attributes: JoinPool = {\n      poolId,\n      sender,\n      recipient,\n      joinPoolRequest: {\n        assets: assetsWithBpt,\n        maxAmountsIn: maxAmountsInWithBpt,\n        userData: encodedUserData,\n        fromInternalBalance: false,\n      },\n    };\n\n    const vaultInterface = Vault__factory.createInterface();\n\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n\n    return {\n      functionName,\n      attributes,\n      data,\n    };\n  }\n\n  /**\n   * Sorts and scales values correctly for V1-V3 ComposableStable pool.\n   * @param wrappedNativeAsset (Used for sorting)\n   * @param tokensIn Addresses of token in\n   * @param amountsIn Downscaled amounts in\n   * @param pool Pool data\n   * @returns Sorted values\n   */\n  sortV1(\n    wrappedNativeAsset: string,\n    tokensIn: string[],\n    amountsIn: string[],\n    pool: Pool\n  ): SortedValues {\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // Sorts amounts in into ascending order (referenced to token addresses) to match the format expected by the Vault.\n    const [, sortedAmountsIn] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n\n    const {\n      poolTokens,\n      ampWithPrecision,\n      swapFeeEvm,\n      totalSharesEvm,\n      bptIndex,\n      scalingFactorsWithoutBpt,\n      upScaledBalancesWithoutBpt,\n    } = parsePoolInfo(pool, wrappedNativeAsset, tokensIn.includes(AddressZero));\n    return {\n      sortedAmountsIn,\n      scalingFactorsWithoutBpt,\n      upScaledBalancesWithoutBpt,\n      ampWithPrecision,\n      totalSharesEvm,\n      swapFeeEvm,\n      bptIndex,\n      poolTokens,\n    };\n  }\n\n  buildExactTokensInForBPTOut(\n    sortedValues: SortedInputs\n  ): Pick<\n    JoinPoolAttributes,\n    'minBPTOut' | 'functionName' | 'attributes' | 'data' | 'expectedBPTOut'\n  > {\n    const {\n      sortedAmountsIn,\n      scalingFactorsWithoutBpt,\n      upScaledBalancesWithoutBpt,\n      ampWithPrecision,\n      totalSharesEvm,\n      swapFeeEvm,\n      bptIndex,\n      poolTokens,\n      slippage,\n      poolId,\n      joiner,\n    } = sortedValues;\n    // BPT out will be in correct scale and price rate is always 1e18 do doesn't need to be considered\n    // Maths needs to have BPT values removed\n    const expectedBPTOut = this.calcBptOutGivenExactTokensIn(\n      sortedAmountsIn,\n      scalingFactorsWithoutBpt,\n      upScaledBalancesWithoutBpt,\n      ampWithPrecision,\n      totalSharesEvm,\n      swapFeeEvm\n    );\n\n    const userData = this.encodeUserDataExactTokensInForBPTOut(\n      expectedBPTOut,\n      slippage,\n      sortedAmountsIn\n    );\n\n    const { functionName, data, attributes } = this.encodeJoinPool(\n      poolId,\n      joiner,\n      joiner,\n      poolTokens,\n      userData.userData,\n      insert(sortedAmountsIn, bptIndex, '0') // Adds value for BPT\n    );\n\n    return {\n      functionName,\n      data,\n      attributes,\n      minBPTOut: userData.minBPTOut,\n      expectedBPTOut: expectedBPTOut.toString(),\n    };\n  }\n\n  calcBptOutGivenExactTokensIn(\n    amountsIn: string[],\n    scalingFactorsWithoutBpt: bigint[],\n    upScaledBalancesWithoutBpt: bigint[],\n    ampWithPrecision: bigint,\n    totalSharesEvm: bigint,\n    swapFeeEvm: bigint\n  ): bigint {\n    /*\n      Maths should use: \n      - upscaled amounts, e.g. 1USDC = 1e18\n      - rates (scaling factors should include these)\n    */\n    const upScaledAmountsIn = _upscaleArray(\n      amountsIn.map(BigInt),\n      scalingFactorsWithoutBpt.map(BigInt)\n    );\n    const expectedBPTOut = StableMathBigInt._calcBptOutGivenExactTokensIn(\n      ampWithPrecision,\n      upScaledBalancesWithoutBpt,\n      upScaledAmountsIn, // Should not have BPT\n      totalSharesEvm,\n      swapFeeEvm\n    );\n    // BPT out will be in correct scale and price rate is always 1e18 do doesn't need to be considered\n    return expectedBPTOut;\n  }\n\n  // This uses sorting where BPT is always at index 0.\n  // Not currently released but keep for when it is.\n  sortV4(tokensIn: string[], amountsIn: string[], pool: Pool): SortedValues {\n    // This will keep ordering as read from Pool\n    const {\n      poolTokens,\n      poolTokensWithoutBpt,\n      ampWithPrecision,\n      swapFeeEvm,\n      totalSharesEvm,\n      scalingFactorsWithoutBpt,\n      upScaledBalancesWithoutBpt,\n    } = parsePoolInfo(pool);\n\n    // Reorder amountsIn to match pool token order TODO - May have issues when adding native tokens to this mix.\n    const [sortedAmountsIn] = reorderArrays(\n      poolTokensWithoutBpt,\n      tokensIn,\n      amountsIn\n    ) as [string[]];\n    return {\n      sortedAmountsIn,\n      scalingFactorsWithoutBpt,\n      upScaledBalancesWithoutBpt,\n      ampWithPrecision,\n      totalSharesEvm,\n      swapFeeEvm,\n      bptIndex: 0,\n      poolTokens,\n    };\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\n\nimport * as SOR from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport {\n  AssetHelpers,\n  insert,\n  isSameAddress,\n  parsePoolInfo,\n} from '@/lib/utils';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport {\n  _downscaleDown,\n  _downscaleDownArray,\n  _upscaleArray,\n} from '@/lib/utils/solidityMaths';\nimport { balancerVault } from '@/lib/constants/config';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { Pool } from '@/types';\nimport {\n  ExitConcern,\n  ExitExactBPTInAttributes,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutAttributes,\n  ExitExactTokensOutParameters,\n  ExitPool,\n  ExitPoolAttributes,\n} from '../types';\nimport { BasePoolEncoder } from '@/pool-base';\nimport { StablePoolPriceImpact } from '../stable/priceImpact.concern';\n\ninterface SortedValues {\n  poolTokens: string[];\n  ampWithPrecision: bigint;\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  bptIndex: number;\n  upScaledBalancesWithoutBpt: bigint[];\n  scalingFactors: bigint[];\n  scalingFactorsWithoutBpt: bigint[];\n}\n\ntype ExactBPTInSortedValues = SortedValues & {\n  singleTokenOutIndexWithoutBpt: number;\n};\ntype ExactTokensOutSortedValues = SortedValues & {\n  upScaledAmountsOutWithoutBpt: bigint[];\n  downscaledAmountsOutWithoutBpt: string[];\n  downscaledAmountsOutWithBpt: string[];\n};\n\ntype CalcBptInGivenExactTokensOutParams = ExactTokensOutSortedValues &\n  Pick<ExitExactTokensOutParameters, 'slippage'>;\n\ntype SortValuesParams = {\n  pool: Pool;\n  wrappedNativeAsset: string;\n  shouldUnwrapNativeAsset?: boolean;\n};\n\ntype SortValuesExactBptInParams = SortValuesParams & {\n  singleTokenOut?: string;\n};\n\ntype SortValuesExactTokensOutParams = SortValuesParams & {\n  amountsOut: string[];\n  tokensOut: string[];\n};\n\ntype EncodeExitParams = Pick<\n  ExitExactBPTInParameters,\n  'exiter' | 'toInternalBalance'\n> & {\n  poolTokens: string[];\n  poolId: string;\n  userData: string;\n  minAmountsOut: string[];\n};\n\nexport class ComposableStablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenOut,\n    toInternalBalance,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    this.checkInputsExactBPTIn({\n      bptIn,\n      singleTokenOut,\n      pool,\n      shouldUnwrapNativeAsset,\n    });\n\n    const sortedValues = this.sortValuesExitExactBptIn({\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset,\n      singleTokenOut,\n    });\n\n    const { minAmountsOut, expectedAmountsOut } =\n      sortedValues.singleTokenOutIndexWithoutBpt >= 0\n        ? this.calcTokenOutGivenExactBptIn({\n            ...sortedValues,\n            bptIn,\n            slippage,\n          })\n        : this.calcTokensOutGivenExactBptIn({\n            ...sortedValues,\n            bptIn,\n            slippage,\n          });\n\n    const userData =\n      sortedValues.singleTokenOutIndexWithoutBpt >= 0\n        ? ComposableStablePoolEncoder.exitExactBPTInForOneTokenOut(\n            bptIn,\n            sortedValues.singleTokenOutIndexWithoutBpt\n          )\n        : ComposableStablePoolEncoder.exitExactBPTInForAllTokensOut(bptIn);\n\n    // MinAmounts needs a value for BPT for encoding\n    const minAmountsOutWithBpt = insert(\n      minAmountsOut,\n      sortedValues.bptIndex,\n      '0'\n    );\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      userData,\n      minAmountsOut: minAmountsOutWithBpt,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n    toInternalBalance,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    this.checkInputsExactTokensOut(tokensOut, amountsOut, pool);\n    const sortedValues = this.sortValuesExitExactTokensOut({\n      pool,\n      wrappedNativeAsset,\n      amountsOut,\n      tokensOut,\n    });\n\n    const { bptIn, maxBPTIn } = this.calcBptInGivenExactTokensOut({\n      ...sortedValues,\n      slippage,\n    });\n\n    // Have to make sure amountsOut does not have value for BPT index\n    const userData = ComposableStablePoolEncoder.exitBPTInForExactTokensOut(\n      sortedValues.downscaledAmountsOutWithoutBpt,\n      maxBPTIn\n    );\n\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      minAmountsOut: sortedValues.downscaledAmountsOutWithBpt,\n      userData,\n      exiter,\n      poolId: pool.id,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      sortedValues.downscaledAmountsOutWithoutBpt.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      maxBPTIn,\n      expectedBPTIn: bptIn,\n      priceImpact,\n    };\n  };\n\n  buildRecoveryExit = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    toInternalBalance,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'exiter' | 'pool' | 'bptIn' | 'slippage' | 'toInternalBalance'\n  >): ExitExactBPTInAttributes => {\n    this.checkInputsRecoveryExit({\n      bptIn,\n      pool,\n    });\n    // Recovery exits don't use rates. We use them as part of scalingFactor so default to 1 incase of issues\n    pool.tokens.forEach((t) => (t.priceRate = '1'));\n\n    const sortedValues = parsePoolInfo(pool);\n\n    const { minAmountsOut, expectedAmountsOut } =\n      this.calcTokensOutGivenExactBptIn({\n        ...sortedValues,\n        bptIn,\n        slippage,\n      });\n\n    const userData = BasePoolEncoder.recoveryModeExit(bptIn);\n\n    // MinAmounts needs a value for BPT for encoding\n    const minAmountsOutWithBpt = insert(\n      minAmountsOut,\n      sortedValues.bptIndex,\n      '0'\n    );\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      userData,\n      minAmountsOut: minAmountsOutWithBpt,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new StablePoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  /**\n   *  Checks if the input of buildExitExactBPTIn is valid\n   * @param bptIn Bpt amoun in EVM scale\n   * @param singleTokenOut (optional) the address of the single token that will be withdrawn, if null|undefined, all tokens will be withdrawn proportionally.\n   * @param pool the pool that is being exited\n   * @param shouldUnwrapNativeAsset Set true if the weth should be unwrapped to Eth\n   */\n  checkInputsExactBPTIn = ({\n    bptIn,\n    singleTokenOut,\n    pool,\n    shouldUnwrapNativeAsset,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'bptIn' | 'singleTokenOut' | 'pool' | 'shouldUnwrapNativeAsset'\n  >): void => {\n    if (BigNumber.from(bptIn).lte(0)) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (!singleTokenOut && pool.poolTypeVersion < 2) {\n      throw new Error('Unsupported Exit Type For Pool');\n    }\n    if (\n      singleTokenOut &&\n      singleTokenOut !== AddressZero &&\n      !pool.tokens\n        .map((t) => t.address)\n        .some((a) => isSameAddress(a, singleTokenOut))\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n\n    if (!shouldUnwrapNativeAsset && singleTokenOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenOut should not have conflicting values'\n      );\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n  };\n\n  /**\n   * Checks if the input of buildExitExactTokensOut is valid\n   */\n  checkInputsExactTokensOut = (\n    tokensOut: string[],\n    amountsOut: string[],\n    pool: Pool\n  ): void => {\n    // Should have a token for input for each non-BPT pool token\n    // Should be an amount out for each token out\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length - 1\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n  };\n\n  /**\n   *  Checks if the input of buildExitExactBPTIn is valid\n   * @param bptIn Bpt amount in EVM scale\n   * @param pool the pool that is being exited\n   */\n  checkInputsRecoveryExit = ({\n    bptIn,\n    pool,\n  }: Pick<ExitExactBPTInParameters, 'bptIn' | 'pool'>): void => {\n    if (BigNumber.from(bptIn).lte(0)) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (!pool.isInRecoveryMode) {\n      throw new Error(\n        'Exit type not supported because pool is not in Recovery Mode'\n      );\n    }\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n  };\n\n  /**\n   * Sorts and returns the values of amounts, tokens, balances, indexes, that are necessary to do the maths and build the exit transactions\n   * @param pool\n   * @param singleTokenOut\n   * @param wrappedNativeAsset\n   * @param shouldUnwrapNativeAsset\n   * @param amountsOut\n   * @param tokensOut\n   */\n  sortValuesExitExactBptIn = ({\n    pool,\n    singleTokenOut,\n    wrappedNativeAsset,\n    shouldUnwrapNativeAsset,\n  }: SortValuesExactBptInParams): ExactBPTInSortedValues => {\n    const parsedValues = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n    let singleTokenOutIndexWithoutBpt = -1;\n    if (singleTokenOut) {\n      singleTokenOutIndexWithoutBpt =\n        parsedValues.poolTokensWithoutBpt.indexOf(singleTokenOut);\n    }\n    return {\n      ...parsedValues,\n      singleTokenOutIndexWithoutBpt,\n    };\n  };\n  /**\n   * Sorts and returns the values of amounts, tokens, balances, indexes, that are necessary to do the maths and build the exit transactions\n   * @param pool\n   * @param singleTokenOut\n   * @param wrappedNativeAsset\n   * @param amountsOut\n   * @param tokensOut\n   */\n  sortValuesExitExactTokensOut = ({\n    pool,\n    wrappedNativeAsset,\n    amountsOut,\n    tokensOut,\n  }: SortValuesExactTokensOutParams): ExactTokensOutSortedValues => {\n    const shouldUnwrapNativeAsset = tokensOut.some((a) => a === AddressZero);\n    const parsedValues = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // Sorts amounts out into ascending order (referenced to token addresses) to match the format expected by the Vault.\n    const [, downscaledAmountsOutWithoutBpt] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    const downscaledAmountsOutWithBpt = insert(\n      downscaledAmountsOutWithoutBpt,\n      parsedValues.bptIndex,\n      '0'\n    );\n\n    // This should not be required but there is currently a rounding issue with maths and this will ensure tx\n    const downscaledAmountsOutWithBptWithRounding =\n      downscaledAmountsOutWithBpt.map((a) => {\n        const value = BigNumber.from(a);\n        return value.isZero() ? a : value.sub(1).toString();\n      });\n\n    // Maths should use upscaled amounts with rates, e.g. 1USDC => 1e18 not 1e6\n    const upScaledAmountsOutWithoutBpt = _upscaleArray(\n      downscaledAmountsOutWithoutBpt.map((a) => BigInt(a)),\n      parsedValues.scalingFactorsWithoutBpt\n    );\n\n    return {\n      ...parsedValues,\n      upScaledAmountsOutWithoutBpt,\n      downscaledAmountsOutWithBpt: downscaledAmountsOutWithBptWithRounding,\n      downscaledAmountsOutWithoutBpt,\n    };\n  };\n  /**\n   * Calculate the minimum and expect amountOut of the exit with exact bpt in transaction, and passes it to minAmountsOut and expectedAmountsOut arrays passed as parameters;\n   * @param sortedValues\n   * @param expectedAmountsOut\n   * @param minAmountsOut\n   * @param bptIn\n   * @param slippage\n   */\n  calcTokenOutGivenExactBptIn = ({\n    ampWithPrecision,\n    upScaledBalancesWithoutBpt,\n    singleTokenOutIndexWithoutBpt,\n    scalingFactorsWithoutBpt,\n    totalSharesEvm,\n    swapFeeEvm,\n    bptIn,\n    slippage,\n  }: Pick<\n    ExactBPTInSortedValues,\n    | 'ampWithPrecision'\n    | 'upScaledBalancesWithoutBpt'\n    | 'singleTokenOutIndexWithoutBpt'\n    | 'scalingFactorsWithoutBpt'\n    | 'totalSharesEvm'\n    | 'swapFeeEvm'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    // Calculate amount out given BPT in\n    const amountOut = SOR.StableMathBigInt._calcTokenOutGivenExactBptIn(\n      ampWithPrecision,\n      upScaledBalancesWithoutBpt,\n      singleTokenOutIndexWithoutBpt,\n      BigInt(bptIn),\n      totalSharesEvm,\n      swapFeeEvm\n    );\n    const expectedAmountsOut = Array(upScaledBalancesWithoutBpt.length).fill(\n      '0'\n    );\n    const minAmountsOut = Array(upScaledBalancesWithoutBpt.length).fill('0');\n    // Downscales to token decimals and removes priceRate\n    const downscaledAmountOut = _downscaleDown(\n      amountOut,\n      scalingFactorsWithoutBpt[singleTokenOutIndexWithoutBpt]\n    );\n\n    expectedAmountsOut[singleTokenOutIndexWithoutBpt] =\n      downscaledAmountOut.toString();\n    // Apply slippage tolerance\n    minAmountsOut[singleTokenOutIndexWithoutBpt] = subSlippage(\n      BigNumber.from(downscaledAmountOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return { minAmountsOut, expectedAmountsOut };\n  };\n\n  calcTokensOutGivenExactBptIn = ({\n    upScaledBalancesWithoutBpt,\n    totalSharesEvm,\n    scalingFactorsWithoutBpt,\n    bptIn,\n    slippage,\n  }: Pick<\n    ExactBPTInSortedValues,\n    'upScaledBalancesWithoutBpt' | 'totalSharesEvm' | 'scalingFactorsWithoutBpt'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    const amountsOut = SOR.StableMathBigInt._calcTokensOutGivenExactBptIn(\n      upScaledBalancesWithoutBpt,\n      BigInt(bptIn),\n      totalSharesEvm\n    );\n    // Maths return numbers scaled to 18 decimals. Must scale down to token decimals.\n    const amountsOutScaledDown = _downscaleDownArray(\n      amountsOut,\n      scalingFactorsWithoutBpt\n    );\n\n    const expectedAmountsOut = amountsOutScaledDown.map((amount) =>\n      amount.toString()\n    );\n    // Apply slippage tolerance\n    const minAmountsOut = amountsOutScaledDown.map((amount) => {\n      const minAmount = subSlippage(\n        BigNumber.from(amount),\n        BigNumber.from(slippage)\n      );\n      return minAmount.toString();\n    });\n    return { minAmountsOut, expectedAmountsOut };\n  };\n\n  /**\n   * Calculate the bptIn and maxBPTIn of the exit with exact tokens out transaction and returns them;\n   * @param ampWithPrecision\n   * @param upScaledBalancesWithoutBpt\n   * @param upScaledAmountsOut\n   * @param totalSharesEvm\n   * @param swapFeeEvm\n   * @param slippage\n   */\n  calcBptInGivenExactTokensOut = ({\n    ampWithPrecision,\n    upScaledBalancesWithoutBpt,\n    upScaledAmountsOutWithoutBpt,\n    totalSharesEvm,\n    swapFeeEvm,\n    slippage,\n  }: CalcBptInGivenExactTokensOutParams): {\n    bptIn: string;\n    maxBPTIn: string;\n  } => {\n    const bptIn = SOR.StableMathBigInt._calcBptInGivenExactTokensOut(\n      ampWithPrecision,\n      upScaledBalancesWithoutBpt,\n      upScaledAmountsOutWithoutBpt,\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    // Apply slippage tolerance\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return { bptIn, maxBPTIn };\n  };\n\n  /**\n   * Encodes the function data and does the final building of the exit(with exact tokens out) transaction\n   * @param params\n   */\n  encodeExitPool = (params: EncodeExitParams): ExitPoolAttributes => {\n    const {\n      exiter,\n      poolId,\n      minAmountsOut,\n      userData,\n      poolTokens,\n      toInternalBalance,\n    } = params;\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: poolId,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: poolTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n    };\n  };\n}\n","import { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { PhantomStablePoolSpotPrice } from './concerns/stablePhantom/spotPrice.concern';\nimport { StablePoolPriceImpact } from './concerns/stable/priceImpact.concern';\nimport { ComposableStablePoolJoin } from './concerns/composableStable/join.concern';\nimport { ComposableStablePoolExit } from './concerns/composableStable/exit.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class ComposableStable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new ComposableStablePoolExit(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new PhantomStablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePoolPriceImpact(),\n    public join: JoinConcern = new ComposableStablePoolJoin()\n  ) {}\n}\n","import { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport { ONE, BZERO, _upscale } from '@/lib/utils/solidityMaths';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Pool } from '@/types';\nimport { parsePoolInfo } from '@/lib/utils';\n\nexport class WeightedPoolPriceImpact implements PriceImpactConcern {\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    if (tokenAmounts.length !== pool.tokensList.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    // totalShares, balances and weights all scaled up to 18 decimals\n    const { scalingFactorsRaw, totalSharesEvm, upScaledBalances, weights } =\n      parsePoolInfo(pool);\n\n    let bptZeroPriceImpact = BZERO;\n    for (let i = 0; i < tokenAmounts.length; i++) {\n      const price = (weights[i] * totalSharesEvm) / upScaledBalances[i];\n      const amountUpscaled = _upscale(tokenAmounts[i], scalingFactorsRaw[i]);\n      const newTerm = (price * amountUpscaled) / ONE;\n      bptZeroPriceImpact += newTerm;\n    }\n    return bptZeroPriceImpact;\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: bigint[],\n    bptAmount: bigint,\n    isJoin: boolean\n  ): string {\n    const bptZeroPriceImpact = this.bptZeroPriceImpact(pool, tokenAmounts);\n    return calcPriceImpact(bptAmount, bptZeroPriceImpact, isJoin).toString();\n  }\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport * as SOR from '@balancer-labs/sor';\nimport {\n  ExitConcern,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPool,\n  ExitPoolAttributes,\n} from '../types';\nimport { AssetHelpers, isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport { balancerVault } from '@/lib/constants/config';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport {\n  _downscaleDown,\n  _downscaleDownArray,\n  _upscaleArray,\n} from '@/lib/utils/solidityMaths';\nimport { Pool } from '@/types';\nimport { BasePoolEncoder } from '@/pool-base';\nimport { WeightedPoolPriceImpact } from '../weighted/priceImpact.concern';\n\ninterface SortedValues {\n  poolTokens: string[];\n  weights: bigint[];\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  upScaledBalances: bigint[];\n}\n\ntype ExactBPTInSortedValues = SortedValues & {\n  scalingFactors: bigint[];\n  singleTokenOutIndex: number;\n};\n\ntype ExactTokensOutSortedValues = SortedValues & {\n  upScaledAmountsOut: bigint[];\n  downScaledAmountsOut: string[];\n};\ntype CalcBptInGivenExactTokensOutParams = ExactTokensOutSortedValues &\n  Pick<ExitExactTokensOutParameters, 'slippage'>;\n\ntype SortValuesParams = {\n  pool: Pool;\n  wrappedNativeAsset: string;\n  shouldUnwrapNativeAsset?: boolean;\n};\n\ntype SortValuesExactBptInParams = SortValuesParams & {\n  singleTokenOut?: string;\n};\n\ntype SortValuesExactTokensOutParams = SortValuesParams & {\n  amountsOut: string[];\n  tokensOut: string[];\n};\n\ntype EncodeExitParams = Pick<\n  ExitExactBPTInParameters,\n  'exiter' | 'toInternalBalance'\n> & {\n  poolTokens: string[];\n  poolId: string;\n  userData: string;\n  minAmountsOut: string[];\n};\n\nexport class WeightedPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenOut,\n    toInternalBalance,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    this.checkInputsExactBPTIn({\n      bptIn,\n      singleTokenOut,\n      pool,\n      shouldUnwrapNativeAsset,\n    });\n    const sortedValues = this.sortValuesExitExactBptIn({\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset,\n      singleTokenOut,\n    });\n    const { minAmountsOut, expectedAmountsOut } =\n      sortedValues.singleTokenOutIndex >= 0\n        ? this.calcTokenOutGivenExactBptIn({\n            ...sortedValues,\n            bptIn,\n            slippage,\n          })\n        : this.calcTokensOutGivenExactBptIn({\n            ...sortedValues,\n            bptIn,\n            slippage,\n          });\n\n    const userData =\n      sortedValues.singleTokenOutIndex >= 0\n        ? WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n            bptIn,\n            sortedValues.singleTokenOutIndex\n          )\n        : WeightedPoolEncoder.exitExactBPTInForTokensOut(bptIn);\n\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new WeightedPoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n    toInternalBalance,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    this.checkInputsExactTokensOut(amountsOut, tokensOut, pool);\n\n    const sortedValues = this.sortValuesExitExactTokensOut({\n      pool,\n      wrappedNativeAsset,\n      amountsOut,\n      tokensOut,\n    });\n    const { expectedBPTIn, maxBPTIn } = this.calcBptInGivenExactTokensOut({\n      ...sortedValues,\n      slippage,\n    });\n\n    const { downScaledAmountsOut, poolTokens } = sortedValues;\n    const userData = WeightedPoolEncoder.exitBPTInForExactTokensOut(\n      downScaledAmountsOut,\n      maxBPTIn\n    );\n    const encodedData = this.encodeExitPool({\n      poolId: pool.id,\n      userData,\n      poolTokens,\n      minAmountsOut: downScaledAmountsOut,\n      exiter,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new WeightedPoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      downScaledAmountsOut.map(BigInt),\n      BigInt(expectedBPTIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedBPTIn,\n      maxBPTIn,\n      priceImpact,\n    };\n  };\n\n  buildRecoveryExit = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    toInternalBalance,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'exiter' | 'pool' | 'bptIn' | 'slippage' | 'toInternalBalance'\n  >): ExitExactBPTInAttributes => {\n    this.checkInputsExactBPTIn({\n      bptIn,\n      singleTokenOut: undefined,\n      pool,\n      shouldUnwrapNativeAsset: false,\n    });\n    // Recovery exits don't use rates. We use them as part of scalingFactor so default to 1 incase of issues\n    pool.tokens.forEach((t) => (t.priceRate = '1'));\n    const sortedValues = parsePoolInfo(pool);\n    const { minAmountsOut, expectedAmountsOut } =\n      this.calcTokensOutGivenExactBptIn({\n        ...sortedValues,\n        bptIn,\n        slippage,\n        singleTokenOutIndex: -1,\n      });\n\n    const userData = BasePoolEncoder.recoveryModeExit(bptIn);\n\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new WeightedPoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  /**\n   *  Checks if the input of buildExitExactBPTIn is valid\n   * @param bptIn Bpt inserted in the transaction\n   * @param singleTokenOut (optional) the address of the single token that will be withdrawn, if null|undefined, all tokens will be withdrawn proportionally.\n   * @param pool the pool that is being exited\n   * @param shouldUnwrapNativeAsset Set true if the weth should be unwrapped to Eth\n   */\n  checkInputsExactBPTIn = ({\n    bptIn,\n    singleTokenOut,\n    pool,\n    shouldUnwrapNativeAsset,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'bptIn' | 'singleTokenOut' | 'pool' | 'shouldUnwrapNativeAsset'\n  >): void => {\n    if (!bptIn.length || parseFixed(bptIn, 18).isNegative()) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (\n      singleTokenOut &&\n      singleTokenOut !== AddressZero &&\n      !pool.tokens\n        .map((t) => t.address)\n        .some((a) => isSameAddress(a, singleTokenOut))\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n\n    if (!shouldUnwrapNativeAsset && singleTokenOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenOut should not have conflicting values'\n      );\n\n    // Check if there's any relevant weighted pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n  };\n  /**\n   * Checks if the input of buildExitExactTokensOut is valid\n   * @param amountsOut Must have an amount for each token, if the user will not withdraw any amount for a token, the value shall be '0'\n   * @param tokensOut Must contain all the tokens of the pool\n   * @param pool The pool that is being exited\n   */\n  checkInputsExactTokensOut = (\n    amountsOut: string[],\n    tokensOut: string[],\n    pool: Pool\n  ): void => {\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n    // Check if there's any important weighted pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n  };\n  sortValuesExitExactBptIn = ({\n    pool,\n    wrappedNativeAsset,\n    shouldUnwrapNativeAsset,\n    singleTokenOut,\n  }: SortValuesExactBptInParams): ExactBPTInSortedValues => {\n    const parsedPoolInfo = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const { poolTokens } = parsedPoolInfo;\n    let singleTokenOutIndex = -1;\n    if (singleTokenOut) {\n      singleTokenOutIndex = poolTokens.indexOf(singleTokenOut.toLowerCase());\n    }\n    return {\n      ...parsedPoolInfo,\n      singleTokenOutIndex,\n    };\n  };\n  sortValuesExitExactTokensOut = ({\n    pool,\n    wrappedNativeAsset,\n    amountsOut,\n    tokensOut,\n  }: SortValuesExactTokensOutParams): ExactTokensOutSortedValues => {\n    const shouldUnwrapNativeAsset = tokensOut.some((a) => a === AddressZero);\n    // Parse pool info into EVM amounts in order to match amountsOut scaling\n    const parsedPoolInfo = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n    const { scalingFactors } = parsedPoolInfo;\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // Sorts amounts in into ascending order (referenced to token addresses) to match the format expected by the Vault.\n    const [, downScaledAmountsOut] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // Maths should use upscaled amounts, e.g. 1USDC => 1e18 not 1e6\n    const upScaledAmountsOut = _upscaleArray(\n      downScaledAmountsOut.map((a) => BigInt(a)),\n      scalingFactors.map((a) => BigInt(a))\n    );\n\n    return {\n      ...parsedPoolInfo,\n      upScaledAmountsOut,\n      downScaledAmountsOut,\n    };\n  };\n  calcTokenOutGivenExactBptIn = ({\n    poolTokens,\n    weights,\n    upScaledBalances,\n    totalSharesEvm,\n    swapFeeEvm,\n    singleTokenOutIndex,\n    bptIn,\n    slippage,\n    scalingFactors,\n  }: Pick<\n    ExactBPTInSortedValues,\n    | 'poolTokens'\n    | 'weights'\n    | 'upScaledBalances'\n    | 'totalSharesEvm'\n    | 'swapFeeEvm'\n    | 'singleTokenOutIndex'\n    | 'scalingFactors'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    // Calculate amount out given BPT in\n    const amountOut = SOR.WeightedMaths._calcTokenOutGivenExactBptIn(\n      upScaledBalances[singleTokenOutIndex],\n      weights[singleTokenOutIndex],\n      BigInt(bptIn),\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    const downscaledAmountOut = _downscaleDown(\n      BigInt(amountOut) - BigInt(1), // The -1 is to solve rounding errors, sometimes the amount comes 1 point lower than expected\n      scalingFactors[singleTokenOutIndex]\n    ).toString();\n\n    const expectedAmountsOut = Array(poolTokens.length).fill('0');\n    const minAmountsOut = Array(poolTokens.length).fill('0');\n\n    expectedAmountsOut[singleTokenOutIndex] = downscaledAmountOut;\n    // Apply slippage tolerance\n    minAmountsOut[singleTokenOutIndex] = subSlippage(\n      BigNumber.from(downscaledAmountOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return { minAmountsOut, expectedAmountsOut };\n  };\n\n  calcTokensOutGivenExactBptIn = ({\n    upScaledBalances,\n    totalSharesEvm,\n    scalingFactors,\n    bptIn,\n    slippage,\n  }: Pick<\n    ExactBPTInSortedValues,\n    | 'upScaledBalances'\n    | 'totalSharesEvm'\n    | 'scalingFactors'\n    | 'singleTokenOutIndex'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    // Calculate amounts out given BPT in\n    const amountsOut = SOR.WeightedMaths._calcTokensOutGivenExactBptIn(\n      upScaledBalances,\n      BigInt(bptIn),\n      totalSharesEvm\n    ).map((amount) => amount.toString());\n    // Maths return numbers scaled to 18 decimals. Must scale down to token decimals.\n    const amountsOutScaledDown = _downscaleDownArray(\n      amountsOut.map((a) => BigInt(a)),\n      scalingFactors\n    );\n\n    const expectedAmountsOut = amountsOutScaledDown.map((amount) =>\n      amount.toString()\n    );\n    // Apply slippage tolerance\n    const minAmountsOut = amountsOutScaledDown.map((amount) => {\n      const minAmount = subSlippage(\n        BigNumber.from(amount),\n        BigNumber.from(slippage)\n      );\n      return minAmount.toString();\n    });\n    return { minAmountsOut, expectedAmountsOut };\n  };\n  calcBptInGivenExactTokensOut = ({\n    weights,\n    upScaledBalances,\n    upScaledAmountsOut,\n    totalSharesEvm,\n    swapFeeEvm,\n    slippage,\n  }: CalcBptInGivenExactTokensOutParams): {\n    maxBPTIn: string;\n    expectedBPTIn: string;\n  } => {\n    // Calculate expected BPT in given tokens out\n    const bptIn = SOR.WeightedMaths._calcBptInGivenExactTokensOut(\n      upScaledBalances,\n      weights,\n      upScaledAmountsOut,\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    // Apply slippage tolerance\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n    return { maxBPTIn, expectedBPTIn: bptIn };\n  };\n\n  encodeExitPool = ({\n    poolId,\n    exiter,\n    poolTokens,\n    minAmountsOut,\n    userData,\n    toInternalBalance,\n  }: EncodeExitParams): ExitPoolAttributes => {\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: poolTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    };\n    // Encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n    return { data, to, functionName, attributes };\n  };\n}\n","import { WeightedMaths } from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { balancerVault } from '@/lib/constants/config';\nimport { AssetHelpers, getEthValue, parsePoolInfo } from '@/lib/utils';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { _upscaleArray } from '@/lib/utils/solidityMaths';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { Address, Pool } from '@/types';\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { WeightedPoolPriceImpact } from '../weighted/priceImpact.concern';\n\ntype SortedValues = {\n  poolTokens: string[];\n  weights: bigint[];\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  upScaledBalances: bigint[];\n  upScaledAmountsIn: bigint[];\n  sortedAmountsIn: string[];\n};\n\nexport class WeightedPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    this.checkInputs(amountsIn, tokensIn, pool);\n\n    const sortedValues = this.sortValues({\n      pool,\n      wrappedNativeAsset,\n      tokensIn,\n      amountsIn,\n    });\n\n    const { expectedBPTOut, minBPTOut } = this.calcBptOutGivenExactTokensIn({\n      ...sortedValues,\n      slippage,\n    });\n\n    const encodedFunctionData = this.encodeJoinPool({\n      ...sortedValues,\n      poolId: pool.id,\n      joiner,\n      minBPTOut,\n      tokensIn,\n      amountsIn,\n    });\n\n    const priceImpactConcern = new WeightedPoolPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      sortedValues.sortedAmountsIn.map(BigInt),\n      BigInt(expectedBPTOut),\n      true\n    );\n\n    return {\n      ...encodedFunctionData,\n      minBPTOut,\n      expectedBPTOut,\n      priceImpact,\n    };\n  };\n\n  /**\n   * Check if the input parameters of the buildJoin function are right\n   * @param amountsIn Must have an amount for each token, if the user will not deposit any amount for a token, the value shall be '0'\n   * @param tokensIn Must contain all the tokens of the pool\n   * @param pool The pool that is being joined\n   */\n  checkInputs = (tokensIn: string[], amountsIn: string[], pool: Pool): void => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant weighted pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (pool.tokens.some((token) => !token.weight))\n      throw new BalancerError(BalancerErrorCode.MISSING_WEIGHT);\n  };\n\n  sortValues = ({\n    pool,\n    tokensIn,\n    amountsIn,\n    wrappedNativeAsset,\n  }: Pick<\n    JoinPoolParameters,\n    'pool' | 'wrappedNativeAsset' | 'amountsIn' | 'tokensIn'\n  >): SortedValues => {\n    const shouldUnwrapNativeAsset = tokensIn.some((a) => a === AddressZero);\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const parsedPoolInfo = parsePoolInfo(\n      pool,\n      wrappedNativeAsset,\n      shouldUnwrapNativeAsset\n    );\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort inputs\n    const [, sortedAmountsIn] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    const upScaledAmountsIn = _upscaleArray(\n      sortedAmountsIn.map(BigInt),\n      parsedPoolInfo.scalingFactors\n    );\n    // sort pool info\n    return {\n      ...parsedPoolInfo,\n      sortedAmountsIn,\n      upScaledAmountsIn,\n    };\n  };\n\n  calcBptOutGivenExactTokensIn = ({\n    upScaledBalances,\n    weights,\n    upScaledAmountsIn,\n    totalSharesEvm,\n    swapFeeEvm,\n    slippage,\n  }: Pick<JoinPoolParameters, 'slippage'> &\n    Pick<\n      SortedValues,\n      | 'upScaledBalances'\n      | 'weights'\n      | 'upScaledAmountsIn'\n      | 'totalSharesEvm'\n      | 'swapFeeEvm'\n    >): { expectedBPTOut: string; minBPTOut: string } => {\n    const expectedBPTOut = WeightedMaths._calcBptOutGivenExactTokensIn(\n      upScaledBalances,\n      weights,\n      upScaledAmountsIn,\n      totalSharesEvm,\n      swapFeeEvm\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return {\n      expectedBPTOut,\n      minBPTOut,\n    };\n  };\n  encodeJoinPool = ({\n    sortedAmountsIn,\n    poolTokens,\n    poolId,\n    joiner,\n    minBPTOut,\n    amountsIn,\n    tokensIn,\n  }: Pick<SortedValues, 'sortedAmountsIn' | 'poolTokens'> &\n    Pick<JoinPoolParameters, 'joiner' | 'amountsIn' | 'tokensIn'> & {\n      joiner: Address;\n      poolId: string;\n      minBPTOut: string;\n    }): Pick<\n    JoinPoolAttributes,\n    'value' | 'data' | 'to' | 'functionName' | 'attributes'\n  > => {\n    const userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmountsIn,\n      minBPTOut\n    );\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: poolTokens,\n        maxAmountsIn: sortedAmountsIn,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n\n    const value = getEthValue(tokensIn, amountsIn);\n\n    return {\n      to,\n      functionName,\n      data,\n      attributes,\n      value,\n    };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { parseFixed, formatFixed } from '@/lib/utils/math';\n\nconst SCALING_FACTOR = 18;\n\nexport class WeightedPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumWeight = BigNumber.from(0);\n    let sumValue = BigNumber.from(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      let price: BigNumber;\n      if (parseFloat(token.price.usd) < 1) {\n        price = parseFixed(parseFloat(token.price.usd).toFixed(10), 10).mul(\n          1e8\n        );\n      } else {\n        price = parseFixed(token.price.usd, SCALING_FACTOR);\n      }\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n      const weight = parseFixed(token.weight || '0', SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumWeight = sumWeight.add(weight);\n    }\n\n    // Scale the known prices of x% of the pool to get value of 100% of the pool.\n    const totalWeight = tokens.reduce(\n      (total: BigNumber, token) =>\n        total.add(parseFixed(token.weight || '0', SCALING_FACTOR)),\n      BigNumber.from(0)\n    );\n    if (sumWeight.gt(0)) {\n      const liquidity = sumValue.mul(totalWeight).div(sumWeight);\n      return formatFixed(liquidity, SCALING_FACTOR * 2);\n    }\n\n    return '0';\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, WeightedPool, ZERO } from '@balancer-labs/sor';\nimport { Pool, PoolToken } from '@/types';\n\nexport class WeightedPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const isBPTAsToken = tokenIn === pool.address || tokenOut === pool.address;\n    if (isBPTAsToken) {\n      const bptAsToken: PoolToken = {\n        address: pool.address,\n        balance: pool.totalShares,\n        decimals: 18,\n        priceRate: '1',\n        weight: '0',\n      };\n      pool.tokens.push(bptAsToken);\n      pool.tokensList.push(pool.address);\n    }\n    const weightedPool = WeightedPool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = weightedPool.parsePoolPairData(tokenIn, tokenOut);\n    const spotPrice = weightedPool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n    if (isBPTAsToken) {\n      pool.tokens.pop();\n      pool.tokensList.pop();\n    }\n    return spotPrice;\n  }\n}\n","import { WeightedPoolExit } from './concerns/weighted/exit.concern';\nimport { WeightedPoolJoin } from './concerns/weighted/join.concern';\nimport { WeightedPoolLiquidity } from './concerns/weighted/liquidity.concern';\nimport { WeightedPoolSpotPrice } from './concerns/weighted/spotPrice.concern';\nimport { WeightedPoolPriceImpact } from './concerns/weighted/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Weighted implements PoolType {\n  constructor(\n    public exit: ExitConcern = new WeightedPoolExit(),\n    public join: JoinConcern = new WeightedPoolJoin(),\n    public liquidity: LiquidityConcern = new WeightedPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new WeightedPoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new WeightedPoolPriceImpact()\n  ) {}\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\n\nexport class MetaStablePoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd.toString(), SCALING_FACTOR);\n\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, MetaStablePool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class MetaStablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const metaStablePool = MetaStablePool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = metaStablePool.parsePoolPairData(tokenIn, tokenOut);\n    return metaStablePool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { MetaStablePoolLiquidity } from './concerns/metaStable/liquidity.concern';\nimport { MetaStablePoolSpotPrice } from './concerns/metaStable/spotPrice.concern';\nimport { StablePoolPriceImpact } from './concerns/stable/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n  PriceImpactConcern,\n} from './concerns/types';\nimport { StablePoolExit } from '@/modules/pools/pool-types/concerns/stable/exit.concern';\nimport { StablePoolJoin } from '@/modules/pools/pool-types/concerns/stable/join.concern';\n\nexport class MetaStable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePoolExit(),\n    public join: JoinConcern = new StablePoolJoin(),\n    public liquidity: LiquidityConcern = new MetaStablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new MetaStablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePoolPriceImpact()\n  ) {}\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '../types';\n\nexport class StablePhantomPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenOut,\n    toInternalBalance,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    /**\n     * Exit type only supported when pool is in paused state and pause window\n     * has expired, so this type of exit will not be supported.\n     */\n    throw new Error('Exit type not supported');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n    toInternalBalance,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    throw new Error('Exit type not supported');\n  };\n\n  buildRecoveryExit = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    toInternalBalance,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'exiter' | 'pool' | 'bptIn' | 'slippage' | 'toInternalBalance'\n  >): ExitExactBPTInAttributes => {\n    throw new Error('Exit type not supported');\n  };\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { JoinPoolParameters, JoinConcern, JoinPoolAttributes } from '../types';\n\nexport class StablePhantomPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    throw new Error('Join type not supported');\n  };\n}\n","import { StablePhantomPoolExit } from './concerns/stablePhantom/exit.concern';\nimport { StablePhantomPoolJoin } from './concerns/stablePhantom/join.concern';\nimport { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { PhantomStablePoolSpotPrice } from './concerns/stablePhantom/spotPrice.concern';\nimport { StablePoolPriceImpact } from './concerns/stable/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  PriceImpactConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class StablePhantom implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePhantomPoolExit(),\n    public join: JoinConcern = new StablePhantomPoolJoin(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new PhantomStablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePoolPriceImpact()\n  ) {}\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { PriceImpactConcern } from '../types';\nimport { Pool } from '@/types';\n\nexport class LinearPriceImpact implements PriceImpactConcern {\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    throw new Error('Linear Pool bptZeroPriceImpact Not Implented');\n  }\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: bigint[],\n    bptAmount: bigint,\n    isJoin: boolean\n  ): string {\n    // Linear pools don't have price impact\n    return '0';\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as SOR from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Vault__factory } from '@/contracts';\nimport { balancerVault } from '@/lib/constants/config';\nimport { insert, parsePoolInfo, removeItem } from '@/lib/utils';\nimport { _downscaleDownArray } from '@/lib/utils/solidityMaths';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { BasePoolEncoder } from '@/pool-base';\n\nimport {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n  ExitPoolAttributes,\n  ExitPool,\n} from '../types';\nimport { LinearPriceImpact } from '../linear/priceImpact.concern';\n\ninterface SortedValues {\n  bptIndex: number;\n  poolTokens: string[];\n  totalSharesEvm: bigint;\n  swapFeeEvm: bigint;\n  upScaledBalances: bigint[];\n}\n\ntype ExactBPTInSortedValues = SortedValues & {\n  scalingFactors: bigint[];\n};\n\ntype EncodeExitParams = Pick<\n  ExitExactBPTInParameters,\n  'exiter' | 'toInternalBalance'\n> & {\n  poolTokens: string[];\n  poolId: string;\n  userData: string;\n  minAmountsOut: string[];\n};\n\nexport class LinearPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenOut,\n    toInternalBalance,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    throw new Error('Exit type not supported');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n    toInternalBalance,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    throw new Error('Exit type not supported');\n  };\n\n  buildRecoveryExit = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    toInternalBalance,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'exiter' | 'pool' | 'bptIn' | 'slippage' | 'toInternalBalance'\n  >): ExitExactBPTInAttributes => {\n    this.checkInputsExactBPTIn({\n      bptIn,\n      singleTokenOut: undefined,\n      pool,\n      shouldUnwrapNativeAsset: false,\n    });\n    // Recovery exits don't use rates. We use them as part of scalingFactor so default to 1 incase of issues\n    pool.tokens.forEach((t) => (t.priceRate = '1'));\n    const sortedValues = parsePoolInfo(pool);\n    const { minAmountsOut, expectedAmountsOut } =\n      this.calcTokensOutGivenExactBptIn({\n        ...sortedValues,\n        bptIn,\n        slippage,\n      });\n\n    const userData = BasePoolEncoder.recoveryModeExit(bptIn);\n\n    // MinAmounts needs a value for BPT for encoding\n    const minAmountsOutWithBpt = insert(\n      minAmountsOut,\n      sortedValues.bptIndex,\n      '0'\n    );\n\n    const encodedData = this.encodeExitPool({\n      poolTokens: sortedValues.poolTokens,\n      poolId: pool.id,\n      exiter,\n      minAmountsOut: minAmountsOutWithBpt,\n      userData,\n      toInternalBalance,\n    });\n\n    const priceImpactConcern = new LinearPriceImpact();\n    const priceImpact = priceImpactConcern.calcPriceImpact(\n      pool,\n      expectedAmountsOut.map(BigInt),\n      BigInt(bptIn),\n      false\n    );\n\n    return {\n      ...encodedData,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  };\n\n  /**\n   *  Checks if the input of buildExitExactBPTIn is valid\n   * @param bptIn Bpt amount in EVM scale\n   * @param pool the pool that is being exited\n   */\n  checkInputsExactBPTIn = ({\n    bptIn,\n    pool,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'bptIn' | 'singleTokenOut' | 'pool' | 'shouldUnwrapNativeAsset'\n  >): void => {\n    if (BigNumber.from(bptIn).lte(0)) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => token.decimals === undefined))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n  };\n\n  calcTokensOutGivenExactBptIn = ({\n    bptIndex,\n    upScaledBalances,\n    totalSharesEvm,\n    scalingFactors,\n    bptIn,\n    slippage,\n  }: Pick<\n    ExactBPTInSortedValues,\n    'bptIndex' | 'upScaledBalances' | 'totalSharesEvm' | 'scalingFactors'\n  > &\n    Pick<ExitExactBPTInParameters, 'bptIn' | 'slippage'>): {\n    minAmountsOut: string[];\n    expectedAmountsOut: string[];\n  } => {\n    const amountsOut = SOR.LinearMaths._calcTokensOutGivenExactBptIn(\n      upScaledBalances,\n      BigInt(bptIn),\n      totalSharesEvm,\n      bptIndex\n    );\n    // Maths return numbers scaled to 18 decimals. Must scale down to token decimals.\n    const amountsOutScaledDown = _downscaleDownArray(\n      amountsOut,\n      scalingFactors\n    );\n\n    const expectedAmountsOut = removeItem(amountsOutScaledDown, bptIndex).map(\n      (amount) => amount.toString()\n    );\n    // Apply slippage tolerance\n    const minAmountsOut = expectedAmountsOut.map((amount) => {\n      const minAmount = subSlippage(\n        BigNumber.from(amount),\n        BigNumber.from(slippage)\n      );\n      return minAmount.toString();\n    });\n    return { minAmountsOut, expectedAmountsOut };\n  };\n\n  /**\n   * Encodes the function data and does the final building of the exit(with exact tokens out) transaction\n   * @param params\n   */\n  encodeExitPool = (params: EncodeExitParams): ExitPoolAttributes => {\n    const {\n      exiter,\n      poolId,\n      minAmountsOut,\n      userData,\n      poolTokens,\n      toInternalBalance,\n    } = params;\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: poolId,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: poolTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n    };\n  };\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { JoinPoolParameters, JoinConcern, JoinPoolAttributes } from '../types';\n\nexport class LinearPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    throw new Error('Join type not supported');\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { parseFixed, formatFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\nconst ONE = parseFixed('1', SCALING_FACTOR);\n\nexport class LinearPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd.toString(), SCALING_FACTOR);\n\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n      const value = balance.mul(price);\n\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const priceRate = parseFixed(token.priceRate || '1', SCALING_FACTOR);\n\n        // Apply priceRate to scale the balance correctly\n        const balance = parseFixed(token.balance, SCALING_FACTOR)\n          .mul(priceRate)\n          .div(ONE);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2);\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, LinearPool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class LinearPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const linearPool = LinearPool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = linearPool.parsePoolPairData(tokenIn, tokenOut);\n    return linearPool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { LinearPoolExit } from './concerns/linear/exit.concern';\nimport { LinearPoolJoin } from './concerns/linear/join.concern';\nimport { LinearPoolLiquidity } from './concerns/linear/liquidity.concern';\nimport { LinearPoolSpotPrice } from './concerns/linear/spotPrice.concern';\nimport { LinearPriceImpact } from './concerns/linear/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Linear implements PoolType {\n  constructor(\n    public exit: ExitConcern = new LinearPoolExit(),\n    public join: JoinConcern = new LinearPoolJoin(),\n    public liquidity: LiquidityConcern = new LinearPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new LinearPoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new LinearPriceImpact()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '@/modules/pools/pool-types/concerns/types';\n\nexport class FXExitConcern implements ExitConcern {\n  buildExitExactTokensOut(): ExitExactTokensOutAttributes {\n    throw new Error('FXExitConcern Not implemented');\n  }\n\n  buildRecoveryExit(): ExitExactBPTInAttributes {\n    throw new Error('FXExitConcern Not implemented');\n  }\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { SolidityMaths } from '@/lib/utils/solidityMaths';\n\nconst SCALING_FACTOR = 18;\n\nexport class FXLiquidityConcern implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = BigInt(0);\n    let sumValue = BigInt(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(\n        token.price.usd.toString(),\n        SCALING_FACTOR\n      ).toBigInt();\n      const balance = parseFixed(token.balance, SCALING_FACTOR).toBigInt();\n\n      const value = SolidityMaths.mulDownFixed(balance, price);\n      sumValue = SolidityMaths.add(sumValue, value);\n      sumBalance = SolidityMaths.add(sumBalance, balance);\n    }\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance > BigInt(0)) {\n      const avgPrice = SolidityMaths.divDownFixed(sumValue, sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR).toBigInt();\n\n        const value = SolidityMaths.mulDownFixed(balance, avgPrice);\n        sumValue = SolidityMaths.add(sumValue, value);\n        sumBalance = SolidityMaths.add(sumBalance, balance);\n      }\n    }\n    return formatFixed(sumValue.toString(), SCALING_FACTOR).toString();\n  }\n}\n","import { SpotPriceConcern } from '@/modules/pools/pool-types/concerns/types';\n\nexport class FXSpotPriceConcern implements SpotPriceConcern {\n  calcPoolSpotPrice(): string {\n    throw new Error('FXSpotPriceConcern Not implemented');\n  }\n}\n","import { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { Pool } from '@/types';\n\nexport class FXPriceImpactConcern implements PriceImpactConcern {\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    console.log(pool, tokenAmounts);\n    throw new Error('Not implemented');\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: bigint[],\n    bptAmount: bigint,\n    isJoin: boolean\n  ): string {\n    console.log(pool, tokenAmounts, bptAmount, isJoin);\n    throw new Error('Not implemented');\n  }\n}\n","import {\n  JoinConcern,\n  JoinPoolAttributes,\n} from '@/modules/pools/pool-types/concerns/types';\n\nexport class FXJoinConcern implements JoinConcern {\n  buildJoin(): JoinPoolAttributes {\n    throw new Error('FXJoinConcern Not implemented');\n  }\n}\n","import { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from '@/modules/pools/pool-types/concerns/types';\nimport { FXExitConcern } from '@/modules/pools/pool-types/concerns/fx/exit.concern';\nimport { FXLiquidityConcern } from '@/modules/pools/pool-types/concerns/fx/liquidity.concern';\nimport { FXSpotPriceConcern } from '@/modules/pools/pool-types/concerns/fx/spotPrice.concern';\nimport { FXPriceImpactConcern } from '@/modules/pools/pool-types/concerns/fx/priceImpact.concern';\nimport { FXJoinConcern } from '@/modules/pools/pool-types/concerns/fx/join.concern';\n\nexport class FX implements PoolType {\n  constructor(\n    public exit: ExitConcern = new FXExitConcern(),\n    public liquidity: LiquidityConcern = new FXLiquidityConcern(),\n    public spotPriceCalculator: SpotPriceConcern = new FXSpotPriceConcern(),\n    public priceImpactCalculator: PriceImpactConcern = new FXPriceImpactConcern(),\n    public join: JoinConcern = new FXJoinConcern()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInAttributes,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutAttributes,\n  ExitExactTokensOutParameters,\n} from '@/modules/pools/pool-types/concerns/types';\n\nexport class GyroExitConcern implements ExitConcern {\n  buildExitExactTokensOut({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes {\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('Not implemented');\n  }\n\n  buildRecoveryExit({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n  }: Pick<\n    ExitExactBPTInParameters,\n    'exiter' | 'pool' | 'bptIn' | 'slippage'\n  >): ExitExactBPTInAttributes {\n    console.log(exiter, pool, bptIn, slippage);\n    throw new Error('Not implemented');\n  }\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { SolidityMaths } from '@/lib/utils/solidityMaths';\n\nconst SCALING_FACTOR = 18;\n\nexport class GyroLiquidityConcern implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = BigInt(0);\n    let sumValue = BigInt(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(\n        token.price.usd.toString(),\n        SCALING_FACTOR\n      ).toBigInt();\n      const balance = parseFixed(token.balance, SCALING_FACTOR).toBigInt();\n\n      const value = SolidityMaths.mulDownFixed(balance, price);\n      sumValue = SolidityMaths.add(sumValue, value);\n      sumBalance = SolidityMaths.add(sumBalance, balance);\n    }\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance > BigInt(0)) {\n      const avgPrice = SolidityMaths.divDownFixed(sumValue, sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR).toBigInt();\n\n        const value = SolidityMaths.mulDownFixed(balance, avgPrice);\n        sumValue = SolidityMaths.add(sumValue, value);\n        sumBalance = SolidityMaths.add(sumBalance, balance);\n      }\n    }\n    return formatFixed(sumValue.toString(), SCALING_FACTOR).toString();\n  }\n}\n","import { SpotPriceConcern } from '@/modules/pools/pool-types/concerns/types';\n\nexport class GyroSpotPriceConcern implements SpotPriceConcern {\n  calcPoolSpotPrice(): string {\n    throw new Error('GyroSpotPriceConcern Not implemented');\n  }\n}\n","import { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { Pool } from '@/types';\n\nexport class GyroPriceImpactConcern implements PriceImpactConcern {\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    console.log(pool, tokenAmounts);\n    throw new Error('Not implemented');\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: bigint[],\n    bptAmount: bigint,\n    isJoin: boolean\n  ): string {\n    console.log(pool, tokenAmounts, bptAmount, isJoin);\n    throw new Error('Not implemented');\n  }\n}\n","import {\n  JoinConcern,\n  JoinPoolAttributes,\n} from '@/modules/pools/pool-types/concerns/types';\n\nexport class GyroJoinConcern implements JoinConcern {\n  buildJoin(): JoinPoolAttributes {\n    throw new Error('GyroJoinConcern Not implemented');\n  }\n}\n","import { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from '@/modules/pools/pool-types/concerns/types';\nimport { GyroExitConcern } from '@/modules/pools/pool-types/concerns/gyro/exit.concern';\nimport { GyroLiquidityConcern } from '@/modules/pools/pool-types/concerns/gyro/liquidity.concern';\nimport { GyroSpotPriceConcern } from '@/modules/pools/pool-types/concerns/gyro/spotPrice.concern';\nimport { GyroPriceImpactConcern } from '@/modules/pools/pool-types/concerns/gyro/priceImpact.concern';\nimport { GyroJoinConcern } from '@/modules/pools/pool-types/concerns/gyro/join.concern';\n\nexport class Gyro implements PoolType {\n  constructor(\n    public exit: ExitConcern = new GyroExitConcern(),\n    public liquidity: LiquidityConcern = new GyroLiquidityConcern(),\n    public spotPriceCalculator: SpotPriceConcern = new GyroSpotPriceConcern(),\n    public priceImpactCalculator: PriceImpactConcern = new GyroPriceImpactConcern(),\n    public join: JoinConcern = new GyroJoinConcern()\n  ) {}\n}\n","import { BalancerSdkConfig, PoolType } from '@/types';\nimport { Stable } from './pool-types/stable.module';\nimport { ComposableStable } from './pool-types/composableStable.module';\nimport { Weighted } from './pool-types/weighted.module';\nimport { MetaStable } from './pool-types/metaStable.module';\nimport { StablePhantom } from './pool-types/stablePhantom.module';\nimport { Linear } from './pool-types/linear.module';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { isLinearish } from '@/lib/utils';\nimport { FX } from '@/modules/pools/pool-types/fx.module';\nimport { Gyro } from '@/modules/pools/pool-types/gyro.module';\n\n/**\n * Wrapper around pool type specific methods.\n *\n * Returns a class instance of a type specific method handlers.\n */\nexport class PoolTypeConcerns {\n  constructor(\n    config: BalancerSdkConfig,\n    public weighted = new Weighted(),\n    public stable = new Stable(),\n    public composableStable = new ComposableStable(),\n    public metaStable = new MetaStable(),\n    public stablePhantom = new StablePhantom(),\n    public linear = new Linear()\n  ) {}\n\n  static from(\n    poolType: PoolType\n  ):\n    | Weighted\n    | Stable\n    | ComposableStable\n    | MetaStable\n    | StablePhantom\n    | Linear {\n    // Calculate spot price using pool type\n    switch (poolType) {\n      case 'ComposableStable': {\n        return new ComposableStable();\n      }\n      case 'FX': {\n        return new FX();\n      }\n      case 'GyroE':\n      case 'Gyro2':\n      case 'Gyro3': {\n        return new Gyro();\n      }\n      case 'MetaStable': {\n        return new MetaStable();\n      }\n      case 'Stable': {\n        return new Stable();\n      }\n      case 'StablePhantom': {\n        return new StablePhantom();\n      }\n      case 'Investment':\n      case 'LiquidityBootstrapping':\n      case 'Weighted': {\n        return new Weighted();\n      }\n      default: {\n        // Handles all Linear pool types\n        if (isLinearish(poolType)) return new Linear();\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n    }\n  }\n}\n","import { Findable, Pool, PoolToken, Price } from '@/types';\nimport { PoolAttribute } from '../data';\nimport { PoolTypeConcerns } from '../pools/pool-type-concerns';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatFixed, parseFixed } from '@/lib/utils/math';\n\nconst SCALE = 18;\n\nexport interface PoolBPTValue {\n  address: string;\n  liquidity: string;\n}\n\nexport class Liquidity {\n  constructor(\n    private pools: Findable<Pool, PoolAttribute>,\n    private tokenPrices: Findable<Price>\n  ) {}\n\n  async getLiquidity(pool: Pool): Promise<string> {\n    // Remove any tokens with same address as pool as they are pre-printed BPT\n    const parsedTokens = pool.tokens.filter((token) => {\n      return token.address !== pool.address;\n    });\n\n    // For all tokens that are pools (BPT), recurse into them and fetch their liquidity\n    const subPoolLiquidity = await Promise.all(\n      parsedTokens.map(async (token) => {\n        const pool = await this.pools.findBy('address', token.address);\n        if (!pool) return;\n\n        const liquidity = parseFixed(await this.getLiquidity(pool), SCALE);\n        const totalBPT = parseFixed(pool.totalShares, SCALE);\n        const bptInParentPool = parseFixed(token.balance, SCALE);\n        const liquidityInParentPool = totalBPT.eq(0)\n          ? 0\n          : liquidity.mul(bptInParentPool).div(totalBPT);\n\n        return {\n          address: pool.address,\n          liquidity: liquidityInParentPool.toString(),\n        };\n      })\n    );\n\n    const totalSubPoolLiquidity = subPoolLiquidity.reduce(\n      (totalLiquidity, subPool) => {\n        return totalLiquidity.add(\n          subPool ? subPool.liquidity : BigNumber.from(0)\n        );\n      },\n      BigNumber.from(0)\n    );\n\n    // Filter tokens within pool that are not BPT themselves\n    const nonPoolTokens = parsedTokens.filter((token) => {\n      return !subPoolLiquidity.find((pool) => pool?.address === token.address);\n    });\n\n    // Update price using tokenPrices repository\n    const nonPoolTokensWithUpdatedPrice: PoolToken[] = await Promise.all(\n      nonPoolTokens.map(async (token) => {\n        const tokenPrice = await this.tokenPrices.find(token.address);\n        const poolToken: PoolToken = {\n          address: token.address,\n          decimals: token.decimals,\n          priceRate: token.priceRate,\n          price: (tokenPrice?.usd && tokenPrice) || {\n            usd: token.token?.latestUSDPrice,\n          },\n          balance: token.balance,\n          weight: token.weight,\n        };\n        return poolToken;\n      })\n    );\n\n    // TODO: Just in case we need it soon. Otherwise remove without mercy.\n    // Any of the tokens is missing the price, use subgraph totalLiquidity\n    // if(nonPoolTokensWithUpdatedPrice.map((t) => t.price?.usd).indexOf(undefined) > -1) {\n    //   return pool.totalLiquidity\n    // }\n\n    const tokenLiquidity = PoolTypeConcerns.from(\n      pool.poolType\n    ).liquidity.calcTotal(nonPoolTokensWithUpdatedPrice);\n\n    const parsedTokenLiquidity = parseFixed(tokenLiquidity, SCALE);\n\n    const totalLiquidity = totalSubPoolLiquidity.add(parsedTokenLiquidity);\n\n    return formatFixed(totalLiquidity, SCALE);\n  }\n\n  async getBptPrice(pool: Pool): Promise<string> {\n    const liquidity = await this.getLiquidity(pool);\n    return (parseFloat(liquidity) / parseFloat(pool.totalShares)).toString();\n  }\n}\n","import { LiquidityGauge } from '@/modules/data';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport interface Tokens {\n  [tokenAddress: string]: BigNumber;\n}\n\nexport interface GaugeTokens {\n  [gaugeAddress: string]: Tokens;\n}\n\nexport interface ReduceGaugeTokens {\n  (p: GaugeTokens, address: string, index: number): GaugeTokens;\n}\n\nexport interface ReduceGaugeRewards {\n  (\n    rewards: GaugeTokens,\n    path: { gauge: string; token: string },\n    index: number\n  ): GaugeTokens;\n}\n\nexport const ZERO = BigNumber.from('0');\n\nexport const filterTokens = (tokens: Tokens): Tokens => {\n  if (!tokens) return {};\n  return Object.keys(tokens)\n    .filter((token) => tokens[token].gt(ZERO))\n    .reduce((obj: Tokens, token) => {\n      obj[token] = tokens[token];\n      return obj;\n    }, {});\n};\n\nexport const populateGauge = (\n  gauge: LiquidityGauge,\n  rewards: GaugeTokens,\n  tokens: GaugeTokens\n): LiquidityGauge => {\n  if (!rewards[gauge.address] && !tokens[gauge.address]) return gauge;\n  const claimableRewards = filterTokens(rewards[gauge.address]);\n  const claimableTokens = filterTokens(tokens[gauge.address]);\n  gauge.claimableTokens ||= {\n    ...claimableRewards,\n    ...claimableTokens,\n  };\n  return gauge;\n};\n\nexport const populateGauges = (\n  gauges: LiquidityGauge[],\n  claimableRewards: GaugeTokens,\n  claimableTokens: GaugeTokens\n): LiquidityGauge[] => {\n  return gauges\n    .map((gauge) => populateGauge(gauge, claimableRewards, claimableTokens))\n    .filter(\n      (it) => it.claimableTokens && Object.keys(it.claimableTokens).length\n    );\n};\n\nexport const reduceClaimableRewards = (res0x: string[]): ReduceGaugeRewards => {\n  return (\n    rewards: GaugeTokens,\n    path: { gauge: string; token: string },\n    index: number\n  ): GaugeTokens => {\n    const value = BigNumber.from(`${res0x[index]}`);\n    if (value.gt(ZERO)) {\n      rewards[path.gauge] ||= {};\n      rewards[path.gauge][path.token] = value;\n    }\n    return rewards;\n  };\n};\n\nexport const reduceClaimableTokens = (\n  res0x: string[],\n  balAddress: string\n): ReduceGaugeTokens => {\n  return (p: GaugeTokens, address: string, index: number): GaugeTokens => {\n    const value = BigNumber.from(`${res0x[index]}`);\n    if (value.gt(ZERO)) {\n      p[address] ||= {};\n      p[address][balAddress] = value;\n    }\n    return p;\n  };\n};\n\nexport const reduceRewardTokens = (\n  result: { [gaugeAddress: string]: string[] },\n  gauge: LiquidityGauge\n): { [gaugeAddress: string]: string[] } => {\n  if (gauge.rewardTokens) {\n    for (const key of Object.keys(gauge.rewardTokens)) {\n      result[gauge.id] ||= [];\n      result[gauge.id].push(key);\n    }\n  }\n  return result;\n};\n","import { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Network } from '@/lib/constants';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { Multicall } from '@/contracts';\nimport {\n  FeeDistributorRepository,\n  LiquidityGauge,\n  LiquidityGaugeSubgraphRPCProvider,\n} from '@/modules/data';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  GaugeTokens,\n  populateGauges,\n  reduceClaimableRewards,\n  reduceClaimableTokens,\n  reduceRewardTokens,\n  ZERO,\n} from './helper';\n\nconst liquidityGaugeV5Interface = new Interface([\n  'function claim_rewards(address sender, address receiver) returns (uint256)',\n  'function claimable_tokens(address addr) view returns (uint256)',\n  'function claimable_reward(address addr, address token) view returns (uint256)',\n]);\n\nconst balancerMinterInterface = new Interface([\n  'function mintMany(address[] gauges) returns (uint256)',\n]);\n\nconst gaugeClaimHelperInterface = new Interface([\n  'function getPendingRewards(address gauge, address user, address token) view returns (uint256)',\n  'function claimRewardsFromGauges(address[] gauges, address user)',\n]);\n\nexport interface TransactionData {\n  to: string;\n  from: string;\n  callData: string;\n  tokensOut: string[];\n  expectedTokensValue: BigNumber[];\n  functionName: string;\n}\n\nexport interface TokenBalance {\n  [token: string]: BigNumber;\n}\n\nexport interface IClaimService {\n  getClaimableRewardTokens(userAddress: string): Promise<LiquidityGauge[]>;\n  buildClaimRewardTokensRequest(\n    gaugeAddresses: string[],\n    userAddress: string\n  ): Promise<TransactionData>;\n  getClaimableVeBalTokens(\n    userAddress: string,\n    claimableTokens: string[]\n  ): Promise<TokenBalance>;\n  buildClaimVeBalTokensRequest(\n    userAddress: string,\n    claimableTokens: string[]\n  ): Promise<TransactionData>;\n}\n\nexport class ClaimService implements IClaimService {\n  private readonly liquidityGauges: LiquidityGaugeSubgraphRPCProvider;\n  private readonly gaugeClaimHelperAddress?: string;\n  private readonly balancerMinterAddress?: string;\n  private readonly chainId: Network;\n  private readonly feeDistributor: FeeDistributorRepository | undefined;\n\n  constructor(\n    liquidityGauges: LiquidityGaugeSubgraphRPCProvider,\n    feeDistributor: FeeDistributorRepository | undefined,\n    chainId: Network,\n    private multicall: Multicall,\n    gaugeClaimHelperAddress?: string,\n    balancerMinterAddress?: string\n  ) {\n    this.liquidityGauges = liquidityGauges;\n    this.feeDistributor = feeDistributor;\n    this.chainId = chainId;\n    this.gaugeClaimHelperAddress = gaugeClaimHelperAddress;\n    this.balancerMinterAddress = balancerMinterAddress;\n  }\n\n  /**\n   * Get a list of liquidity gauges populated with the claimable tokens for the user.\n   *\n   * @param userAddress the user's account address\n   */\n  async getClaimableRewardTokens(\n    userAddress: string\n  ): Promise<LiquidityGauge[]> {\n    const gauges = await this.getGauges();\n    if (!gauges.length)\n      throw new BalancerError(BalancerErrorCode.GAUGES_NOT_FOUND);\n\n    const gaugeAddresses = gauges.map((it) => it.address);\n    const rewardTokens = this.getRewardTokens(gauges);\n\n    const claimableTokens = await this.retrieveClaimableTokens(\n      gaugeAddresses,\n      userAddress\n    );\n    const claimableRewards = await this.retrieveClaimableRewards(\n      rewardTokens,\n      userAddress\n    );\n    return populateGauges(gauges, claimableRewards, claimableTokens);\n  }\n\n  /**\n   * Returns the data to be signed to claim the tokens on a list of liquidity gauges.\n   * Only the tokens with balance will be claimed.\n   *\n   * @param gaugeAddresses the liquidity gauges' addresses\n   * @param userAddress the user's account address\n   * @throws error if no claimable token is found\n   */\n  async buildClaimRewardTokensRequest(\n    gaugeAddresses: string[],\n    userAddress: string\n  ): Promise<TransactionData> {\n    if (this.chainId === 1 || this.chainId === 5) {\n      if (!this.balancerMinterAddress)\n        throw new BalancerError(\n          BalancerErrorCode.GAUGES_REWARD_MINTER_ADDRESS_NOT_PROVIDED\n        );\n    } else {\n      if (!this.gaugeClaimHelperAddress)\n        throw new BalancerError(\n          BalancerErrorCode.GAUGES_HELPER_ADDRESS_NOT_PROVIDED\n        );\n    }\n    const allGauges = await this.getClaimableRewardTokens(userAddress);\n    const gauges = allGauges\n      .filter((it) =>\n        gaugeAddresses\n          .map((it) => it.toLowerCase())\n          .includes(it.address.toLowerCase())\n      )\n      .filter(\n        (it) => it.claimableTokens && Object.keys(it.claimableTokens).length\n      );\n    const claimableTokens = Array.from(\n      new Set(\n        gauges\n          .map((gauge) => gauge.claimableTokens)\n          .map((tokens) => Object.keys(tokens || {}))\n          .flatMap((it) => it)\n      )\n    );\n    if (!claimableTokens.length)\n      throw new BalancerError(BalancerErrorCode.GAUGES_REWARD_TOKEN_EMPTY);\n    const expectedValues = claimableTokens.map((tokenAddress) => {\n      return gauges.reduce((value: BigNumber, gauge) => {\n        if (\n          gauge.claimableTokens &&\n          gauge.claimableTokens[tokenAddress] &&\n          gauge.claimableTokens[tokenAddress] !== ZERO\n        )\n          value = gauge.claimableTokens[tokenAddress].add(value);\n        return value;\n      }, BigNumber.from(0));\n    });\n    if (!expectedValues.length || expectedValues.every((it) => it.eq(ZERO)))\n      throw new BalancerError(BalancerErrorCode.REWARD_TOKEN_ZERO);\n    if (this.chainId === 1 || this.chainId === 5) {\n      if (!this.balancerMinterAddress)\n        throw new BalancerError(\n          BalancerErrorCode.GAUGES_REWARD_MINTER_ADDRESS_NOT_PROVIDED\n        );\n      const callData = balancerMinterInterface.encodeFunctionData('mintMany', [\n        gaugeAddresses,\n      ]);\n      return {\n        to: this.balancerMinterAddress,\n        from: userAddress,\n        callData: callData,\n        tokensOut: claimableTokens,\n        expectedTokensValue: expectedValues,\n        functionName: 'mintMany',\n      };\n    } else {\n      if (!this.gaugeClaimHelperAddress)\n        throw new BalancerError(\n          BalancerErrorCode.GAUGES_HELPER_ADDRESS_NOT_PROVIDED\n        );\n      const callData = gaugeClaimHelperInterface.encodeFunctionData(\n        'claimRewardsFromGauges',\n        [gaugeAddresses, userAddress]\n      );\n      return {\n        to: this.gaugeClaimHelperAddress,\n        from: userAddress,\n        callData: callData,\n        tokensOut: claimableTokens,\n        expectedTokensValue: expectedValues,\n        functionName: 'claimRewardsFromGauges',\n      };\n    }\n  }\n\n  /**\n   * returns all the tokens' balance for protocol revenue and veBal incentives.\n   *\n   * @param userAddress the user's account address\n   * @param claimableTokens the list of tokens for which the balance is desired\n   */\n  async getClaimableVeBalTokens(\n    userAddress: string,\n    claimableTokens: string[]\n  ): Promise<TokenBalance> {\n    if (!this.feeDistributor)\n      throw new BalancerError(BalancerErrorCode.FEE_PROVIDER_NOT_PROVIDED);\n    return this.feeDistributor?.getClaimableBalances(\n      userAddress,\n      claimableTokens\n    );\n  }\n\n  /**\n   * Returns the data to be signed to claim the tokens for protocol revenue and veBal incentives.\n   *\n   * @param userAddress the user's account address\n   * @param claimableTokens the list of tokens to be claimed\n   * @throws error if no claimable token is found\n   */\n  async buildClaimVeBalTokensRequest(\n    userAddress: string,\n    claimableTokens: string[]\n  ): Promise<TransactionData> {\n    if (!this.feeDistributor)\n      throw new BalancerError(BalancerErrorCode.FEE_PROVIDER_NOT_PROVIDED);\n    const tokenBalance = await this.feeDistributor.getClaimableBalances(\n      userAddress,\n      claimableTokens\n    );\n    const expectedTokensValue = claimableTokens.map(\n      (it) => tokenBalance[it] ?? ZERO\n    );\n    if (expectedTokensValue.every((it) => it.eq(ZERO)))\n      throw new BalancerError(BalancerErrorCode.REWARD_TOKEN_ZERO);\n    const callData = this.feeDistributor.claimBalances(\n      userAddress,\n      claimableTokens\n    );\n    return {\n      to: this.feeDistributor.feeDistributor.address,\n      from: userAddress,\n      callData: callData,\n      tokensOut: claimableTokens,\n      expectedTokensValue: expectedTokensValue,\n      functionName: 'claimTokens',\n    };\n  }\n\n  // Private Functions\n\n  private async getGauges(): Promise<LiquidityGauge[]> {\n    return await this.liquidityGauges.fetch();\n  }\n\n  private getRewardTokens(gauges: LiquidityGauge[]): {\n    [gaugeAddress: string]: string[];\n  } {\n    return gauges.reduce(reduceRewardTokens, {});\n  }\n\n  private async retrieveClaimableRewards(\n    rewardTokens: { [address: string]: string[] },\n    userAddress: string\n  ): Promise<GaugeTokens> {\n    const gaugeAddresses = Object.keys(rewardTokens);\n    const { payload, paths } = this.getPayload(\n      gaugeAddresses,\n      rewardTokens,\n      userAddress\n    );\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n    const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n    return paths.reduce(reduceClaimableRewards(res0x), {});\n  }\n\n  private getPayload(\n    gaugeAddresses: string[],\n    rewardTokens: { [address: string]: string[] },\n    userAddress: string\n  ): {\n    payload: { target: string; callData: string }[];\n    paths: { gauge: string; token: string }[];\n  } {\n    const payload = [];\n    const paths: { gauge: string; token: string }[] = [];\n    for (const gaugeAddress of gaugeAddresses) {\n      for (const tokenAddress of rewardTokens[gaugeAddress]) {\n        paths.push({ gauge: gaugeAddress, token: tokenAddress });\n        payload.push(\n          this.getArguments(userAddress, gaugeAddress, tokenAddress)\n        );\n      }\n    }\n    return { payload, paths };\n  }\n\n  private getArguments(\n    userAddress: string,\n    gaugeAddress: string,\n    tokenAddress: string\n  ): { target: string; callData: string } {\n    if (this.chainId === 1 || this.chainId === 5) {\n      return {\n        target: gaugeAddress,\n        callData: liquidityGaugeV5Interface.encodeFunctionData(\n          'claimable_reward',\n          [userAddress, tokenAddress]\n        ),\n      };\n    }\n    if (!this.gaugeClaimHelperAddress)\n      throw new BalancerError(\n        BalancerErrorCode.GAUGES_HELPER_ADDRESS_NOT_PROVIDED\n      );\n    return {\n      target: this.gaugeClaimHelperAddress,\n      callData: gaugeClaimHelperInterface.encodeFunctionData(\n        'getPendingRewards',\n        [gaugeAddress, userAddress, tokenAddress]\n      ),\n    };\n  }\n\n  private async retrieveClaimableTokens(\n    gaugeAddresses: string[],\n    userAddress: string\n  ): Promise<GaugeTokens> {\n    if (this.chainId === Network.MAINNET || this.chainId === Network.GOERLI) {\n      const balAddress = BALANCER_NETWORK_CONFIG[this.chainId].addresses.tokens\n        .bal as string;\n      const payload = gaugeAddresses.map((gaugeAddress) => ({\n        target: gaugeAddress,\n        callData: liquidityGaugeV5Interface.encodeFunctionData(\n          'claimable_tokens',\n          [userAddress]\n        ),\n      }));\n      const [, res] = await this.multicall.callStatic.aggregate(payload);\n      const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n      return gaugeAddresses.reduce(\n        reduceClaimableTokens(res0x, balAddress),\n        {}\n      );\n    }\n    return {};\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { SOR, SwapTypes, SwapInfo } from '@balancer-labs/sor';\nimport { SwapType, BatchSwapStep, FundManagement } from './types';\nimport { Vault } from '@/contracts/Vault';\n\n/*\n * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n *\n * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n * receives are the same that an equivalent `batchSwap` call would receive.\n */\nexport async function queryBatchSwap(\n  vaultContract: Vault,\n  swapType: SwapType,\n  swaps: BatchSwapStep[],\n  assets: string[]\n): Promise<string[]> {\n  const funds: FundManagement = {\n    sender: AddressZero,\n    recipient: AddressZero,\n    fromInternalBalance: false,\n    toInternalBalance: false,\n  };\n\n  try {\n    const deltas = await vaultContract.callStatic.queryBatchSwap(\n      swapType,\n      swaps,\n      assets,\n      funds\n    );\n    return deltas.map((d: BigNumberish) => d.toString());\n  } catch (err) {\n    throw `queryBatchSwap call error: ${err}`;\n  }\n}\n\n/*\nUse SOR to get swapInfo for tokenIn>tokenOut.\nSwapInfos.swaps has path information.\n*/\nexport async function getSorSwapInfo(\n  tokenIn: string,\n  tokenOut: string,\n  swapType: SwapType,\n  amount: string,\n  sor: SOR\n): Promise<SwapInfo> {\n  const swapTypeSOR: SwapTypes =\n    swapType === SwapType.SwapExactIn\n      ? SwapTypes.SwapExactIn\n      : SwapTypes.SwapExactOut;\n  const swapInfo = await sor.getSwaps(\n    tokenIn.toLowerCase(),\n    tokenOut.toLowerCase(),\n    swapTypeSOR,\n    amount\n  );\n  return swapInfo;\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: string;\n  BigInt: string;\n  Bytes: string;\n  Int8: any;\n};\n\nexport type AmpUpdate = {\n  __typename?: 'AmpUpdate';\n  endAmp: Scalars['BigInt'];\n  endTimestamp: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startAmp: Scalars['BigInt'];\n  startTimestamp: Scalars['BigInt'];\n};\n\nexport type AmpUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<AmpUpdate_Filter>>>;\n  endAmp?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<AmpUpdate_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startAmp?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum AmpUpdate_OrderBy {\n  EndAmp = 'endAmp',\n  EndTimestamp = 'endTimestamp',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartAmp = 'startAmp',\n  StartTimestamp = 'startTimestamp'\n}\n\nexport type Balancer = {\n  __typename?: 'Balancer';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  pools?: Maybe<Array<Pool>>;\n  protocolFeesCollector?: Maybe<Scalars['Bytes']>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalProtocolFee?: Maybe<Scalars['BigDecimal']>;\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\n\nexport type BalancerPoolsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Pool_Filter>;\n};\n\nexport type BalancerSnapshot = {\n  __typename?: 'BalancerSnapshot';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  timestamp: Scalars['Int'];\n  totalLiquidity: Scalars['BigDecimal'];\n  totalProtocolFee?: Maybe<Scalars['BigDecimal']>;\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  vault: Balancer;\n};\n\nexport type BalancerSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<BalancerSnapshot_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<BalancerSnapshot_Filter>>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vault?: InputMaybe<Scalars['String']>;\n  vault_?: InputMaybe<Balancer_Filter>;\n  vault_contains?: InputMaybe<Scalars['String']>;\n  vault_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_ends_with?: InputMaybe<Scalars['String']>;\n  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_gt?: InputMaybe<Scalars['String']>;\n  vault_gte?: InputMaybe<Scalars['String']>;\n  vault_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_lt?: InputMaybe<Scalars['String']>;\n  vault_lte?: InputMaybe<Scalars['String']>;\n  vault_not?: InputMaybe<Scalars['String']>;\n  vault_not_contains?: InputMaybe<Scalars['String']>;\n  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_not_starts_with?: InputMaybe<Scalars['String']>;\n  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_starts_with?: InputMaybe<Scalars['String']>;\n  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum BalancerSnapshot_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Timestamp = 'timestamp',\n  TotalLiquidity = 'totalLiquidity',\n  TotalProtocolFee = 'totalProtocolFee',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  Vault = 'vault',\n  VaultId = 'vault__id',\n  VaultPoolCount = 'vault__poolCount',\n  VaultProtocolFeesCollector = 'vault__protocolFeesCollector',\n  VaultTotalLiquidity = 'vault__totalLiquidity',\n  VaultTotalProtocolFee = 'vault__totalProtocolFee',\n  VaultTotalSwapCount = 'vault__totalSwapCount',\n  VaultTotalSwapFee = 'vault__totalSwapFee',\n  VaultTotalSwapVolume = 'vault__totalSwapVolume'\n}\n\nexport type Balancer_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<Balancer_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<Balancer_Filter>>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  pools_?: InputMaybe<Pool_Filter>;\n  protocolFeesCollector?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_contains?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_gt?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_gte?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  protocolFeesCollector_lt?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_lte?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_not?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_not_contains?: InputMaybe<Scalars['Bytes']>;\n  protocolFeesCollector_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Balancer_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Pools = 'pools',\n  ProtocolFeesCollector = 'protocolFeesCollector',\n  TotalLiquidity = 'totalLiquidity',\n  TotalProtocolFee = 'totalProtocolFee',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type BlockChangedFilter = {\n  number_gte: Scalars['Int'];\n};\n\nexport type Block_Height = {\n  hash?: InputMaybe<Scalars['Bytes']>;\n  number?: InputMaybe<Scalars['Int']>;\n  number_gte?: InputMaybe<Scalars['Int']>;\n};\n\nexport type CircuitBreaker = {\n  __typename?: 'CircuitBreaker';\n  bptPrice: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  lowerBoundPercentage: Scalars['BigDecimal'];\n  pool: Pool;\n  token: PoolToken;\n  upperBoundPercentage: Scalars['BigDecimal'];\n};\n\nexport type CircuitBreaker_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<CircuitBreaker_Filter>>>;\n  bptPrice?: InputMaybe<Scalars['BigDecimal']>;\n  bptPrice_gt?: InputMaybe<Scalars['BigDecimal']>;\n  bptPrice_gte?: InputMaybe<Scalars['BigDecimal']>;\n  bptPrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  bptPrice_lt?: InputMaybe<Scalars['BigDecimal']>;\n  bptPrice_lte?: InputMaybe<Scalars['BigDecimal']>;\n  bptPrice_not?: InputMaybe<Scalars['BigDecimal']>;\n  bptPrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lowerBoundPercentage?: InputMaybe<Scalars['BigDecimal']>;\n  lowerBoundPercentage_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerBoundPercentage_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerBoundPercentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lowerBoundPercentage_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerBoundPercentage_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerBoundPercentage_not?: InputMaybe<Scalars['BigDecimal']>;\n  lowerBoundPercentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  or?: InputMaybe<Array<InputMaybe<CircuitBreaker_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<PoolToken_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  upperBoundPercentage?: InputMaybe<Scalars['BigDecimal']>;\n  upperBoundPercentage_gt?: InputMaybe<Scalars['BigDecimal']>;\n  upperBoundPercentage_gte?: InputMaybe<Scalars['BigDecimal']>;\n  upperBoundPercentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  upperBoundPercentage_lt?: InputMaybe<Scalars['BigDecimal']>;\n  upperBoundPercentage_lte?: InputMaybe<Scalars['BigDecimal']>;\n  upperBoundPercentage_not?: InputMaybe<Scalars['BigDecimal']>;\n  upperBoundPercentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum CircuitBreaker_OrderBy {\n  BptPrice = 'bptPrice',\n  Id = 'id',\n  LowerBoundPercentage = 'lowerBoundPercentage',\n  Pool = 'pool',\n  PoolAddress = 'pool__address',\n  PoolAlpha = 'pool__alpha',\n  PoolAmp = 'pool__amp',\n  PoolBaseToken = 'pool__baseToken',\n  PoolBeta = 'pool__beta',\n  PoolC = 'pool__c',\n  PoolCreateTime = 'pool__createTime',\n  PoolDSq = 'pool__dSq',\n  PoolDelta = 'pool__delta',\n  PoolEpsilon = 'pool__epsilon',\n  PoolExpiryTime = 'pool__expiryTime',\n  PoolFactory = 'pool__factory',\n  PoolHoldersCount = 'pool__holdersCount',\n  PoolId = 'pool__id',\n  PoolIsInRecoveryMode = 'pool__isInRecoveryMode',\n  PoolIsPaused = 'pool__isPaused',\n  PoolJoinExitEnabled = 'pool__joinExitEnabled',\n  PoolLambda = 'pool__lambda',\n  PoolLastJoinExitAmp = 'pool__lastJoinExitAmp',\n  PoolLastPostJoinExitInvariant = 'pool__lastPostJoinExitInvariant',\n  PoolLowerTarget = 'pool__lowerTarget',\n  PoolMainIndex = 'pool__mainIndex',\n  PoolManagementAumFee = 'pool__managementAumFee',\n  PoolManagementFee = 'pool__managementFee',\n  PoolMustAllowlistLPs = 'pool__mustAllowlistLPs',\n  PoolName = 'pool__name',\n  PoolOracleEnabled = 'pool__oracleEnabled',\n  PoolOwner = 'pool__owner',\n  PoolPoolType = 'pool__poolType',\n  PoolPoolTypeVersion = 'pool__poolTypeVersion',\n  PoolPrincipalToken = 'pool__principalToken',\n  PoolProtocolAumFeeCache = 'pool__protocolAumFeeCache',\n  PoolProtocolId = 'pool__protocolId',\n  PoolProtocolSwapFeeCache = 'pool__protocolSwapFeeCache',\n  PoolProtocolYieldFeeCache = 'pool__protocolYieldFeeCache',\n  PoolRoot3Alpha = 'pool__root3Alpha',\n  PoolS = 'pool__s',\n  PoolSqrtAlpha = 'pool__sqrtAlpha',\n  PoolSqrtBeta = 'pool__sqrtBeta',\n  PoolStrategyType = 'pool__strategyType',\n  PoolSwapEnabled = 'pool__swapEnabled',\n  PoolSwapEnabledCurationSignal = 'pool__swapEnabledCurationSignal',\n  PoolSwapEnabledInternal = 'pool__swapEnabledInternal',\n  PoolSwapFee = 'pool__swapFee',\n  PoolSwapsCount = 'pool__swapsCount',\n  PoolSymbol = 'pool__symbol',\n  PoolTauAlphaX = 'pool__tauAlphaX',\n  PoolTauAlphaY = 'pool__tauAlphaY',\n  PoolTauBetaX = 'pool__tauBetaX',\n  PoolTauBetaY = 'pool__tauBetaY',\n  PoolTotalAumFeeCollectedInBpt = 'pool__totalAumFeeCollectedInBPT',\n  PoolTotalLiquidity = 'pool__totalLiquidity',\n  PoolTotalLiquiditySansBpt = 'pool__totalLiquiditySansBPT',\n  PoolTotalProtocolFee = 'pool__totalProtocolFee',\n  PoolTotalProtocolFeePaidInBpt = 'pool__totalProtocolFeePaidInBPT',\n  PoolTotalShares = 'pool__totalShares',\n  PoolTotalSwapFee = 'pool__totalSwapFee',\n  PoolTotalSwapVolume = 'pool__totalSwapVolume',\n  PoolTotalWeight = 'pool__totalWeight',\n  PoolTx = 'pool__tx',\n  PoolU = 'pool__u',\n  PoolUnitSeconds = 'pool__unitSeconds',\n  PoolUpperTarget = 'pool__upperTarget',\n  PoolV = 'pool__v',\n  PoolW = 'pool__w',\n  PoolWrappedIndex = 'pool__wrappedIndex',\n  PoolZ = 'pool__z',\n  Token = 'token',\n  TokenAddress = 'token__address',\n  TokenAssetManager = 'token__assetManager',\n  TokenBalance = 'token__balance',\n  TokenCashBalance = 'token__cashBalance',\n  TokenDecimals = 'token__decimals',\n  TokenId = 'token__id',\n  TokenIndex = 'token__index',\n  TokenIsExemptFromYieldProtocolFee = 'token__isExemptFromYieldProtocolFee',\n  TokenManagedBalance = 'token__managedBalance',\n  TokenName = 'token__name',\n  TokenOldPriceRate = 'token__oldPriceRate',\n  TokenPaidProtocolFees = 'token__paidProtocolFees',\n  TokenPriceRate = 'token__priceRate',\n  TokenSymbol = 'token__symbol',\n  TokenWeight = 'token__weight',\n  UpperBoundPercentage = 'upperBoundPercentage'\n}\n\nexport type GradualWeightUpdate = {\n  __typename?: 'GradualWeightUpdate';\n  endTimestamp: Scalars['BigInt'];\n  endWeights: Array<Scalars['BigInt']>;\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startTimestamp: Scalars['BigInt'];\n  startWeights: Array<Scalars['BigInt']>;\n};\n\nexport type GradualWeightUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<GradualWeightUpdate_Filter>>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<GradualWeightUpdate_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GradualWeightUpdate_OrderBy {\n  EndTimestamp = 'endTimestamp',\n  EndWeights = 'endWeights',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartTimestamp = 'startTimestamp',\n  StartWeights = 'startWeights'\n}\n\nexport enum InvestType {\n  Exit = 'Exit',\n  Join = 'Join'\n}\n\nexport type JoinExit = {\n  __typename?: 'JoinExit';\n  amounts: Array<Scalars['BigDecimal']>;\n  id: Scalars['ID'];\n  pool: Pool;\n  sender: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n  tx: Scalars['Bytes'];\n  type: InvestType;\n  user: User;\n  valueUSD?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type JoinExit_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  and?: InputMaybe<Array<InputMaybe<JoinExit_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<JoinExit_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  sender?: InputMaybe<Scalars['Bytes']>;\n  sender_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_gt?: InputMaybe<Scalars['Bytes']>;\n  sender_gte?: InputMaybe<Scalars['Bytes']>;\n  sender_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  sender_lt?: InputMaybe<Scalars['Bytes']>;\n  sender_lte?: InputMaybe<Scalars['Bytes']>;\n  sender_not?: InputMaybe<Scalars['Bytes']>;\n  sender_not_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_gt?: InputMaybe<Scalars['Bytes']>;\n  tx_gte?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_lt?: InputMaybe<Scalars['Bytes']>;\n  tx_lte?: InputMaybe<Scalars['Bytes']>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  type?: InputMaybe<InvestType>;\n  type_in?: InputMaybe<Array<InvestType>>;\n  type_not?: InputMaybe<InvestType>;\n  type_not_in?: InputMaybe<Array<InvestType>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  valueUSD?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  valueUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum JoinExit_OrderBy {\n  Amounts = 'amounts',\n  Id = 'id',\n  Pool = 'pool',\n  PoolAddress = 'pool__address',\n  PoolAlpha = 'pool__alpha',\n  PoolAmp = 'pool__amp',\n  PoolBaseToken = 'pool__baseToken',\n  PoolBeta = 'pool__beta',\n  PoolC = 'pool__c',\n  PoolCreateTime = 'pool__createTime',\n  PoolDSq = 'pool__dSq',\n  PoolDelta = 'pool__delta',\n  PoolEpsilon = 'pool__epsilon',\n  PoolExpiryTime = 'pool__expiryTime',\n  PoolFactory = 'pool__factory',\n  PoolHoldersCount = 'pool__holdersCount',\n  PoolId = 'pool__id',\n  PoolIsInRecoveryMode = 'pool__isInRecoveryMode',\n  PoolIsPaused = 'pool__isPaused',\n  PoolJoinExitEnabled = 'pool__joinExitEnabled',\n  PoolLambda = 'pool__lambda',\n  PoolLastJoinExitAmp = 'pool__lastJoinExitAmp',\n  PoolLastPostJoinExitInvariant = 'pool__lastPostJoinExitInvariant',\n  PoolLowerTarget = 'pool__lowerTarget',\n  PoolMainIndex = 'pool__mainIndex',\n  PoolManagementAumFee = 'pool__managementAumFee',\n  PoolManagementFee = 'pool__managementFee',\n  PoolMustAllowlistLPs = 'pool__mustAllowlistLPs',\n  PoolName = 'pool__name',\n  PoolOracleEnabled = 'pool__oracleEnabled',\n  PoolOwner = 'pool__owner',\n  PoolPoolType = 'pool__poolType',\n  PoolPoolTypeVersion = 'pool__poolTypeVersion',\n  PoolPrincipalToken = 'pool__principalToken',\n  PoolProtocolAumFeeCache = 'pool__protocolAumFeeCache',\n  PoolProtocolId = 'pool__protocolId',\n  PoolProtocolSwapFeeCache = 'pool__protocolSwapFeeCache',\n  PoolProtocolYieldFeeCache = 'pool__protocolYieldFeeCache',\n  PoolRoot3Alpha = 'pool__root3Alpha',\n  PoolS = 'pool__s',\n  PoolSqrtAlpha = 'pool__sqrtAlpha',\n  PoolSqrtBeta = 'pool__sqrtBeta',\n  PoolStrategyType = 'pool__strategyType',\n  PoolSwapEnabled = 'pool__swapEnabled',\n  PoolSwapEnabledCurationSignal = 'pool__swapEnabledCurationSignal',\n  PoolSwapEnabledInternal = 'pool__swapEnabledInternal',\n  PoolSwapFee = 'pool__swapFee',\n  PoolSwapsCount = 'pool__swapsCount',\n  PoolSymbol = 'pool__symbol',\n  PoolTauAlphaX = 'pool__tauAlphaX',\n  PoolTauAlphaY = 'pool__tauAlphaY',\n  PoolTauBetaX = 'pool__tauBetaX',\n  PoolTauBetaY = 'pool__tauBetaY',\n  PoolTotalAumFeeCollectedInBpt = 'pool__totalAumFeeCollectedInBPT',\n  PoolTotalLiquidity = 'pool__totalLiquidity',\n  PoolTotalLiquiditySansBpt = 'pool__totalLiquiditySansBPT',\n  PoolTotalProtocolFee = 'pool__totalProtocolFee',\n  PoolTotalProtocolFeePaidInBpt = 'pool__totalProtocolFeePaidInBPT',\n  PoolTotalShares = 'pool__totalShares',\n  PoolTotalSwapFee = 'pool__totalSwapFee',\n  PoolTotalSwapVolume = 'pool__totalSwapVolume',\n  PoolTotalWeight = 'pool__totalWeight',\n  PoolTx = 'pool__tx',\n  PoolU = 'pool__u',\n  PoolUnitSeconds = 'pool__unitSeconds',\n  PoolUpperTarget = 'pool__upperTarget',\n  PoolV = 'pool__v',\n  PoolW = 'pool__w',\n  PoolWrappedIndex = 'pool__wrappedIndex',\n  PoolZ = 'pool__z',\n  Sender = 'sender',\n  Timestamp = 'timestamp',\n  Tx = 'tx',\n  Type = 'type',\n  User = 'user',\n  UserId = 'user__id',\n  ValueUsd = 'valueUSD'\n}\n\nexport type LatestPrice = {\n  __typename?: 'LatestPrice';\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type LatestPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<LatestPrice_Filter>>>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_gt?: InputMaybe<Scalars['Bytes']>;\n  asset_gte?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_lt?: InputMaybe<Scalars['Bytes']>;\n  asset_lte?: InputMaybe<Scalars['Bytes']>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<LatestPrice_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_lt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_lte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum LatestPrice_OrderBy {\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  Price = 'price',\n  PricingAsset = 'pricingAsset'\n}\n\nexport type ManagementOperation = {\n  __typename?: 'ManagementOperation';\n  cashDelta: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  managedDelta: Scalars['BigDecimal'];\n  poolTokenId: PoolToken;\n  timestamp: Scalars['Int'];\n  type: OperationType;\n};\n\nexport type ManagementOperation_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<ManagementOperation_Filter>>>;\n  cashDelta?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  cashDelta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_not?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  managedDelta?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managedDelta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_not?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  or?: InputMaybe<Array<InputMaybe<ManagementOperation_Filter>>>;\n  poolTokenId?: InputMaybe<Scalars['String']>;\n  poolTokenId_?: InputMaybe<PoolToken_Filter>;\n  poolTokenId_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_gt?: InputMaybe<Scalars['String']>;\n  poolTokenId_gte?: InputMaybe<Scalars['String']>;\n  poolTokenId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_lt?: InputMaybe<Scalars['String']>;\n  poolTokenId_lte?: InputMaybe<Scalars['String']>;\n  poolTokenId_not?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  type?: InputMaybe<OperationType>;\n  type_in?: InputMaybe<Array<OperationType>>;\n  type_not?: InputMaybe<OperationType>;\n  type_not_in?: InputMaybe<Array<OperationType>>;\n};\n\nexport enum ManagementOperation_OrderBy {\n  CashDelta = 'cashDelta',\n  Id = 'id',\n  ManagedDelta = 'managedDelta',\n  PoolTokenId = 'poolTokenId',\n  PoolTokenIdAddress = 'poolTokenId__address',\n  PoolTokenIdAssetManager = 'poolTokenId__assetManager',\n  PoolTokenIdBalance = 'poolTokenId__balance',\n  PoolTokenIdCashBalance = 'poolTokenId__cashBalance',\n  PoolTokenIdDecimals = 'poolTokenId__decimals',\n  PoolTokenIdId = 'poolTokenId__id',\n  PoolTokenIdIndex = 'poolTokenId__index',\n  PoolTokenIdIsExemptFromYieldProtocolFee = 'poolTokenId__isExemptFromYieldProtocolFee',\n  PoolTokenIdManagedBalance = 'poolTokenId__managedBalance',\n  PoolTokenIdName = 'poolTokenId__name',\n  PoolTokenIdOldPriceRate = 'poolTokenId__oldPriceRate',\n  PoolTokenIdPaidProtocolFees = 'poolTokenId__paidProtocolFees',\n  PoolTokenIdPriceRate = 'poolTokenId__priceRate',\n  PoolTokenIdSymbol = 'poolTokenId__symbol',\n  PoolTokenIdWeight = 'poolTokenId__weight',\n  Timestamp = 'timestamp',\n  Type = 'type'\n}\n\nexport enum OperationType {\n  Deposit = 'Deposit',\n  Update = 'Update',\n  Withdraw = 'Withdraw'\n}\n\n/** Defines the order direction, either ascending or descending */\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  address: Scalars['Bytes'];\n  alpha?: Maybe<Scalars['BigDecimal']>;\n  amp?: Maybe<Scalars['BigInt']>;\n  ampUpdates?: Maybe<Array<AmpUpdate>>;\n  baseToken?: Maybe<Scalars['Bytes']>;\n  beta?: Maybe<Scalars['BigDecimal']>;\n  c?: Maybe<Scalars['BigDecimal']>;\n  circuitBreakers?: Maybe<Array<CircuitBreaker>>;\n  createTime: Scalars['Int'];\n  dSq?: Maybe<Scalars['BigDecimal']>;\n  delta?: Maybe<Scalars['BigDecimal']>;\n  epsilon?: Maybe<Scalars['BigDecimal']>;\n  expiryTime?: Maybe<Scalars['BigInt']>;\n  factory?: Maybe<Scalars['Bytes']>;\n  historicalValues?: Maybe<Array<PoolHistoricalLiquidity>>;\n  holdersCount: Scalars['BigInt'];\n  id: Scalars['ID'];\n  isInRecoveryMode?: Maybe<Scalars['Boolean']>;\n  isPaused?: Maybe<Scalars['Boolean']>;\n  joinExitEnabled?: Maybe<Scalars['Boolean']>;\n  lambda?: Maybe<Scalars['BigDecimal']>;\n  lastJoinExitAmp?: Maybe<Scalars['BigInt']>;\n  lastPostJoinExitInvariant?: Maybe<Scalars['BigDecimal']>;\n  latestAmpUpdate?: Maybe<AmpUpdate>;\n  lowerTarget?: Maybe<Scalars['BigDecimal']>;\n  mainIndex?: Maybe<Scalars['Int']>;\n  managementAumFee?: Maybe<Scalars['BigDecimal']>;\n  managementFee?: Maybe<Scalars['BigDecimal']>;\n  mustAllowlistLPs?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  oracleEnabled: Scalars['Boolean'];\n  owner?: Maybe<Scalars['Bytes']>;\n  poolType?: Maybe<Scalars['String']>;\n  poolTypeVersion?: Maybe<Scalars['Int']>;\n  priceRateProviders?: Maybe<Array<PriceRateProvider>>;\n  principalToken?: Maybe<Scalars['Bytes']>;\n  protocolAumFeeCache?: Maybe<Scalars['BigDecimal']>;\n  protocolId?: Maybe<Scalars['Int']>;\n  protocolIdData?: Maybe<ProtocolIdData>;\n  protocolSwapFeeCache?: Maybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache?: Maybe<Scalars['BigDecimal']>;\n  root3Alpha?: Maybe<Scalars['BigDecimal']>;\n  s?: Maybe<Scalars['BigDecimal']>;\n  shares?: Maybe<Array<PoolShare>>;\n  snapshots?: Maybe<Array<PoolSnapshot>>;\n  sqrtAlpha?: Maybe<Scalars['BigDecimal']>;\n  sqrtBeta?: Maybe<Scalars['BigDecimal']>;\n  strategyType: Scalars['Int'];\n  /** Indicates if a pool can be swapped against. Combines multiple sources, including offchain curation */\n  swapEnabled: Scalars['Boolean'];\n  /** External indication from an offchain permissioned actor */\n  swapEnabledCurationSignal?: Maybe<Scalars['Boolean']>;\n  /** The native swapEnabled boolean. internal to the pool. Only applies to Gyro, LBPs and InvestmentPools */\n  swapEnabledInternal?: Maybe<Scalars['Boolean']>;\n  swapFee: Scalars['BigDecimal'];\n  swaps?: Maybe<Array<Swap>>;\n  swapsCount: Scalars['BigInt'];\n  symbol?: Maybe<Scalars['String']>;\n  tauAlphaX?: Maybe<Scalars['BigDecimal']>;\n  tauAlphaY?: Maybe<Scalars['BigDecimal']>;\n  tauBetaX?: Maybe<Scalars['BigDecimal']>;\n  tauBetaY?: Maybe<Scalars['BigDecimal']>;\n  tokens?: Maybe<Array<PoolToken>>;\n  tokensList: Array<Scalars['Bytes']>;\n  totalAumFeeCollectedInBPT?: Maybe<Scalars['BigDecimal']>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalLiquiditySansBPT?: Maybe<Scalars['BigDecimal']>;\n  totalProtocolFee?: Maybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT?: Maybe<Scalars['BigDecimal']>;\n  totalShares: Scalars['BigDecimal'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  totalWeight?: Maybe<Scalars['BigDecimal']>;\n  tx?: Maybe<Scalars['Bytes']>;\n  u?: Maybe<Scalars['BigDecimal']>;\n  unitSeconds?: Maybe<Scalars['BigInt']>;\n  upperTarget?: Maybe<Scalars['BigDecimal']>;\n  v?: Maybe<Scalars['BigDecimal']>;\n  vaultID: Balancer;\n  w?: Maybe<Scalars['BigDecimal']>;\n  weightUpdates?: Maybe<Array<GradualWeightUpdate>>;\n  wrappedIndex?: Maybe<Scalars['Int']>;\n  z?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type PoolAmpUpdatesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type PoolCircuitBreakersArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<CircuitBreaker_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<CircuitBreaker_Filter>;\n};\n\n\nexport type PoolHistoricalValuesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type PoolPriceRateProvidersArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type PoolSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type PoolSnapshotsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type PoolSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type PoolTokensArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type PoolWeightUpdatesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\nexport type PoolContract = {\n  __typename?: 'PoolContract';\n  id: Scalars['ID'];\n  pool: Pool;\n};\n\nexport type PoolContract_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<PoolContract_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<PoolContract_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PoolContract_OrderBy {\n  Id = 'id',\n  Pool = 'pool',\n  PoolAddress = 'pool__address',\n  PoolAlpha = 'pool__alpha',\n  PoolAmp = 'pool__amp',\n  PoolBaseToken = 'pool__baseToken',\n  PoolBeta = 'pool__beta',\n  PoolC = 'pool__c',\n  PoolCreateTime = 'pool__createTime',\n  PoolDSq = 'pool__dSq',\n  PoolDelta = 'pool__delta',\n  PoolEpsilon = 'pool__epsilon',\n  PoolExpiryTime = 'pool__expiryTime',\n  PoolFactory = 'pool__factory',\n  PoolHoldersCount = 'pool__holdersCount',\n  PoolId = 'pool__id',\n  PoolIsInRecoveryMode = 'pool__isInRecoveryMode',\n  PoolIsPaused = 'pool__isPaused',\n  PoolJoinExitEnabled = 'pool__joinExitEnabled',\n  PoolLambda = 'pool__lambda',\n  PoolLastJoinExitAmp = 'pool__lastJoinExitAmp',\n  PoolLastPostJoinExitInvariant = 'pool__lastPostJoinExitInvariant',\n  PoolLowerTarget = 'pool__lowerTarget',\n  PoolMainIndex = 'pool__mainIndex',\n  PoolManagementAumFee = 'pool__managementAumFee',\n  PoolManagementFee = 'pool__managementFee',\n  PoolMustAllowlistLPs = 'pool__mustAllowlistLPs',\n  PoolName = 'pool__name',\n  PoolOracleEnabled = 'pool__oracleEnabled',\n  PoolOwner = 'pool__owner',\n  PoolPoolType = 'pool__poolType',\n  PoolPoolTypeVersion = 'pool__poolTypeVersion',\n  PoolPrincipalToken = 'pool__principalToken',\n  PoolProtocolAumFeeCache = 'pool__protocolAumFeeCache',\n  PoolProtocolId = 'pool__protocolId',\n  PoolProtocolSwapFeeCache = 'pool__protocolSwapFeeCache',\n  PoolProtocolYieldFeeCache = 'pool__protocolYieldFeeCache',\n  PoolRoot3Alpha = 'pool__root3Alpha',\n  PoolS = 'pool__s',\n  PoolSqrtAlpha = 'pool__sqrtAlpha',\n  PoolSqrtBeta = 'pool__sqrtBeta',\n  PoolStrategyType = 'pool__strategyType',\n  PoolSwapEnabled = 'pool__swapEnabled',\n  PoolSwapEnabledCurationSignal = 'pool__swapEnabledCurationSignal',\n  PoolSwapEnabledInternal = 'pool__swapEnabledInternal',\n  PoolSwapFee = 'pool__swapFee',\n  PoolSwapsCount = 'pool__swapsCount',\n  PoolSymbol = 'pool__symbol',\n  PoolTauAlphaX = 'pool__tauAlphaX',\n  PoolTauAlphaY = 'pool__tauAlphaY',\n  PoolTauBetaX = 'pool__tauBetaX',\n  PoolTauBetaY = 'pool__tauBetaY',\n  PoolTotalAumFeeCollectedInBpt = 'pool__totalAumFeeCollectedInBPT',\n  PoolTotalLiquidity = 'pool__totalLiquidity',\n  PoolTotalLiquiditySansBpt = 'pool__totalLiquiditySansBPT',\n  PoolTotalProtocolFee = 'pool__totalProtocolFee',\n  PoolTotalProtocolFeePaidInBpt = 'pool__totalProtocolFeePaidInBPT',\n  PoolTotalShares = 'pool__totalShares',\n  PoolTotalSwapFee = 'pool__totalSwapFee',\n  PoolTotalSwapVolume = 'pool__totalSwapVolume',\n  PoolTotalWeight = 'pool__totalWeight',\n  PoolTx = 'pool__tx',\n  PoolU = 'pool__u',\n  PoolUnitSeconds = 'pool__unitSeconds',\n  PoolUpperTarget = 'pool__upperTarget',\n  PoolV = 'pool__v',\n  PoolW = 'pool__w',\n  PoolWrappedIndex = 'pool__wrappedIndex',\n  PoolZ = 'pool__z'\n}\n\nexport type PoolHistoricalLiquidity = {\n  __typename?: 'PoolHistoricalLiquidity';\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  poolLiquidity: Scalars['BigDecimal'];\n  poolShareValue: Scalars['BigDecimal'];\n  poolTotalShares: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type PoolHistoricalLiquidity_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<PoolHistoricalLiquidity_Filter>>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<PoolHistoricalLiquidity_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_lt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_lte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum PoolHistoricalLiquidity_OrderBy {\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  PoolLiquidity = 'poolLiquidity',\n  PoolShareValue = 'poolShareValue',\n  PoolTotalShares = 'poolTotalShares',\n  PricingAsset = 'pricingAsset'\n}\n\nexport type PoolShare = {\n  __typename?: 'PoolShare';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  userAddress: User;\n};\n\nexport type PoolShare_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<PoolShare_Filter>>>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<PoolShare_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_?: InputMaybe<User_Filter>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PoolShare_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  UserAddress = 'userAddress',\n  UserAddressId = 'userAddress__id'\n}\n\nexport type PoolSnapshot = {\n  __typename?: 'PoolSnapshot';\n  amounts: Array<Scalars['BigDecimal']>;\n  holdersCount: Scalars['BigInt'];\n  id: Scalars['ID'];\n  liquidity: Scalars['BigDecimal'];\n  pool: Pool;\n  protocolFee?: Maybe<Scalars['BigDecimal']>;\n  swapFees: Scalars['BigDecimal'];\n  swapVolume: Scalars['BigDecimal'];\n  swapsCount: Scalars['BigInt'];\n  timestamp: Scalars['Int'];\n  totalShares: Scalars['BigDecimal'];\n};\n\nexport type PoolSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  and?: InputMaybe<Array<InputMaybe<PoolSnapshot_Filter>>>;\n  holdersCount?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  holdersCount_lt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_lte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  liquidity?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  or?: InputMaybe<Array<InputMaybe<PoolSnapshot_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  protocolFee?: InputMaybe<Scalars['BigDecimal']>;\n  protocolFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFees?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFees_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapsCount?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swapsCount_lt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_lte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolSnapshot_OrderBy {\n  Amounts = 'amounts',\n  HoldersCount = 'holdersCount',\n  Id = 'id',\n  Liquidity = 'liquidity',\n  Pool = 'pool',\n  PoolAddress = 'pool__address',\n  PoolAlpha = 'pool__alpha',\n  PoolAmp = 'pool__amp',\n  PoolBaseToken = 'pool__baseToken',\n  PoolBeta = 'pool__beta',\n  PoolC = 'pool__c',\n  PoolCreateTime = 'pool__createTime',\n  PoolDSq = 'pool__dSq',\n  PoolDelta = 'pool__delta',\n  PoolEpsilon = 'pool__epsilon',\n  PoolExpiryTime = 'pool__expiryTime',\n  PoolFactory = 'pool__factory',\n  PoolHoldersCount = 'pool__holdersCount',\n  PoolId = 'pool__id',\n  PoolIsInRecoveryMode = 'pool__isInRecoveryMode',\n  PoolIsPaused = 'pool__isPaused',\n  PoolJoinExitEnabled = 'pool__joinExitEnabled',\n  PoolLambda = 'pool__lambda',\n  PoolLastJoinExitAmp = 'pool__lastJoinExitAmp',\n  PoolLastPostJoinExitInvariant = 'pool__lastPostJoinExitInvariant',\n  PoolLowerTarget = 'pool__lowerTarget',\n  PoolMainIndex = 'pool__mainIndex',\n  PoolManagementAumFee = 'pool__managementAumFee',\n  PoolManagementFee = 'pool__managementFee',\n  PoolMustAllowlistLPs = 'pool__mustAllowlistLPs',\n  PoolName = 'pool__name',\n  PoolOracleEnabled = 'pool__oracleEnabled',\n  PoolOwner = 'pool__owner',\n  PoolPoolType = 'pool__poolType',\n  PoolPoolTypeVersion = 'pool__poolTypeVersion',\n  PoolPrincipalToken = 'pool__principalToken',\n  PoolProtocolAumFeeCache = 'pool__protocolAumFeeCache',\n  PoolProtocolId = 'pool__protocolId',\n  PoolProtocolSwapFeeCache = 'pool__protocolSwapFeeCache',\n  PoolProtocolYieldFeeCache = 'pool__protocolYieldFeeCache',\n  PoolRoot3Alpha = 'pool__root3Alpha',\n  PoolS = 'pool__s',\n  PoolSqrtAlpha = 'pool__sqrtAlpha',\n  PoolSqrtBeta = 'pool__sqrtBeta',\n  PoolStrategyType = 'pool__strategyType',\n  PoolSwapEnabled = 'pool__swapEnabled',\n  PoolSwapEnabledCurationSignal = 'pool__swapEnabledCurationSignal',\n  PoolSwapEnabledInternal = 'pool__swapEnabledInternal',\n  PoolSwapFee = 'pool__swapFee',\n  PoolSwapsCount = 'pool__swapsCount',\n  PoolSymbol = 'pool__symbol',\n  PoolTauAlphaX = 'pool__tauAlphaX',\n  PoolTauAlphaY = 'pool__tauAlphaY',\n  PoolTauBetaX = 'pool__tauBetaX',\n  PoolTauBetaY = 'pool__tauBetaY',\n  PoolTotalAumFeeCollectedInBpt = 'pool__totalAumFeeCollectedInBPT',\n  PoolTotalLiquidity = 'pool__totalLiquidity',\n  PoolTotalLiquiditySansBpt = 'pool__totalLiquiditySansBPT',\n  PoolTotalProtocolFee = 'pool__totalProtocolFee',\n  PoolTotalProtocolFeePaidInBpt = 'pool__totalProtocolFeePaidInBPT',\n  PoolTotalShares = 'pool__totalShares',\n  PoolTotalSwapFee = 'pool__totalSwapFee',\n  PoolTotalSwapVolume = 'pool__totalSwapVolume',\n  PoolTotalWeight = 'pool__totalWeight',\n  PoolTx = 'pool__tx',\n  PoolU = 'pool__u',\n  PoolUnitSeconds = 'pool__unitSeconds',\n  PoolUpperTarget = 'pool__upperTarget',\n  PoolV = 'pool__v',\n  PoolW = 'pool__w',\n  PoolWrappedIndex = 'pool__wrappedIndex',\n  PoolZ = 'pool__z',\n  ProtocolFee = 'protocolFee',\n  SwapFees = 'swapFees',\n  SwapVolume = 'swapVolume',\n  SwapsCount = 'swapsCount',\n  Timestamp = 'timestamp',\n  TotalShares = 'totalShares'\n}\n\nexport type PoolToken = {\n  __typename?: 'PoolToken';\n  address: Scalars['String'];\n  assetManager: Scalars['Bytes'];\n  balance: Scalars['BigDecimal'];\n  cashBalance: Scalars['BigDecimal'];\n  circuitBreaker?: Maybe<CircuitBreaker>;\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  index?: Maybe<Scalars['Int']>;\n  isExemptFromYieldProtocolFee?: Maybe<Scalars['Boolean']>;\n  managedBalance: Scalars['BigDecimal'];\n  managements?: Maybe<Array<ManagementOperation>>;\n  name: Scalars['String'];\n  oldPriceRate?: Maybe<Scalars['BigDecimal']>;\n  paidProtocolFees?: Maybe<Scalars['BigDecimal']>;\n  poolId?: Maybe<Pool>;\n  priceRate: Scalars['BigDecimal'];\n  symbol: Scalars['String'];\n  token: Token;\n  weight?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type PoolTokenManagementsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ManagementOperation_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<ManagementOperation_Filter>;\n};\n\nexport type PoolToken_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  and?: InputMaybe<Array<InputMaybe<PoolToken_Filter>>>;\n  assetManager?: InputMaybe<Scalars['Bytes']>;\n  assetManager_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManager_gt?: InputMaybe<Scalars['Bytes']>;\n  assetManager_gte?: InputMaybe<Scalars['Bytes']>;\n  assetManager_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  assetManager_lt?: InputMaybe<Scalars['Bytes']>;\n  assetManager_lte?: InputMaybe<Scalars['Bytes']>;\n  assetManager_not?: InputMaybe<Scalars['Bytes']>;\n  assetManager_not_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManager_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  cashBalance?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  cashBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  circuitBreaker?: InputMaybe<Scalars['String']>;\n  circuitBreaker_?: InputMaybe<CircuitBreaker_Filter>;\n  circuitBreaker_contains?: InputMaybe<Scalars['String']>;\n  circuitBreaker_contains_nocase?: InputMaybe<Scalars['String']>;\n  circuitBreaker_ends_with?: InputMaybe<Scalars['String']>;\n  circuitBreaker_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  circuitBreaker_gt?: InputMaybe<Scalars['String']>;\n  circuitBreaker_gte?: InputMaybe<Scalars['String']>;\n  circuitBreaker_in?: InputMaybe<Array<Scalars['String']>>;\n  circuitBreaker_lt?: InputMaybe<Scalars['String']>;\n  circuitBreaker_lte?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not_contains?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not_ends_with?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not_in?: InputMaybe<Array<Scalars['String']>>;\n  circuitBreaker_not_starts_with?: InputMaybe<Scalars['String']>;\n  circuitBreaker_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  circuitBreaker_starts_with?: InputMaybe<Scalars['String']>;\n  circuitBreaker_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  index?: InputMaybe<Scalars['Int']>;\n  index_gt?: InputMaybe<Scalars['Int']>;\n  index_gte?: InputMaybe<Scalars['Int']>;\n  index_in?: InputMaybe<Array<Scalars['Int']>>;\n  index_lt?: InputMaybe<Scalars['Int']>;\n  index_lte?: InputMaybe<Scalars['Int']>;\n  index_not?: InputMaybe<Scalars['Int']>;\n  index_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  isExemptFromYieldProtocolFee?: InputMaybe<Scalars['Boolean']>;\n  isExemptFromYieldProtocolFee_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isExemptFromYieldProtocolFee_not?: InputMaybe<Scalars['Boolean']>;\n  isExemptFromYieldProtocolFee_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  managedBalance?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managedBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managements_?: InputMaybe<ManagementOperation_Filter>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  oldPriceRate?: InputMaybe<Scalars['BigDecimal']>;\n  oldPriceRate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  oldPriceRate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  oldPriceRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  oldPriceRate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  oldPriceRate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  oldPriceRate_not?: InputMaybe<Scalars['BigDecimal']>;\n  oldPriceRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  or?: InputMaybe<Array<InputMaybe<PoolToken_Filter>>>;\n  paidProtocolFees?: InputMaybe<Scalars['BigDecimal']>;\n  paidProtocolFees_gt?: InputMaybe<Scalars['BigDecimal']>;\n  paidProtocolFees_gte?: InputMaybe<Scalars['BigDecimal']>;\n  paidProtocolFees_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  paidProtocolFees_lt?: InputMaybe<Scalars['BigDecimal']>;\n  paidProtocolFees_lte?: InputMaybe<Scalars['BigDecimal']>;\n  paidProtocolFees_not?: InputMaybe<Scalars['BigDecimal']>;\n  paidProtocolFees_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  priceRate?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  priceRate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<Token_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  weight?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolToken_OrderBy {\n  Address = 'address',\n  AssetManager = 'assetManager',\n  Balance = 'balance',\n  CashBalance = 'cashBalance',\n  CircuitBreaker = 'circuitBreaker',\n  CircuitBreakerBptPrice = 'circuitBreaker__bptPrice',\n  CircuitBreakerId = 'circuitBreaker__id',\n  CircuitBreakerLowerBoundPercentage = 'circuitBreaker__lowerBoundPercentage',\n  CircuitBreakerUpperBoundPercentage = 'circuitBreaker__upperBoundPercentage',\n  Decimals = 'decimals',\n  Id = 'id',\n  Index = 'index',\n  IsExemptFromYieldProtocolFee = 'isExemptFromYieldProtocolFee',\n  ManagedBalance = 'managedBalance',\n  Managements = 'managements',\n  Name = 'name',\n  OldPriceRate = 'oldPriceRate',\n  PaidProtocolFees = 'paidProtocolFees',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  PriceRate = 'priceRate',\n  Symbol = 'symbol',\n  Token = 'token',\n  TokenAddress = 'token__address',\n  TokenDecimals = 'token__decimals',\n  TokenFxOracleDecimals = 'token__fxOracleDecimals',\n  TokenId = 'token__id',\n  TokenLatestFxPrice = 'token__latestFXPrice',\n  TokenLatestUsdPrice = 'token__latestUSDPrice',\n  TokenLatestUsdPriceTimestamp = 'token__latestUSDPriceTimestamp',\n  TokenName = 'token__name',\n  TokenSymbol = 'token__symbol',\n  TokenTotalBalanceNotional = 'token__totalBalanceNotional',\n  TokenTotalBalanceUsd = 'token__totalBalanceUSD',\n  TokenTotalSwapCount = 'token__totalSwapCount',\n  TokenTotalVolumeNotional = 'token__totalVolumeNotional',\n  TokenTotalVolumeUsd = 'token__totalVolumeUSD',\n  Weight = 'weight'\n}\n\nexport type Pool_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  alpha?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_gt?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_gte?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  alpha_lt?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_lte?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_not?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amp?: InputMaybe<Scalars['BigInt']>;\n  ampUpdates_?: InputMaybe<AmpUpdate_Filter>;\n  amp_gt?: InputMaybe<Scalars['BigInt']>;\n  amp_gte?: InputMaybe<Scalars['BigInt']>;\n  amp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  amp_lt?: InputMaybe<Scalars['BigInt']>;\n  amp_lte?: InputMaybe<Scalars['BigInt']>;\n  amp_not?: InputMaybe<Scalars['BigInt']>;\n  amp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  and?: InputMaybe<Array<InputMaybe<Pool_Filter>>>;\n  baseToken?: InputMaybe<Scalars['Bytes']>;\n  baseToken_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_gt?: InputMaybe<Scalars['Bytes']>;\n  baseToken_gte?: InputMaybe<Scalars['Bytes']>;\n  baseToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  baseToken_lt?: InputMaybe<Scalars['Bytes']>;\n  baseToken_lte?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  beta?: InputMaybe<Scalars['BigDecimal']>;\n  beta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  beta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  beta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  beta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  beta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  beta_not?: InputMaybe<Scalars['BigDecimal']>;\n  beta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  c?: InputMaybe<Scalars['BigDecimal']>;\n  c_gt?: InputMaybe<Scalars['BigDecimal']>;\n  c_gte?: InputMaybe<Scalars['BigDecimal']>;\n  c_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  c_lt?: InputMaybe<Scalars['BigDecimal']>;\n  c_lte?: InputMaybe<Scalars['BigDecimal']>;\n  c_not?: InputMaybe<Scalars['BigDecimal']>;\n  c_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  circuitBreakers_?: InputMaybe<CircuitBreaker_Filter>;\n  createTime?: InputMaybe<Scalars['Int']>;\n  createTime_gt?: InputMaybe<Scalars['Int']>;\n  createTime_gte?: InputMaybe<Scalars['Int']>;\n  createTime_in?: InputMaybe<Array<Scalars['Int']>>;\n  createTime_lt?: InputMaybe<Scalars['Int']>;\n  createTime_lte?: InputMaybe<Scalars['Int']>;\n  createTime_not?: InputMaybe<Scalars['Int']>;\n  createTime_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  dSq?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_gt?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_gte?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  dSq_lt?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_lte?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_not?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  delta?: InputMaybe<Scalars['BigDecimal']>;\n  delta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  delta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  delta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  delta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  delta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  delta_not?: InputMaybe<Scalars['BigDecimal']>;\n  delta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  epsilon?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_gt?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_gte?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  epsilon_lt?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_lte?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_not?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  expiryTime?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  expiryTime_lt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_lte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  factory?: InputMaybe<Scalars['Bytes']>;\n  factory_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_gt?: InputMaybe<Scalars['Bytes']>;\n  factory_gte?: InputMaybe<Scalars['Bytes']>;\n  factory_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  factory_lt?: InputMaybe<Scalars['Bytes']>;\n  factory_lte?: InputMaybe<Scalars['Bytes']>;\n  factory_not?: InputMaybe<Scalars['Bytes']>;\n  factory_not_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  historicalValues_?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n  holdersCount?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  holdersCount_lt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_lte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isInRecoveryMode?: InputMaybe<Scalars['Boolean']>;\n  isInRecoveryMode_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isInRecoveryMode_not?: InputMaybe<Scalars['Boolean']>;\n  isInRecoveryMode_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPaused?: InputMaybe<Scalars['Boolean']>;\n  isPaused_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPaused_not?: InputMaybe<Scalars['Boolean']>;\n  isPaused_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  joinExitEnabled?: InputMaybe<Scalars['Boolean']>;\n  joinExitEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  joinExitEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  joinExitEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  lambda?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lambda_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_not?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lastJoinExitAmp?: InputMaybe<Scalars['BigInt']>;\n  lastJoinExitAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  lastJoinExitAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  lastJoinExitAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  lastJoinExitAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  lastJoinExitAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  lastJoinExitAmp_not?: InputMaybe<Scalars['BigInt']>;\n  lastJoinExitAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  lastPostJoinExitInvariant?: InputMaybe<Scalars['BigDecimal']>;\n  lastPostJoinExitInvariant_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lastPostJoinExitInvariant_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lastPostJoinExitInvariant_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lastPostJoinExitInvariant_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lastPostJoinExitInvariant_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lastPostJoinExitInvariant_not?: InputMaybe<Scalars['BigDecimal']>;\n  lastPostJoinExitInvariant_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestAmpUpdate?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_?: InputMaybe<AmpUpdate_Filter>;\n  latestAmpUpdate_contains?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_ends_with?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_gt?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_gte?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_in?: InputMaybe<Array<Scalars['String']>>;\n  latestAmpUpdate_lt?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_lte?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not_contains?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not_ends_with?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not_in?: InputMaybe<Array<Scalars['String']>>;\n  latestAmpUpdate_not_starts_with?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_starts_with?: InputMaybe<Scalars['String']>;\n  latestAmpUpdate_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  lowerTarget?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lowerTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  mainIndex?: InputMaybe<Scalars['Int']>;\n  mainIndex_gt?: InputMaybe<Scalars['Int']>;\n  mainIndex_gte?: InputMaybe<Scalars['Int']>;\n  mainIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  mainIndex_lt?: InputMaybe<Scalars['Int']>;\n  mainIndex_lte?: InputMaybe<Scalars['Int']>;\n  mainIndex_not?: InputMaybe<Scalars['Int']>;\n  mainIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  managementAumFee?: InputMaybe<Scalars['BigDecimal']>;\n  managementAumFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managementAumFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managementAumFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managementAumFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managementAumFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managementAumFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  managementAumFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managementFee?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managementFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  mustAllowlistLPs?: InputMaybe<Scalars['Boolean']>;\n  mustAllowlistLPs_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  mustAllowlistLPs_not?: InputMaybe<Scalars['Boolean']>;\n  mustAllowlistLPs_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<InputMaybe<Pool_Filter>>>;\n  oracleEnabled?: InputMaybe<Scalars['Boolean']>;\n  oracleEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  oracleEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  oracleEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  owner?: InputMaybe<Scalars['Bytes']>;\n  owner_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_gt?: InputMaybe<Scalars['Bytes']>;\n  owner_gte?: InputMaybe<Scalars['Bytes']>;\n  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  owner_lt?: InputMaybe<Scalars['Bytes']>;\n  owner_lte?: InputMaybe<Scalars['Bytes']>;\n  owner_not?: InputMaybe<Scalars['Bytes']>;\n  owner_not_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolType?: InputMaybe<Scalars['String']>;\n  poolTypeVersion?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_gt?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_gte?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolTypeVersion_lt?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_lte?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_not?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolType_contains?: InputMaybe<Scalars['String']>;\n  poolType_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_gt?: InputMaybe<Scalars['String']>;\n  poolType_gte?: InputMaybe<Scalars['String']>;\n  poolType_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_lt?: InputMaybe<Scalars['String']>;\n  poolType_lte?: InputMaybe<Scalars['String']>;\n  poolType_not?: InputMaybe<Scalars['String']>;\n  poolType_not_contains?: InputMaybe<Scalars['String']>;\n  poolType_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  priceRateProviders_?: InputMaybe<PriceRateProvider_Filter>;\n  principalToken?: InputMaybe<Scalars['Bytes']>;\n  principalToken_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_gt?: InputMaybe<Scalars['Bytes']>;\n  principalToken_gte?: InputMaybe<Scalars['Bytes']>;\n  principalToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  principalToken_lt?: InputMaybe<Scalars['Bytes']>;\n  principalToken_lte?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  protocolAumFeeCache?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolAumFeeCache_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolId?: InputMaybe<Scalars['Int']>;\n  protocolIdData?: InputMaybe<Scalars['String']>;\n  protocolIdData_?: InputMaybe<ProtocolIdData_Filter>;\n  protocolIdData_contains?: InputMaybe<Scalars['String']>;\n  protocolIdData_contains_nocase?: InputMaybe<Scalars['String']>;\n  protocolIdData_ends_with?: InputMaybe<Scalars['String']>;\n  protocolIdData_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  protocolIdData_gt?: InputMaybe<Scalars['String']>;\n  protocolIdData_gte?: InputMaybe<Scalars['String']>;\n  protocolIdData_in?: InputMaybe<Array<Scalars['String']>>;\n  protocolIdData_lt?: InputMaybe<Scalars['String']>;\n  protocolIdData_lte?: InputMaybe<Scalars['String']>;\n  protocolIdData_not?: InputMaybe<Scalars['String']>;\n  protocolIdData_not_contains?: InputMaybe<Scalars['String']>;\n  protocolIdData_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  protocolIdData_not_ends_with?: InputMaybe<Scalars['String']>;\n  protocolIdData_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  protocolIdData_not_in?: InputMaybe<Array<Scalars['String']>>;\n  protocolIdData_not_starts_with?: InputMaybe<Scalars['String']>;\n  protocolIdData_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  protocolIdData_starts_with?: InputMaybe<Scalars['String']>;\n  protocolIdData_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  protocolId_gt?: InputMaybe<Scalars['Int']>;\n  protocolId_gte?: InputMaybe<Scalars['Int']>;\n  protocolId_in?: InputMaybe<Array<Scalars['Int']>>;\n  protocolId_lt?: InputMaybe<Scalars['Int']>;\n  protocolId_lte?: InputMaybe<Scalars['Int']>;\n  protocolId_not?: InputMaybe<Scalars['Int']>;\n  protocolId_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  protocolSwapFeeCache?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolSwapFeeCache_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolYieldFeeCache?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolYieldFeeCache_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  root3Alpha?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_gt?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_gte?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  root3Alpha_lt?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_lte?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_not?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  s?: InputMaybe<Scalars['BigDecimal']>;\n  s_gt?: InputMaybe<Scalars['BigDecimal']>;\n  s_gte?: InputMaybe<Scalars['BigDecimal']>;\n  s_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  s_lt?: InputMaybe<Scalars['BigDecimal']>;\n  s_lte?: InputMaybe<Scalars['BigDecimal']>;\n  s_not?: InputMaybe<Scalars['BigDecimal']>;\n  s_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  shares_?: InputMaybe<PoolShare_Filter>;\n  snapshots_?: InputMaybe<PoolSnapshot_Filter>;\n  sqrtAlpha?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_gt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_gte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  sqrtAlpha_lt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_lte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_not?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  sqrtBeta?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  sqrtBeta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_not?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  strategyType?: InputMaybe<Scalars['Int']>;\n  strategyType_gt?: InputMaybe<Scalars['Int']>;\n  strategyType_gte?: InputMaybe<Scalars['Int']>;\n  strategyType_in?: InputMaybe<Array<Scalars['Int']>>;\n  strategyType_lt?: InputMaybe<Scalars['Int']>;\n  strategyType_lte?: InputMaybe<Scalars['Int']>;\n  strategyType_not?: InputMaybe<Scalars['Int']>;\n  strategyType_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  swapEnabled?: InputMaybe<Scalars['Boolean']>;\n  swapEnabledCurationSignal?: InputMaybe<Scalars['Boolean']>;\n  swapEnabledCurationSignal_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabledCurationSignal_not?: InputMaybe<Scalars['Boolean']>;\n  swapEnabledCurationSignal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabledInternal?: InputMaybe<Scalars['Boolean']>;\n  swapEnabledInternal_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabledInternal_not?: InputMaybe<Scalars['Boolean']>;\n  swapEnabledInternal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapFee?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapsCount?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swapsCount_lt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_lte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swaps_?: InputMaybe<Swap_Filter>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tauAlphaX?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauAlphaX_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauAlphaY?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauAlphaY_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaX?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaX_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaY?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaY_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokensList?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokens_?: InputMaybe<PoolToken_Filter>;\n  totalAumFeeCollectedInBPT?: InputMaybe<Scalars['BigDecimal']>;\n  totalAumFeeCollectedInBPT_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalAumFeeCollectedInBPT_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalAumFeeCollectedInBPT_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalAumFeeCollectedInBPT_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalAumFeeCollectedInBPT_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalAumFeeCollectedInBPT_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalAumFeeCollectedInBPT_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquiditySansBPT_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquiditySansBPT_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFeePaidInBPT_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFeePaidInBPT_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalProtocolFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalProtocolFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_gt?: InputMaybe<Scalars['Bytes']>;\n  tx_gte?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_lt?: InputMaybe<Scalars['Bytes']>;\n  tx_lte?: InputMaybe<Scalars['Bytes']>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  u?: InputMaybe<Scalars['BigDecimal']>;\n  u_gt?: InputMaybe<Scalars['BigDecimal']>;\n  u_gte?: InputMaybe<Scalars['BigDecimal']>;\n  u_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  u_lt?: InputMaybe<Scalars['BigDecimal']>;\n  u_lte?: InputMaybe<Scalars['BigDecimal']>;\n  u_not?: InputMaybe<Scalars['BigDecimal']>;\n  u_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  unitSeconds?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  unitSeconds_lt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_lte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  upperTarget?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  upperTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  v?: InputMaybe<Scalars['BigDecimal']>;\n  v_gt?: InputMaybe<Scalars['BigDecimal']>;\n  v_gte?: InputMaybe<Scalars['BigDecimal']>;\n  v_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  v_lt?: InputMaybe<Scalars['BigDecimal']>;\n  v_lte?: InputMaybe<Scalars['BigDecimal']>;\n  v_not?: InputMaybe<Scalars['BigDecimal']>;\n  v_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vaultID?: InputMaybe<Scalars['String']>;\n  vaultID_?: InputMaybe<Balancer_Filter>;\n  vaultID_contains?: InputMaybe<Scalars['String']>;\n  vaultID_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_gt?: InputMaybe<Scalars['String']>;\n  vaultID_gte?: InputMaybe<Scalars['String']>;\n  vaultID_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_lt?: InputMaybe<Scalars['String']>;\n  vaultID_lte?: InputMaybe<Scalars['String']>;\n  vaultID_not?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_not_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  w?: InputMaybe<Scalars['BigDecimal']>;\n  w_gt?: InputMaybe<Scalars['BigDecimal']>;\n  w_gte?: InputMaybe<Scalars['BigDecimal']>;\n  w_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  w_lt?: InputMaybe<Scalars['BigDecimal']>;\n  w_lte?: InputMaybe<Scalars['BigDecimal']>;\n  w_not?: InputMaybe<Scalars['BigDecimal']>;\n  w_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weightUpdates_?: InputMaybe<GradualWeightUpdate_Filter>;\n  wrappedIndex?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  wrappedIndex_lt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_lte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  z?: InputMaybe<Scalars['BigDecimal']>;\n  z_gt?: InputMaybe<Scalars['BigDecimal']>;\n  z_gte?: InputMaybe<Scalars['BigDecimal']>;\n  z_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  z_lt?: InputMaybe<Scalars['BigDecimal']>;\n  z_lte?: InputMaybe<Scalars['BigDecimal']>;\n  z_not?: InputMaybe<Scalars['BigDecimal']>;\n  z_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Pool_OrderBy {\n  Address = 'address',\n  Alpha = 'alpha',\n  Amp = 'amp',\n  AmpUpdates = 'ampUpdates',\n  BaseToken = 'baseToken',\n  Beta = 'beta',\n  C = 'c',\n  CircuitBreakers = 'circuitBreakers',\n  CreateTime = 'createTime',\n  DSq = 'dSq',\n  Delta = 'delta',\n  Epsilon = 'epsilon',\n  ExpiryTime = 'expiryTime',\n  Factory = 'factory',\n  HistoricalValues = 'historicalValues',\n  HoldersCount = 'holdersCount',\n  Id = 'id',\n  IsInRecoveryMode = 'isInRecoveryMode',\n  IsPaused = 'isPaused',\n  JoinExitEnabled = 'joinExitEnabled',\n  Lambda = 'lambda',\n  LastJoinExitAmp = 'lastJoinExitAmp',\n  LastPostJoinExitInvariant = 'lastPostJoinExitInvariant',\n  LatestAmpUpdate = 'latestAmpUpdate',\n  LatestAmpUpdateEndAmp = 'latestAmpUpdate__endAmp',\n  LatestAmpUpdateEndTimestamp = 'latestAmpUpdate__endTimestamp',\n  LatestAmpUpdateId = 'latestAmpUpdate__id',\n  LatestAmpUpdateScheduledTimestamp = 'latestAmpUpdate__scheduledTimestamp',\n  LatestAmpUpdateStartAmp = 'latestAmpUpdate__startAmp',\n  LatestAmpUpdateStartTimestamp = 'latestAmpUpdate__startTimestamp',\n  LowerTarget = 'lowerTarget',\n  MainIndex = 'mainIndex',\n  ManagementAumFee = 'managementAumFee',\n  ManagementFee = 'managementFee',\n  MustAllowlistLPs = 'mustAllowlistLPs',\n  Name = 'name',\n  OracleEnabled = 'oracleEnabled',\n  Owner = 'owner',\n  PoolType = 'poolType',\n  PoolTypeVersion = 'poolTypeVersion',\n  PriceRateProviders = 'priceRateProviders',\n  PrincipalToken = 'principalToken',\n  ProtocolAumFeeCache = 'protocolAumFeeCache',\n  ProtocolId = 'protocolId',\n  ProtocolIdData = 'protocolIdData',\n  ProtocolIdDataId = 'protocolIdData__id',\n  ProtocolIdDataName = 'protocolIdData__name',\n  ProtocolSwapFeeCache = 'protocolSwapFeeCache',\n  ProtocolYieldFeeCache = 'protocolYieldFeeCache',\n  Root3Alpha = 'root3Alpha',\n  S = 's',\n  Shares = 'shares',\n  Snapshots = 'snapshots',\n  SqrtAlpha = 'sqrtAlpha',\n  SqrtBeta = 'sqrtBeta',\n  StrategyType = 'strategyType',\n  SwapEnabled = 'swapEnabled',\n  SwapEnabledCurationSignal = 'swapEnabledCurationSignal',\n  SwapEnabledInternal = 'swapEnabledInternal',\n  SwapFee = 'swapFee',\n  Swaps = 'swaps',\n  SwapsCount = 'swapsCount',\n  Symbol = 'symbol',\n  TauAlphaX = 'tauAlphaX',\n  TauAlphaY = 'tauAlphaY',\n  TauBetaX = 'tauBetaX',\n  TauBetaY = 'tauBetaY',\n  Tokens = 'tokens',\n  TokensList = 'tokensList',\n  TotalAumFeeCollectedInBpt = 'totalAumFeeCollectedInBPT',\n  TotalLiquidity = 'totalLiquidity',\n  TotalLiquiditySansBpt = 'totalLiquiditySansBPT',\n  TotalProtocolFee = 'totalProtocolFee',\n  TotalProtocolFeePaidInBpt = 'totalProtocolFeePaidInBPT',\n  TotalShares = 'totalShares',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  TotalWeight = 'totalWeight',\n  Tx = 'tx',\n  U = 'u',\n  UnitSeconds = 'unitSeconds',\n  UpperTarget = 'upperTarget',\n  V = 'v',\n  VaultId = 'vaultID',\n  VaultIdId = 'vaultID__id',\n  VaultIdPoolCount = 'vaultID__poolCount',\n  VaultIdProtocolFeesCollector = 'vaultID__protocolFeesCollector',\n  VaultIdTotalLiquidity = 'vaultID__totalLiquidity',\n  VaultIdTotalProtocolFee = 'vaultID__totalProtocolFee',\n  VaultIdTotalSwapCount = 'vaultID__totalSwapCount',\n  VaultIdTotalSwapFee = 'vaultID__totalSwapFee',\n  VaultIdTotalSwapVolume = 'vaultID__totalSwapVolume',\n  W = 'w',\n  WeightUpdates = 'weightUpdates',\n  WrappedIndex = 'wrappedIndex',\n  Z = 'z'\n}\n\nexport type PriceRateProvider = {\n  __typename?: 'PriceRateProvider';\n  address: Scalars['Bytes'];\n  cacheDuration?: Maybe<Scalars['Int']>;\n  cacheExpiry?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  lastCached?: Maybe<Scalars['Int']>;\n  poolId: Pool;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  token: PoolToken;\n};\n\nexport type PriceRateProvider_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  and?: InputMaybe<Array<InputMaybe<PriceRateProvider_Filter>>>;\n  cacheDuration?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheDuration_lt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_lte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry_lt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_lte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lastCached?: InputMaybe<Scalars['Int']>;\n  lastCached_gt?: InputMaybe<Scalars['Int']>;\n  lastCached_gte?: InputMaybe<Scalars['Int']>;\n  lastCached_in?: InputMaybe<Array<Scalars['Int']>>;\n  lastCached_lt?: InputMaybe<Scalars['Int']>;\n  lastCached_lte?: InputMaybe<Scalars['Int']>;\n  lastCached_not?: InputMaybe<Scalars['Int']>;\n  lastCached_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  or?: InputMaybe<Array<InputMaybe<PriceRateProvider_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rate?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<PoolToken_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PriceRateProvider_OrderBy {\n  Address = 'address',\n  CacheDuration = 'cacheDuration',\n  CacheExpiry = 'cacheExpiry',\n  Id = 'id',\n  LastCached = 'lastCached',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  Rate = 'rate',\n  Token = 'token',\n  TokenAddress = 'token__address',\n  TokenAssetManager = 'token__assetManager',\n  TokenBalance = 'token__balance',\n  TokenCashBalance = 'token__cashBalance',\n  TokenDecimals = 'token__decimals',\n  TokenId = 'token__id',\n  TokenIndex = 'token__index',\n  TokenIsExemptFromYieldProtocolFee = 'token__isExemptFromYieldProtocolFee',\n  TokenManagedBalance = 'token__managedBalance',\n  TokenName = 'token__name',\n  TokenOldPriceRate = 'token__oldPriceRate',\n  TokenPaidProtocolFees = 'token__paidProtocolFees',\n  TokenPriceRate = 'token__priceRate',\n  TokenSymbol = 'token__symbol',\n  TokenWeight = 'token__weight'\n}\n\nexport type ProtocolIdData = {\n  __typename?: 'ProtocolIdData';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type ProtocolIdData_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<ProtocolIdData_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<InputMaybe<ProtocolIdData_Filter>>>;\n};\n\nexport enum ProtocolIdData_OrderBy {\n  Id = 'id',\n  Name = 'name'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  circuitBreaker?: Maybe<CircuitBreaker>;\n  circuitBreakers: Array<CircuitBreaker>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  managementOperation?: Maybe<ManagementOperation>;\n  managementOperations: Array<ManagementOperation>;\n  pool?: Maybe<Pool>;\n  poolContract?: Maybe<PoolContract>;\n  poolContracts: Array<PoolContract>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  protocolIdData?: Maybe<ProtocolIdData>;\n  protocolIdDatas: Array<ProtocolIdData>;\n  swap?: Maybe<Swap>;\n  swapFeeUpdate?: Maybe<SwapFeeUpdate>;\n  swapFeeUpdates: Array<SwapFeeUpdate>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type QueryAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type QueryBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type QueryBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type QueryCircuitBreakerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryCircuitBreakersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<CircuitBreaker_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<CircuitBreaker_Filter>;\n};\n\n\nexport type QueryGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type QueryJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type QueryLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type QueryManagementOperationArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryManagementOperationsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ManagementOperation_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<ManagementOperation_Filter>;\n};\n\n\nexport type QueryPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolContractArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolContractsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolContract_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolContract_Filter>;\n};\n\n\nexport type QueryPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type QueryPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type QueryPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type QueryPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type QueryPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type QueryPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type QueryProtocolIdDataArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryProtocolIdDatasArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ProtocolIdData_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<ProtocolIdData_Filter>;\n};\n\n\nexport type QuerySwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySwapFeeUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySwapFeeUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SwapFeeUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<SwapFeeUpdate_Filter>;\n};\n\n\nexport type QuerySwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type QueryTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type QueryTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type QueryTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type QueryTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type QueryTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type QueryUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type QueryUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  circuitBreaker?: Maybe<CircuitBreaker>;\n  circuitBreakers: Array<CircuitBreaker>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  managementOperation?: Maybe<ManagementOperation>;\n  managementOperations: Array<ManagementOperation>;\n  pool?: Maybe<Pool>;\n  poolContract?: Maybe<PoolContract>;\n  poolContracts: Array<PoolContract>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  protocolIdData?: Maybe<ProtocolIdData>;\n  protocolIdDatas: Array<ProtocolIdData>;\n  swap?: Maybe<Swap>;\n  swapFeeUpdate?: Maybe<SwapFeeUpdate>;\n  swapFeeUpdates: Array<SwapFeeUpdate>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type SubscriptionAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type SubscriptionBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type SubscriptionBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type SubscriptionCircuitBreakerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionCircuitBreakersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<CircuitBreaker_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<CircuitBreaker_Filter>;\n};\n\n\nexport type SubscriptionGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type SubscriptionJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type SubscriptionLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type SubscriptionManagementOperationArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionManagementOperationsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ManagementOperation_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<ManagementOperation_Filter>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolContractArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolContractsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolContract_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolContract_Filter>;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type SubscriptionPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type SubscriptionPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type SubscriptionPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type SubscriptionProtocolIdDataArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionProtocolIdDatasArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ProtocolIdData_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<ProtocolIdData_Filter>;\n};\n\n\nexport type SubscriptionSwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSwapFeeUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSwapFeeUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SwapFeeUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<SwapFeeUpdate_Filter>;\n};\n\n\nexport type SubscriptionSwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type SubscriptionTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type SubscriptionTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type SubscriptionTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type SubscriptionUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type SubscriptionUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Swap = {\n  __typename?: 'Swap';\n  caller: Scalars['Bytes'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  timestamp: Scalars['Int'];\n  tokenAmountIn: Scalars['BigDecimal'];\n  tokenAmountOut: Scalars['BigDecimal'];\n  tokenIn: Scalars['Bytes'];\n  tokenInSym: Scalars['String'];\n  tokenOut: Scalars['Bytes'];\n  tokenOutSym: Scalars['String'];\n  tx: Scalars['Bytes'];\n  userAddress: User;\n  valueUSD: Scalars['BigDecimal'];\n};\n\nexport type SwapFeeUpdate = {\n  __typename?: 'SwapFeeUpdate';\n  endSwapFeePercentage: Scalars['BigDecimal'];\n  endTimestamp: Scalars['BigInt'];\n  id: Scalars['ID'];\n  pool: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startSwapFeePercentage: Scalars['BigDecimal'];\n  startTimestamp: Scalars['BigInt'];\n};\n\nexport type SwapFeeUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<SwapFeeUpdate_Filter>>>;\n  endSwapFeePercentage?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_gt?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_gte?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  endSwapFeePercentage_lt?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_lte?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_not?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<SwapFeeUpdate_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startSwapFeePercentage?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_gt?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_gte?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  startSwapFeePercentage_lt?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_lte?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_not?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum SwapFeeUpdate_OrderBy {\n  EndSwapFeePercentage = 'endSwapFeePercentage',\n  EndTimestamp = 'endTimestamp',\n  Id = 'id',\n  Pool = 'pool',\n  PoolAddress = 'pool__address',\n  PoolAlpha = 'pool__alpha',\n  PoolAmp = 'pool__amp',\n  PoolBaseToken = 'pool__baseToken',\n  PoolBeta = 'pool__beta',\n  PoolC = 'pool__c',\n  PoolCreateTime = 'pool__createTime',\n  PoolDSq = 'pool__dSq',\n  PoolDelta = 'pool__delta',\n  PoolEpsilon = 'pool__epsilon',\n  PoolExpiryTime = 'pool__expiryTime',\n  PoolFactory = 'pool__factory',\n  PoolHoldersCount = 'pool__holdersCount',\n  PoolId = 'pool__id',\n  PoolIsInRecoveryMode = 'pool__isInRecoveryMode',\n  PoolIsPaused = 'pool__isPaused',\n  PoolJoinExitEnabled = 'pool__joinExitEnabled',\n  PoolLambda = 'pool__lambda',\n  PoolLastJoinExitAmp = 'pool__lastJoinExitAmp',\n  PoolLastPostJoinExitInvariant = 'pool__lastPostJoinExitInvariant',\n  PoolLowerTarget = 'pool__lowerTarget',\n  PoolMainIndex = 'pool__mainIndex',\n  PoolManagementAumFee = 'pool__managementAumFee',\n  PoolManagementFee = 'pool__managementFee',\n  PoolMustAllowlistLPs = 'pool__mustAllowlistLPs',\n  PoolName = 'pool__name',\n  PoolOracleEnabled = 'pool__oracleEnabled',\n  PoolOwner = 'pool__owner',\n  PoolPoolType = 'pool__poolType',\n  PoolPoolTypeVersion = 'pool__poolTypeVersion',\n  PoolPrincipalToken = 'pool__principalToken',\n  PoolProtocolAumFeeCache = 'pool__protocolAumFeeCache',\n  PoolProtocolId = 'pool__protocolId',\n  PoolProtocolSwapFeeCache = 'pool__protocolSwapFeeCache',\n  PoolProtocolYieldFeeCache = 'pool__protocolYieldFeeCache',\n  PoolRoot3Alpha = 'pool__root3Alpha',\n  PoolS = 'pool__s',\n  PoolSqrtAlpha = 'pool__sqrtAlpha',\n  PoolSqrtBeta = 'pool__sqrtBeta',\n  PoolStrategyType = 'pool__strategyType',\n  PoolSwapEnabled = 'pool__swapEnabled',\n  PoolSwapEnabledCurationSignal = 'pool__swapEnabledCurationSignal',\n  PoolSwapEnabledInternal = 'pool__swapEnabledInternal',\n  PoolSwapFee = 'pool__swapFee',\n  PoolSwapsCount = 'pool__swapsCount',\n  PoolSymbol = 'pool__symbol',\n  PoolTauAlphaX = 'pool__tauAlphaX',\n  PoolTauAlphaY = 'pool__tauAlphaY',\n  PoolTauBetaX = 'pool__tauBetaX',\n  PoolTauBetaY = 'pool__tauBetaY',\n  PoolTotalAumFeeCollectedInBpt = 'pool__totalAumFeeCollectedInBPT',\n  PoolTotalLiquidity = 'pool__totalLiquidity',\n  PoolTotalLiquiditySansBpt = 'pool__totalLiquiditySansBPT',\n  PoolTotalProtocolFee = 'pool__totalProtocolFee',\n  PoolTotalProtocolFeePaidInBpt = 'pool__totalProtocolFeePaidInBPT',\n  PoolTotalShares = 'pool__totalShares',\n  PoolTotalSwapFee = 'pool__totalSwapFee',\n  PoolTotalSwapVolume = 'pool__totalSwapVolume',\n  PoolTotalWeight = 'pool__totalWeight',\n  PoolTx = 'pool__tx',\n  PoolU = 'pool__u',\n  PoolUnitSeconds = 'pool__unitSeconds',\n  PoolUpperTarget = 'pool__upperTarget',\n  PoolV = 'pool__v',\n  PoolW = 'pool__w',\n  PoolWrappedIndex = 'pool__wrappedIndex',\n  PoolZ = 'pool__z',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartSwapFeePercentage = 'startSwapFeePercentage',\n  StartTimestamp = 'startTimestamp'\n}\n\nexport type Swap_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<Swap_Filter>>>;\n  caller?: InputMaybe<Scalars['Bytes']>;\n  caller_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_gt?: InputMaybe<Scalars['Bytes']>;\n  caller_gte?: InputMaybe<Scalars['Bytes']>;\n  caller_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  caller_lt?: InputMaybe<Scalars['Bytes']>;\n  caller_lte?: InputMaybe<Scalars['Bytes']>;\n  caller_not?: InputMaybe<Scalars['Bytes']>;\n  caller_not_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<Swap_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tokenAmountIn?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountIn_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenIn?: InputMaybe<Scalars['Bytes']>;\n  tokenInSym?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_gt?: InputMaybe<Scalars['String']>;\n  tokenInSym_gte?: InputMaybe<Scalars['String']>;\n  tokenInSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_lt?: InputMaybe<Scalars['String']>;\n  tokenInSym_lte?: InputMaybe<Scalars['String']>;\n  tokenInSym_not?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenIn_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_gt?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_gte?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenIn_lt?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_lte?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut?: InputMaybe<Scalars['Bytes']>;\n  tokenOutSym?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_lt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_lte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOut_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_gt?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_gte?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut_lt?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_lte?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_gt?: InputMaybe<Scalars['Bytes']>;\n  tx_gte?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_lt?: InputMaybe<Scalars['Bytes']>;\n  tx_lte?: InputMaybe<Scalars['Bytes']>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_?: InputMaybe<User_Filter>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  valueUSD?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  valueUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Swap_OrderBy {\n  Caller = 'caller',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  Timestamp = 'timestamp',\n  TokenAmountIn = 'tokenAmountIn',\n  TokenAmountOut = 'tokenAmountOut',\n  TokenIn = 'tokenIn',\n  TokenInSym = 'tokenInSym',\n  TokenOut = 'tokenOut',\n  TokenOutSym = 'tokenOutSym',\n  Tx = 'tx',\n  UserAddress = 'userAddress',\n  UserAddressId = 'userAddress__id',\n  ValueUsd = 'valueUSD'\n}\n\nexport type Token = {\n  __typename?: 'Token';\n  address: Scalars['String'];\n  decimals: Scalars['Int'];\n  fxOracleDecimals?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  latestFXPrice?: Maybe<Scalars['BigDecimal']>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestUSDPrice?: Maybe<Scalars['BigDecimal']>;\n  latestUSDPriceTimestamp?: Maybe<Scalars['BigInt']>;\n  name?: Maybe<Scalars['String']>;\n  pool?: Maybe<Pool>;\n  symbol?: Maybe<Scalars['String']>;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenPrice = {\n  __typename?: 'TokenPrice';\n  amount: Scalars['BigDecimal'];\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n};\n\nexport type TokenPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amount?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amount_lt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_lte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  and?: InputMaybe<Array<InputMaybe<TokenPrice_Filter>>>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_gt?: InputMaybe<Scalars['Bytes']>;\n  asset_gte?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_lt?: InputMaybe<Scalars['Bytes']>;\n  asset_lte?: InputMaybe<Scalars['Bytes']>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<TokenPrice_Filter>>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_lt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_lte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum TokenPrice_OrderBy {\n  Amount = 'amount',\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolIdAddress = 'poolId__address',\n  PoolIdAlpha = 'poolId__alpha',\n  PoolIdAmp = 'poolId__amp',\n  PoolIdBaseToken = 'poolId__baseToken',\n  PoolIdBeta = 'poolId__beta',\n  PoolIdC = 'poolId__c',\n  PoolIdCreateTime = 'poolId__createTime',\n  PoolIdDSq = 'poolId__dSq',\n  PoolIdDelta = 'poolId__delta',\n  PoolIdEpsilon = 'poolId__epsilon',\n  PoolIdExpiryTime = 'poolId__expiryTime',\n  PoolIdFactory = 'poolId__factory',\n  PoolIdHoldersCount = 'poolId__holdersCount',\n  PoolIdId = 'poolId__id',\n  PoolIdIsInRecoveryMode = 'poolId__isInRecoveryMode',\n  PoolIdIsPaused = 'poolId__isPaused',\n  PoolIdJoinExitEnabled = 'poolId__joinExitEnabled',\n  PoolIdLambda = 'poolId__lambda',\n  PoolIdLastJoinExitAmp = 'poolId__lastJoinExitAmp',\n  PoolIdLastPostJoinExitInvariant = 'poolId__lastPostJoinExitInvariant',\n  PoolIdLowerTarget = 'poolId__lowerTarget',\n  PoolIdMainIndex = 'poolId__mainIndex',\n  PoolIdManagementAumFee = 'poolId__managementAumFee',\n  PoolIdManagementFee = 'poolId__managementFee',\n  PoolIdMustAllowlistLPs = 'poolId__mustAllowlistLPs',\n  PoolIdName = 'poolId__name',\n  PoolIdOracleEnabled = 'poolId__oracleEnabled',\n  PoolIdOwner = 'poolId__owner',\n  PoolIdPoolType = 'poolId__poolType',\n  PoolIdPoolTypeVersion = 'poolId__poolTypeVersion',\n  PoolIdPrincipalToken = 'poolId__principalToken',\n  PoolIdProtocolAumFeeCache = 'poolId__protocolAumFeeCache',\n  PoolIdProtocolId = 'poolId__protocolId',\n  PoolIdProtocolSwapFeeCache = 'poolId__protocolSwapFeeCache',\n  PoolIdProtocolYieldFeeCache = 'poolId__protocolYieldFeeCache',\n  PoolIdRoot3Alpha = 'poolId__root3Alpha',\n  PoolIdS = 'poolId__s',\n  PoolIdSqrtAlpha = 'poolId__sqrtAlpha',\n  PoolIdSqrtBeta = 'poolId__sqrtBeta',\n  PoolIdStrategyType = 'poolId__strategyType',\n  PoolIdSwapEnabled = 'poolId__swapEnabled',\n  PoolIdSwapEnabledCurationSignal = 'poolId__swapEnabledCurationSignal',\n  PoolIdSwapEnabledInternal = 'poolId__swapEnabledInternal',\n  PoolIdSwapFee = 'poolId__swapFee',\n  PoolIdSwapsCount = 'poolId__swapsCount',\n  PoolIdSymbol = 'poolId__symbol',\n  PoolIdTauAlphaX = 'poolId__tauAlphaX',\n  PoolIdTauAlphaY = 'poolId__tauAlphaY',\n  PoolIdTauBetaX = 'poolId__tauBetaX',\n  PoolIdTauBetaY = 'poolId__tauBetaY',\n  PoolIdTotalAumFeeCollectedInBpt = 'poolId__totalAumFeeCollectedInBPT',\n  PoolIdTotalLiquidity = 'poolId__totalLiquidity',\n  PoolIdTotalLiquiditySansBpt = 'poolId__totalLiquiditySansBPT',\n  PoolIdTotalProtocolFee = 'poolId__totalProtocolFee',\n  PoolIdTotalProtocolFeePaidInBpt = 'poolId__totalProtocolFeePaidInBPT',\n  PoolIdTotalShares = 'poolId__totalShares',\n  PoolIdTotalSwapFee = 'poolId__totalSwapFee',\n  PoolIdTotalSwapVolume = 'poolId__totalSwapVolume',\n  PoolIdTotalWeight = 'poolId__totalWeight',\n  PoolIdTx = 'poolId__tx',\n  PoolIdU = 'poolId__u',\n  PoolIdUnitSeconds = 'poolId__unitSeconds',\n  PoolIdUpperTarget = 'poolId__upperTarget',\n  PoolIdV = 'poolId__v',\n  PoolIdW = 'poolId__w',\n  PoolIdWrappedIndex = 'poolId__wrappedIndex',\n  PoolIdZ = 'poolId__z',\n  Price = 'price',\n  PricingAsset = 'pricingAsset',\n  Timestamp = 'timestamp'\n}\n\nexport type TokenSnapshot = {\n  __typename?: 'TokenSnapshot';\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  token: Token;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<TokenSnapshot_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<TokenSnapshot_Filter>>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<Token_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TokenSnapshot_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Token = 'token',\n  TokenAddress = 'token__address',\n  TokenDecimals = 'token__decimals',\n  TokenFxOracleDecimals = 'token__fxOracleDecimals',\n  TokenId = 'token__id',\n  TokenLatestFxPrice = 'token__latestFXPrice',\n  TokenLatestUsdPrice = 'token__latestUSDPrice',\n  TokenLatestUsdPriceTimestamp = 'token__latestUSDPriceTimestamp',\n  TokenName = 'token__name',\n  TokenSymbol = 'token__symbol',\n  TokenTotalBalanceNotional = 'token__totalBalanceNotional',\n  TokenTotalBalanceUsd = 'token__totalBalanceUSD',\n  TokenTotalSwapCount = 'token__totalSwapCount',\n  TokenTotalVolumeNotional = 'token__totalVolumeNotional',\n  TokenTotalVolumeUsd = 'token__totalVolumeUSD',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type Token_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  and?: InputMaybe<Array<InputMaybe<Token_Filter>>>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  fxOracleDecimals?: InputMaybe<Scalars['Int']>;\n  fxOracleDecimals_gt?: InputMaybe<Scalars['Int']>;\n  fxOracleDecimals_gte?: InputMaybe<Scalars['Int']>;\n  fxOracleDecimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  fxOracleDecimals_lt?: InputMaybe<Scalars['Int']>;\n  fxOracleDecimals_lte?: InputMaybe<Scalars['Int']>;\n  fxOracleDecimals_not?: InputMaybe<Scalars['Int']>;\n  fxOracleDecimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  latestFXPrice?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_gt?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_gte?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestFXPrice_lt?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_lte?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_not?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestPrice?: InputMaybe<Scalars['String']>;\n  latestPrice_?: InputMaybe<LatestPrice_Filter>;\n  latestPrice_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_gt?: InputMaybe<Scalars['String']>;\n  latestPrice_gte?: InputMaybe<Scalars['String']>;\n  latestPrice_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_lt?: InputMaybe<Scalars['String']>;\n  latestPrice_lte?: InputMaybe<Scalars['String']>;\n  latestPrice_not?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_not_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestUSDPrice?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPriceTimestamp?: InputMaybe<Scalars['BigInt']>;\n  latestUSDPriceTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  latestUSDPriceTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  latestUSDPriceTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  latestUSDPriceTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  latestUSDPriceTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  latestUSDPriceTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  latestUSDPriceTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  latestUSDPrice_gt?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_gte?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestUSDPrice_lt?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_lte?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_not?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<InputMaybe<Token_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Token_OrderBy {\n  Address = 'address',\n  Decimals = 'decimals',\n  FxOracleDecimals = 'fxOracleDecimals',\n  Id = 'id',\n  LatestFxPrice = 'latestFXPrice',\n  LatestPrice = 'latestPrice',\n  LatestPriceAsset = 'latestPrice__asset',\n  LatestPriceBlock = 'latestPrice__block',\n  LatestPriceId = 'latestPrice__id',\n  LatestPricePrice = 'latestPrice__price',\n  LatestPricePricingAsset = 'latestPrice__pricingAsset',\n  LatestUsdPrice = 'latestUSDPrice',\n  LatestUsdPriceTimestamp = 'latestUSDPriceTimestamp',\n  Name = 'name',\n  Pool = 'pool',\n  PoolAddress = 'pool__address',\n  PoolAlpha = 'pool__alpha',\n  PoolAmp = 'pool__amp',\n  PoolBaseToken = 'pool__baseToken',\n  PoolBeta = 'pool__beta',\n  PoolC = 'pool__c',\n  PoolCreateTime = 'pool__createTime',\n  PoolDSq = 'pool__dSq',\n  PoolDelta = 'pool__delta',\n  PoolEpsilon = 'pool__epsilon',\n  PoolExpiryTime = 'pool__expiryTime',\n  PoolFactory = 'pool__factory',\n  PoolHoldersCount = 'pool__holdersCount',\n  PoolId = 'pool__id',\n  PoolIsInRecoveryMode = 'pool__isInRecoveryMode',\n  PoolIsPaused = 'pool__isPaused',\n  PoolJoinExitEnabled = 'pool__joinExitEnabled',\n  PoolLambda = 'pool__lambda',\n  PoolLastJoinExitAmp = 'pool__lastJoinExitAmp',\n  PoolLastPostJoinExitInvariant = 'pool__lastPostJoinExitInvariant',\n  PoolLowerTarget = 'pool__lowerTarget',\n  PoolMainIndex = 'pool__mainIndex',\n  PoolManagementAumFee = 'pool__managementAumFee',\n  PoolManagementFee = 'pool__managementFee',\n  PoolMustAllowlistLPs = 'pool__mustAllowlistLPs',\n  PoolName = 'pool__name',\n  PoolOracleEnabled = 'pool__oracleEnabled',\n  PoolOwner = 'pool__owner',\n  PoolPoolType = 'pool__poolType',\n  PoolPoolTypeVersion = 'pool__poolTypeVersion',\n  PoolPrincipalToken = 'pool__principalToken',\n  PoolProtocolAumFeeCache = 'pool__protocolAumFeeCache',\n  PoolProtocolId = 'pool__protocolId',\n  PoolProtocolSwapFeeCache = 'pool__protocolSwapFeeCache',\n  PoolProtocolYieldFeeCache = 'pool__protocolYieldFeeCache',\n  PoolRoot3Alpha = 'pool__root3Alpha',\n  PoolS = 'pool__s',\n  PoolSqrtAlpha = 'pool__sqrtAlpha',\n  PoolSqrtBeta = 'pool__sqrtBeta',\n  PoolStrategyType = 'pool__strategyType',\n  PoolSwapEnabled = 'pool__swapEnabled',\n  PoolSwapEnabledCurationSignal = 'pool__swapEnabledCurationSignal',\n  PoolSwapEnabledInternal = 'pool__swapEnabledInternal',\n  PoolSwapFee = 'pool__swapFee',\n  PoolSwapsCount = 'pool__swapsCount',\n  PoolSymbol = 'pool__symbol',\n  PoolTauAlphaX = 'pool__tauAlphaX',\n  PoolTauAlphaY = 'pool__tauAlphaY',\n  PoolTauBetaX = 'pool__tauBetaX',\n  PoolTauBetaY = 'pool__tauBetaY',\n  PoolTotalAumFeeCollectedInBpt = 'pool__totalAumFeeCollectedInBPT',\n  PoolTotalLiquidity = 'pool__totalLiquidity',\n  PoolTotalLiquiditySansBpt = 'pool__totalLiquiditySansBPT',\n  PoolTotalProtocolFee = 'pool__totalProtocolFee',\n  PoolTotalProtocolFeePaidInBpt = 'pool__totalProtocolFeePaidInBPT',\n  PoolTotalShares = 'pool__totalShares',\n  PoolTotalSwapFee = 'pool__totalSwapFee',\n  PoolTotalSwapVolume = 'pool__totalSwapVolume',\n  PoolTotalWeight = 'pool__totalWeight',\n  PoolTx = 'pool__tx',\n  PoolU = 'pool__u',\n  PoolUnitSeconds = 'pool__unitSeconds',\n  PoolUpperTarget = 'pool__upperTarget',\n  PoolV = 'pool__v',\n  PoolW = 'pool__w',\n  PoolWrappedIndex = 'pool__wrappedIndex',\n  PoolZ = 'pool__z',\n  Symbol = 'symbol',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type TradePair = {\n  __typename?: 'TradePair';\n  /** Token Address - Token Address */\n  id: Scalars['ID'];\n  token0: Token;\n  token1: Token;\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot = {\n  __typename?: 'TradePairSnapshot';\n  id: Scalars['ID'];\n  pair: TradePair;\n  timestamp: Scalars['Int'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<TradePairSnapshot_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<TradePairSnapshot_Filter>>>;\n  pair?: InputMaybe<Scalars['String']>;\n  pair_?: InputMaybe<TradePair_Filter>;\n  pair_contains?: InputMaybe<Scalars['String']>;\n  pair_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_ends_with?: InputMaybe<Scalars['String']>;\n  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_gt?: InputMaybe<Scalars['String']>;\n  pair_gte?: InputMaybe<Scalars['String']>;\n  pair_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_lt?: InputMaybe<Scalars['String']>;\n  pair_lte?: InputMaybe<Scalars['String']>;\n  pair_not?: InputMaybe<Scalars['String']>;\n  pair_not_contains?: InputMaybe<Scalars['String']>;\n  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_not_starts_with?: InputMaybe<Scalars['String']>;\n  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_starts_with?: InputMaybe<Scalars['String']>;\n  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePairSnapshot_OrderBy {\n  Id = 'id',\n  Pair = 'pair',\n  PairId = 'pair__id',\n  PairTotalSwapFee = 'pair__totalSwapFee',\n  PairTotalSwapVolume = 'pair__totalSwapVolume',\n  Timestamp = 'timestamp',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type TradePair_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<TradePair_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<TradePair_Filter>>>;\n  token0?: InputMaybe<Scalars['String']>;\n  token0_?: InputMaybe<Token_Filter>;\n  token0_contains?: InputMaybe<Scalars['String']>;\n  token0_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_ends_with?: InputMaybe<Scalars['String']>;\n  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_gt?: InputMaybe<Scalars['String']>;\n  token0_gte?: InputMaybe<Scalars['String']>;\n  token0_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_lt?: InputMaybe<Scalars['String']>;\n  token0_lte?: InputMaybe<Scalars['String']>;\n  token0_not?: InputMaybe<Scalars['String']>;\n  token0_not_contains?: InputMaybe<Scalars['String']>;\n  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_not_starts_with?: InputMaybe<Scalars['String']>;\n  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_starts_with?: InputMaybe<Scalars['String']>;\n  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1?: InputMaybe<Scalars['String']>;\n  token1_?: InputMaybe<Token_Filter>;\n  token1_contains?: InputMaybe<Scalars['String']>;\n  token1_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_ends_with?: InputMaybe<Scalars['String']>;\n  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_gt?: InputMaybe<Scalars['String']>;\n  token1_gte?: InputMaybe<Scalars['String']>;\n  token1_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_lt?: InputMaybe<Scalars['String']>;\n  token1_lte?: InputMaybe<Scalars['String']>;\n  token1_not?: InputMaybe<Scalars['String']>;\n  token1_not_contains?: InputMaybe<Scalars['String']>;\n  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_not_starts_with?: InputMaybe<Scalars['String']>;\n  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_starts_with?: InputMaybe<Scalars['String']>;\n  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePair_OrderBy {\n  Id = 'id',\n  Token0 = 'token0',\n  Token0Address = 'token0__address',\n  Token0Decimals = 'token0__decimals',\n  Token0FxOracleDecimals = 'token0__fxOracleDecimals',\n  Token0Id = 'token0__id',\n  Token0LatestFxPrice = 'token0__latestFXPrice',\n  Token0LatestUsdPrice = 'token0__latestUSDPrice',\n  Token0LatestUsdPriceTimestamp = 'token0__latestUSDPriceTimestamp',\n  Token0Name = 'token0__name',\n  Token0Symbol = 'token0__symbol',\n  Token0TotalBalanceNotional = 'token0__totalBalanceNotional',\n  Token0TotalBalanceUsd = 'token0__totalBalanceUSD',\n  Token0TotalSwapCount = 'token0__totalSwapCount',\n  Token0TotalVolumeNotional = 'token0__totalVolumeNotional',\n  Token0TotalVolumeUsd = 'token0__totalVolumeUSD',\n  Token1 = 'token1',\n  Token1Address = 'token1__address',\n  Token1Decimals = 'token1__decimals',\n  Token1FxOracleDecimals = 'token1__fxOracleDecimals',\n  Token1Id = 'token1__id',\n  Token1LatestFxPrice = 'token1__latestFXPrice',\n  Token1LatestUsdPrice = 'token1__latestUSDPrice',\n  Token1LatestUsdPriceTimestamp = 'token1__latestUSDPriceTimestamp',\n  Token1Name = 'token1__name',\n  Token1Symbol = 'token1__symbol',\n  Token1TotalBalanceNotional = 'token1__totalBalanceNotional',\n  Token1TotalBalanceUsd = 'token1__totalBalanceUSD',\n  Token1TotalSwapCount = 'token1__totalSwapCount',\n  Token1TotalVolumeNotional = 'token1__totalVolumeNotional',\n  Token1TotalVolumeUsd = 'token1__totalVolumeUSD',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  sharesOwned?: Maybe<Array<PoolShare>>;\n  swaps?: Maybe<Array<Swap>>;\n  userInternalBalances?: Maybe<Array<UserInternalBalance>>;\n};\n\n\nexport type UserSharesOwnedArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type UserSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type UserUserInternalBalancesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\nexport type UserInternalBalance = {\n  __typename?: 'UserInternalBalance';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  token: Scalars['Bytes'];\n  tokenInfo?: Maybe<Token>;\n  userAddress?: Maybe<User>;\n};\n\nexport type UserInternalBalance_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<UserInternalBalance_Filter>>>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<UserInternalBalance_Filter>>>;\n  token?: InputMaybe<Scalars['Bytes']>;\n  tokenInfo?: InputMaybe<Scalars['String']>;\n  tokenInfo_?: InputMaybe<Token_Filter>;\n  tokenInfo_contains?: InputMaybe<Scalars['String']>;\n  tokenInfo_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInfo_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInfo_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInfo_gt?: InputMaybe<Scalars['String']>;\n  tokenInfo_gte?: InputMaybe<Scalars['String']>;\n  tokenInfo_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInfo_lt?: InputMaybe<Scalars['String']>;\n  tokenInfo_lte?: InputMaybe<Scalars['String']>;\n  tokenInfo_not?: InputMaybe<Scalars['String']>;\n  tokenInfo_not_contains?: InputMaybe<Scalars['String']>;\n  tokenInfo_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInfo_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInfo_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInfo_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInfo_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInfo_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInfo_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInfo_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_contains?: InputMaybe<Scalars['Bytes']>;\n  token_gt?: InputMaybe<Scalars['Bytes']>;\n  token_gte?: InputMaybe<Scalars['Bytes']>;\n  token_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  token_lt?: InputMaybe<Scalars['Bytes']>;\n  token_lte?: InputMaybe<Scalars['Bytes']>;\n  token_not?: InputMaybe<Scalars['Bytes']>;\n  token_not_contains?: InputMaybe<Scalars['Bytes']>;\n  token_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_?: InputMaybe<User_Filter>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum UserInternalBalance_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  Token = 'token',\n  TokenInfo = 'tokenInfo',\n  TokenInfoAddress = 'tokenInfo__address',\n  TokenInfoDecimals = 'tokenInfo__decimals',\n  TokenInfoFxOracleDecimals = 'tokenInfo__fxOracleDecimals',\n  TokenInfoId = 'tokenInfo__id',\n  TokenInfoLatestFxPrice = 'tokenInfo__latestFXPrice',\n  TokenInfoLatestUsdPrice = 'tokenInfo__latestUSDPrice',\n  TokenInfoLatestUsdPriceTimestamp = 'tokenInfo__latestUSDPriceTimestamp',\n  TokenInfoName = 'tokenInfo__name',\n  TokenInfoSymbol = 'tokenInfo__symbol',\n  TokenInfoTotalBalanceNotional = 'tokenInfo__totalBalanceNotional',\n  TokenInfoTotalBalanceUsd = 'tokenInfo__totalBalanceUSD',\n  TokenInfoTotalSwapCount = 'tokenInfo__totalSwapCount',\n  TokenInfoTotalVolumeNotional = 'tokenInfo__totalVolumeNotional',\n  TokenInfoTotalVolumeUsd = 'tokenInfo__totalVolumeUSD',\n  UserAddress = 'userAddress',\n  UserAddressId = 'userAddress__id'\n}\n\nexport type User_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<User_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<User_Filter>>>;\n  sharesOwned_?: InputMaybe<PoolShare_Filter>;\n  swaps_?: InputMaybe<Swap_Filter>;\n  userInternalBalances_?: InputMaybe<UserInternalBalance_Filter>;\n};\n\nexport enum User_OrderBy {\n  Id = 'id',\n  SharesOwned = 'sharesOwned',\n  Swaps = 'swaps',\n  UserInternalBalances = 'userInternalBalances'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n  /** Integer representation of the timestamp stored in blocks for the chain */\n  timestamp?: Maybe<Scalars['Int']>;\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   *\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type PoolShareQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolShareQuery = { __typename?: 'Query', poolShare?: { __typename?: 'PoolShare', id: string, balance: string, userAddress: { __typename?: 'User', id: string }, poolId: { __typename?: 'Pool', id: string, address: string } } | null };\n\nexport type PoolSharesQueryVariables = Exact<{\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolSharesQuery = { __typename?: 'Query', poolShares: Array<{ __typename?: 'PoolShare', id: string, balance: string, userAddress: { __typename?: 'User', id: string }, poolId: { __typename?: 'Pool', id: string, address: string } }> };\n\nexport type SubgraphPoolShareFragment = { __typename?: 'PoolShare', id: string, balance: string, userAddress: { __typename?: 'User', id: string }, poolId: { __typename?: 'Pool', id: string, address: string } };\n\nexport type PoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, isInRecoveryMode?: boolean | null, isPaused?: boolean | null, alpha?: string | null, beta?: string | null, c?: string | null, s?: string | null, lambda?: string | null, tauAlphaX?: string | null, tauAlphaY?: string | null, tauBetaX?: string | null, tauBetaY?: string | null, u?: string | null, v?: string | null, w?: string | null, z?: string | null, dSq?: string | null, delta?: string | null, epsilon?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }> };\n\nexport type AllPoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type AllPoolsQuery = { __typename?: 'Query', pool0: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, isInRecoveryMode?: boolean | null, isPaused?: boolean | null, alpha?: string | null, beta?: string | null, c?: string | null, s?: string | null, lambda?: string | null, tauAlphaX?: string | null, tauAlphaY?: string | null, tauBetaX?: string | null, tauBetaY?: string | null, u?: string | null, v?: string | null, w?: string | null, z?: string | null, dSq?: string | null, delta?: string | null, epsilon?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }>, pool1000: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, isInRecoveryMode?: boolean | null, isPaused?: boolean | null, alpha?: string | null, beta?: string | null, c?: string | null, s?: string | null, lambda?: string | null, tauAlphaX?: string | null, tauAlphaY?: string | null, tauBetaX?: string | null, tauBetaY?: string | null, u?: string | null, v?: string | null, w?: string | null, z?: string | null, dSq?: string | null, delta?: string | null, epsilon?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }>, pool2000: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, isInRecoveryMode?: boolean | null, isPaused?: boolean | null, alpha?: string | null, beta?: string | null, c?: string | null, s?: string | null, lambda?: string | null, tauAlphaX?: string | null, tauAlphaY?: string | null, tauBetaX?: string | null, tauBetaY?: string | null, u?: string | null, v?: string | null, w?: string | null, z?: string | null, dSq?: string | null, delta?: string | null, epsilon?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }> };\n\nexport type PoolQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolQuery = { __typename?: 'Query', pool?: { __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, isInRecoveryMode?: boolean | null, isPaused?: boolean | null, alpha?: string | null, beta?: string | null, c?: string | null, s?: string | null, lambda?: string | null, tauAlphaX?: string | null, tauAlphaY?: string | null, tauBetaX?: string | null, tauBetaY?: string | null, u?: string | null, v?: string | null, w?: string | null, z?: string | null, dSq?: string | null, delta?: string | null, epsilon?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null } | null };\n\nexport type SubgraphPoolFragment = { __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, isInRecoveryMode?: boolean | null, isPaused?: boolean | null, alpha?: string | null, beta?: string | null, c?: string | null, s?: string | null, lambda?: string | null, tauAlphaX?: string | null, tauAlphaY?: string | null, tauBetaX?: string | null, tauBetaY?: string | null, u?: string | null, v?: string | null, w?: string | null, z?: string | null, dSq?: string | null, delta?: string | null, epsilon?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null };\n\nexport type SubgraphPoolTokenFragment = { __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } };\n\nexport type SubgraphSubPoolTokenFragment = { __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null };\n\nexport type TokenAttrsFragment = { __typename?: 'Token', address: string, symbol?: string | null, decimals: number };\n\nexport type SubgraphSubPoolFragment = { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null };\n\nexport type TokenTreeFragment = { __typename?: 'Token', latestUSDPrice?: string | null, latestFXPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null };\n\nexport type SubgraphPriceRateProviderFragment = { __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } };\n\nexport type PoolHistoricalLiquiditiesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolHistoricalLiquiditiesQuery = { __typename?: 'Query', poolHistoricalLiquidities: Array<{ __typename?: 'PoolHistoricalLiquidity', id: string, poolTotalShares: string, poolLiquidity: string, poolShareValue: string, pricingAsset: string, block: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type PoolSnapshotsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolSnapshotsQuery = { __typename?: 'Query', poolSnapshots: Array<{ __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphPoolSnapshotFragment = { __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } };\n\nexport type JoinExitsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<JoinExit_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type JoinExitsQuery = { __typename?: 'Query', joinExits: Array<{ __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } }> };\n\nexport type SubgraphJoinExitFragment = { __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } };\n\nexport type BalancersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Balancer_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type BalancersQuery = { __typename?: 'Query', balancers: Array<{ __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number }> };\n\nexport type SubgraphBalancerFragment = { __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number };\n\nexport type TokenPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<TokenPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenPricesQuery = { __typename?: 'Query', tokenPrices: Array<{ __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphTokenPriceFragment = { __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } };\n\nexport type TokenLatestPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<LatestPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenLatestPricesQuery = { __typename?: 'Query', latestPrices: Array<{ __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type TokenLatestPriceQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type TokenLatestPriceQuery = { __typename?: 'Query', latestPrice?: { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } } | null };\n\nexport type SubgraphTokenLatestPriceFragment = { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } };\n\nexport type UserQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null } | null };\n\nexport type UsersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<User_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null }> };\n\nexport type SubgraphUserFragment = { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null };\n\nexport const SubgraphPoolShareFragmentDoc = gql`\n    fragment SubgraphPoolShare on PoolShare {\n  id\n  balance\n  userAddress {\n    id\n  }\n  poolId {\n    id\n    address\n  }\n}\n    `;\nexport const SubgraphSubPoolFragmentDoc = gql`\n    fragment SubgraphSubPool on Pool {\n  id\n  totalShares\n  address\n  poolType\n  mainIndex\n}\n    `;\nexport const SubgraphSubPoolTokenFragmentDoc = gql`\n    fragment SubgraphSubPoolToken on PoolToken {\n  address\n  balance\n  weight\n  priceRate\n  symbol\n  decimals\n  isExemptFromYieldProtocolFee\n}\n    `;\nexport const TokenTreeFragmentDoc = gql`\n    fragment TokenTree on Token {\n  latestUSDPrice\n  latestFXPrice\n  pool {\n    ...SubgraphSubPool\n    tokens(first: 100, orderBy: index) {\n      ...SubgraphSubPoolToken\n      token {\n        latestUSDPrice\n        pool {\n          ...SubgraphSubPool\n          tokens(first: 100, orderBy: index) {\n            ...SubgraphSubPoolToken\n            token {\n              latestUSDPrice\n              pool {\n                ...SubgraphSubPool\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${SubgraphSubPoolFragmentDoc}\n${SubgraphSubPoolTokenFragmentDoc}`;\nexport const SubgraphPoolTokenFragmentDoc = gql`\n    fragment SubgraphPoolToken on PoolToken {\n  id\n  symbol\n  name\n  decimals\n  address\n  balance\n  managedBalance\n  weight\n  priceRate\n  isExemptFromYieldProtocolFee\n  token {\n    ...TokenTree\n  }\n}\n    ${TokenTreeFragmentDoc}`;\nexport const SubgraphPriceRateProviderFragmentDoc = gql`\n    fragment SubgraphPriceRateProvider on PriceRateProvider {\n  address\n  token {\n    address\n  }\n}\n    `;\nexport const SubgraphPoolFragmentDoc = gql`\n    fragment SubgraphPool on Pool {\n  id\n  address\n  poolType\n  poolTypeVersion\n  factory\n  strategyType\n  symbol\n  name\n  swapEnabled\n  swapFee\n  protocolYieldFeeCache\n  protocolSwapFeeCache\n  owner\n  totalWeight\n  totalSwapVolume\n  totalSwapFee\n  totalLiquidity\n  totalShares\n  tokens(first: 100, orderBy: index) {\n    ...SubgraphPoolToken\n  }\n  swapsCount\n  holdersCount\n  tokensList\n  amp\n  priceRateProviders(first: 100) {\n    ...SubgraphPriceRateProvider\n  }\n  expiryTime\n  unitSeconds\n  createTime\n  principalToken\n  baseToken\n  wrappedIndex\n  mainIndex\n  lowerTarget\n  upperTarget\n  sqrtAlpha\n  sqrtBeta\n  root3Alpha\n  isInRecoveryMode\n  isPaused\n  alpha\n  beta\n  c\n  s\n  lambda\n  tauAlphaX\n  tauAlphaY\n  tauBetaX\n  tauBetaY\n  u\n  v\n  w\n  z\n  dSq\n  delta\n  epsilon\n}\n    ${SubgraphPoolTokenFragmentDoc}\n${SubgraphPriceRateProviderFragmentDoc}`;\nexport const TokenAttrsFragmentDoc = gql`\n    fragment TokenAttrs on Token {\n  address\n  symbol\n  decimals\n}\n    `;\nexport const SubgraphPoolSnapshotFragmentDoc = gql`\n    fragment SubgraphPoolSnapshot on PoolSnapshot {\n  id\n  pool {\n    id\n  }\n  totalShares\n  swapVolume\n  swapFees\n  timestamp\n}\n    `;\nexport const SubgraphJoinExitFragmentDoc = gql`\n    fragment SubgraphJoinExit on JoinExit {\n  amounts\n  id\n  sender\n  timestamp\n  tx\n  type\n  user {\n    id\n  }\n  pool {\n    id\n    tokensList\n  }\n}\n    `;\nexport const SubgraphBalancerFragmentDoc = gql`\n    fragment SubgraphBalancer on Balancer {\n  id\n  totalLiquidity\n  totalSwapVolume\n  totalSwapFee\n  totalSwapCount\n  poolCount\n}\n    `;\nexport const SubgraphTokenPriceFragmentDoc = gql`\n    fragment SubgraphTokenPrice on TokenPrice {\n  id\n  poolId {\n    id\n  }\n  asset\n  amount\n  pricingAsset\n  price\n  block\n  timestamp\n}\n    `;\nexport const SubgraphTokenLatestPriceFragmentDoc = gql`\n    fragment SubgraphTokenLatestPrice on LatestPrice {\n  id\n  asset\n  price\n  poolId {\n    id\n  }\n  pricingAsset\n}\n    `;\nexport const SubgraphUserFragmentDoc = gql`\n    fragment SubgraphUser on User {\n  id\n  sharesOwned(first: 1000) {\n    balance\n    poolId {\n      id\n    }\n  }\n}\n    `;\nexport const PoolShareDocument = gql`\n    query PoolShare($id: ID!, $block: Block_height) {\n  poolShare(id: $id, block: $block) {\n    ...SubgraphPoolShare\n  }\n}\n    ${SubgraphPoolShareFragmentDoc}`;\nexport const PoolSharesDocument = gql`\n    query PoolShares($first: Int, $orderBy: PoolShare_orderBy, $orderDirection: OrderDirection, $skip: Int, $where: PoolShare_filter, $block: Block_height) {\n  poolShares(\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    skip: $skip\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolShare\n  }\n}\n    ${SubgraphPoolShareFragmentDoc}`;\nexport const PoolsDocument = gql`\n    query Pools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const AllPoolsDocument = gql`\n    query AllPools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pool0: pools(\n    first: 1000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n  pool1000: pools(\n    first: 1000\n    skip: 1000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n  pool2000: pools(\n    first: 1000\n    skip: 2000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolDocument = gql`\n    query Pool($id: ID!, $block: Block_height) {\n  pool(id: $id, block: $block) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolHistoricalLiquiditiesDocument = gql`\n    query PoolHistoricalLiquidities($skip: Int, $first: Int, $orderBy: PoolHistoricalLiquidity_orderBy, $orderDirection: OrderDirection, $where: PoolHistoricalLiquidity_filter, $block: Block_height) {\n  poolHistoricalLiquidities(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    id\n    poolId {\n      id\n    }\n    poolTotalShares\n    poolLiquidity\n    poolShareValue\n    pricingAsset\n    block\n  }\n}\n    `;\nexport const PoolSnapshotsDocument = gql`\n    query PoolSnapshots($skip: Int, $first: Int, $orderBy: PoolSnapshot_orderBy, $orderDirection: OrderDirection, $where: PoolSnapshot_filter, $block: Block_height) {\n  poolSnapshots(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolSnapshot\n  }\n}\n    ${SubgraphPoolSnapshotFragmentDoc}`;\nexport const JoinExitsDocument = gql`\n    query JoinExits($skip: Int, $first: Int, $orderBy: JoinExit_orderBy, $orderDirection: OrderDirection, $where: JoinExit_filter, $block: Block_height) {\n  joinExits(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphJoinExit\n  }\n}\n    ${SubgraphJoinExitFragmentDoc}`;\nexport const BalancersDocument = gql`\n    query Balancers($skip: Int, $first: Int, $orderBy: Balancer_orderBy, $orderDirection: OrderDirection, $where: Balancer_filter, $block: Block_height) {\n  balancers(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphBalancer\n  }\n}\n    ${SubgraphBalancerFragmentDoc}`;\nexport const TokenPricesDocument = gql`\n    query TokenPrices($skip: Int, $first: Int, $orderBy: TokenPrice_orderBy, $orderDirection: OrderDirection, $where: TokenPrice_filter, $block: Block_height) {\n  tokenPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenPrice\n  }\n}\n    ${SubgraphTokenPriceFragmentDoc}`;\nexport const TokenLatestPricesDocument = gql`\n    query TokenLatestPrices($skip: Int, $first: Int, $orderBy: LatestPrice_orderBy, $orderDirection: OrderDirection, $where: LatestPrice_filter, $block: Block_height) {\n  latestPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const TokenLatestPriceDocument = gql`\n    query TokenLatestPrice($id: ID!) {\n  latestPrice(id: $id) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const UserDocument = gql`\n    query User($id: ID!, $block: Block_height) {\n  user(id: $id, block: $block) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\nexport const UsersDocument = gql`\n    query Users($skip: Int, $first: Int, $orderBy: User_orderBy, $orderDirection: OrderDirection, $where: User_filter, $block: Block_height) {\n  users(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    PoolShare(variables: PoolShareQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolShareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolShareQuery>(PoolShareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolShare', 'query');\n    },\n    PoolShares(variables?: PoolSharesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolSharesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolSharesQuery>(PoolSharesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolShares', 'query');\n    },\n    Pools(variables?: PoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsQuery>(PoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pools', 'query');\n    },\n    AllPools(variables?: AllPoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<AllPoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AllPoolsQuery>(AllPoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AllPools', 'query');\n    },\n    Pool(variables: PoolQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolQuery>(PoolDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pool', 'query');\n    },\n    PoolHistoricalLiquidities(variables?: PoolHistoricalLiquiditiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolHistoricalLiquiditiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolHistoricalLiquiditiesQuery>(PoolHistoricalLiquiditiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolHistoricalLiquidities', 'query');\n    },\n    PoolSnapshots(variables?: PoolSnapshotsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolSnapshotsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolSnapshotsQuery>(PoolSnapshotsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolSnapshots', 'query');\n    },\n    JoinExits(variables?: JoinExitsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<JoinExitsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<JoinExitsQuery>(JoinExitsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'JoinExits', 'query');\n    },\n    Balancers(variables?: BalancersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<BalancersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<BalancersQuery>(BalancersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Balancers', 'query');\n    },\n    TokenPrices(variables?: TokenPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenPricesQuery>(TokenPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenPrices', 'query');\n    },\n    TokenLatestPrices(variables?: TokenLatestPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPricesQuery>(TokenLatestPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrices', 'query');\n    },\n    TokenLatestPrice(variables: TokenLatestPriceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPriceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPriceQuery>(TokenLatestPriceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrice', 'query');\n    },\n    User(variables: UserQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UserQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UserQuery>(UserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'User', 'query');\n    },\n    Users(variables?: UsersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UsersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UsersQuery>(UsersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Users', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: string;\n  BigInt: string;\n  Bytes: string;\n  Int8: any;\n};\n\nexport type BlockChangedFilter = {\n  number_gte: Scalars['Int'];\n};\n\nexport type Block_Height = {\n  hash?: InputMaybe<Scalars['Bytes']>;\n  number?: InputMaybe<Scalars['Int']>;\n  number_gte?: InputMaybe<Scalars['Int']>;\n};\n\nexport enum Chain {\n  Arbitrum = 'Arbitrum',\n  Avalanche = 'Avalanche',\n  Base = 'Base',\n  Gnosis = 'Gnosis',\n  Optimism = 'Optimism',\n  Polygon = 'Polygon',\n  PolygonZkEvm = 'PolygonZkEvm'\n}\n\nexport type Gauge = {\n  __typename?: 'Gauge';\n  /**  Timestamp at which Balancer DAO added the gauge to GaugeController [seconds]  */\n  addedTimestamp: Scalars['Int'];\n  /**  Address of the gauge  */\n  address: Scalars['Bytes'];\n  /**  Equal to: <gaugeAddress>-<typeID>  */\n  id: Scalars['ID'];\n  /**  Reference to LiquidityGauge  */\n  liquidityGauge?: Maybe<LiquidityGauge>;\n  /**  Reference to RootGauge  */\n  rootGauge?: Maybe<RootGauge>;\n  /**  Type of the gauge  */\n  type: GaugeType;\n};\n\nexport type GaugeFactory = {\n  __typename?: 'GaugeFactory';\n  /**  List of gauges created through the factory  */\n  gauges?: Maybe<Array<LiquidityGauge>>;\n  /**  Factory contract address  */\n  id: Scalars['ID'];\n  /**  Number of gauges created through the factory  */\n  numGauges: Scalars['Int'];\n};\n\n\nexport type GaugeFactoryGaugesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\nexport type GaugeFactory_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<GaugeFactory_Filter>>>;\n  gauges_?: InputMaybe<LiquidityGauge_Filter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  numGauges?: InputMaybe<Scalars['Int']>;\n  numGauges_gt?: InputMaybe<Scalars['Int']>;\n  numGauges_gte?: InputMaybe<Scalars['Int']>;\n  numGauges_in?: InputMaybe<Array<Scalars['Int']>>;\n  numGauges_lt?: InputMaybe<Scalars['Int']>;\n  numGauges_lte?: InputMaybe<Scalars['Int']>;\n  numGauges_not?: InputMaybe<Scalars['Int']>;\n  numGauges_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  or?: InputMaybe<Array<InputMaybe<GaugeFactory_Filter>>>;\n};\n\nexport enum GaugeFactory_OrderBy {\n  gauges = 'gauges',\n  id = 'id',\n  numGauges = 'numGauges'\n}\n\nexport type GaugeShare = {\n  __typename?: 'GaugeShare';\n  /**  User's balance of gauge deposit tokens  */\n  balance: Scalars['BigDecimal'];\n  /**  Reference to LiquidityGauge entity  */\n  gauge: LiquidityGauge;\n  /**  Equal to: <userAddress>-<gaugeAddress>  */\n  id: Scalars['ID'];\n  /**  Reference to User entity  */\n  user: User;\n};\n\nexport type GaugeShare_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<GaugeShare_Filter>>>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<LiquidityGauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<GaugeShare_Filter>>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum GaugeShare_OrderBy {\n  balance = 'balance',\n  gauge = 'gauge',\n  gauge__id = 'gauge__id',\n  gauge__isKilled = 'gauge__isKilled',\n  gauge__isPreferentialGauge = 'gauge__isPreferentialGauge',\n  gauge__poolAddress = 'gauge__poolAddress',\n  gauge__poolId = 'gauge__poolId',\n  gauge__relativeWeightCap = 'gauge__relativeWeightCap',\n  gauge__streamer = 'gauge__streamer',\n  gauge__symbol = 'gauge__symbol',\n  gauge__totalSupply = 'gauge__totalSupply',\n  id = 'id',\n  user = 'user',\n  user__id = 'user__id'\n}\n\nexport type GaugeType = {\n  __typename?: 'GaugeType';\n  /**  Type ID  */\n  id: Scalars['ID'];\n  /**  Name of the type - empty string if call reverts  */\n  name: Scalars['String'];\n};\n\nexport type GaugeType_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<GaugeType_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<InputMaybe<GaugeType_Filter>>>;\n};\n\nexport enum GaugeType_OrderBy {\n  id = 'id',\n  name = 'name'\n}\n\nexport type GaugeVote = {\n  __typename?: 'GaugeVote';\n  /**  Reference to Gauge entity  */\n  gauge: Gauge;\n  /**  Equal to: <userAddress>-<gaugeAddress>  */\n  id: Scalars['ID'];\n  /**  Timestamp at which user voted [seconds]  */\n  timestamp?: Maybe<Scalars['BigInt']>;\n  /**  Reference to User entity  */\n  user: User;\n  /**  Weight of veBAL power user has used to vote  */\n  weight?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type GaugeVote_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<GaugeVote_Filter>>>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<GaugeVote_Filter>>>;\n  timestamp?: InputMaybe<Scalars['BigInt']>;\n  timestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  timestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  timestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  timestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  timestamp_not?: InputMaybe<Scalars['BigInt']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  weight?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum GaugeVote_OrderBy {\n  gauge = 'gauge',\n  gauge__addedTimestamp = 'gauge__addedTimestamp',\n  gauge__address = 'gauge__address',\n  gauge__id = 'gauge__id',\n  id = 'id',\n  timestamp = 'timestamp',\n  user = 'user',\n  user__id = 'user__id',\n  weight = 'weight'\n}\n\nexport type Gauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  addedTimestamp?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  addedTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_not?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  and?: InputMaybe<Array<InputMaybe<Gauge_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  liquidityGauge?: InputMaybe<Scalars['String']>;\n  liquidityGauge_?: InputMaybe<LiquidityGauge_Filter>;\n  liquidityGauge_contains?: InputMaybe<Scalars['String']>;\n  liquidityGauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_ends_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_gt?: InputMaybe<Scalars['String']>;\n  liquidityGauge_gte?: InputMaybe<Scalars['String']>;\n  liquidityGauge_in?: InputMaybe<Array<Scalars['String']>>;\n  liquidityGauge_lt?: InputMaybe<Scalars['String']>;\n  liquidityGauge_lte?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_contains?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  liquidityGauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_starts_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<InputMaybe<Gauge_Filter>>>;\n  rootGauge?: InputMaybe<Scalars['String']>;\n  rootGauge_?: InputMaybe<RootGauge_Filter>;\n  rootGauge_contains?: InputMaybe<Scalars['String']>;\n  rootGauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_ends_with?: InputMaybe<Scalars['String']>;\n  rootGauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_gt?: InputMaybe<Scalars['String']>;\n  rootGauge_gte?: InputMaybe<Scalars['String']>;\n  rootGauge_in?: InputMaybe<Array<Scalars['String']>>;\n  rootGauge_lt?: InputMaybe<Scalars['String']>;\n  rootGauge_lte?: InputMaybe<Scalars['String']>;\n  rootGauge_not?: InputMaybe<Scalars['String']>;\n  rootGauge_not_contains?: InputMaybe<Scalars['String']>;\n  rootGauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  rootGauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  rootGauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  rootGauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_starts_with?: InputMaybe<Scalars['String']>;\n  rootGauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<Scalars['String']>;\n  type_?: InputMaybe<GaugeType_Filter>;\n  type_contains?: InputMaybe<Scalars['String']>;\n  type_contains_nocase?: InputMaybe<Scalars['String']>;\n  type_ends_with?: InputMaybe<Scalars['String']>;\n  type_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  type_gt?: InputMaybe<Scalars['String']>;\n  type_gte?: InputMaybe<Scalars['String']>;\n  type_in?: InputMaybe<Array<Scalars['String']>>;\n  type_lt?: InputMaybe<Scalars['String']>;\n  type_lte?: InputMaybe<Scalars['String']>;\n  type_not?: InputMaybe<Scalars['String']>;\n  type_not_contains?: InputMaybe<Scalars['String']>;\n  type_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  type_not_ends_with?: InputMaybe<Scalars['String']>;\n  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  type_not_in?: InputMaybe<Array<Scalars['String']>>;\n  type_not_starts_with?: InputMaybe<Scalars['String']>;\n  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  type_starts_with?: InputMaybe<Scalars['String']>;\n  type_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum Gauge_OrderBy {\n  addedTimestamp = 'addedTimestamp',\n  address = 'address',\n  id = 'id',\n  liquidityGauge = 'liquidityGauge',\n  liquidityGauge__id = 'liquidityGauge__id',\n  liquidityGauge__isKilled = 'liquidityGauge__isKilled',\n  liquidityGauge__isPreferentialGauge = 'liquidityGauge__isPreferentialGauge',\n  liquidityGauge__poolAddress = 'liquidityGauge__poolAddress',\n  liquidityGauge__poolId = 'liquidityGauge__poolId',\n  liquidityGauge__relativeWeightCap = 'liquidityGauge__relativeWeightCap',\n  liquidityGauge__streamer = 'liquidityGauge__streamer',\n  liquidityGauge__symbol = 'liquidityGauge__symbol',\n  liquidityGauge__totalSupply = 'liquidityGauge__totalSupply',\n  rootGauge = 'rootGauge',\n  rootGauge__chain = 'rootGauge__chain',\n  rootGauge__id = 'rootGauge__id',\n  rootGauge__isKilled = 'rootGauge__isKilled',\n  rootGauge__recipient = 'rootGauge__recipient',\n  rootGauge__relativeWeightCap = 'rootGauge__relativeWeightCap',\n  type = 'type',\n  type__id = 'type__id',\n  type__name = 'type__name'\n}\n\nexport type LiquidityGauge = {\n  __typename?: 'LiquidityGauge';\n  /**  Factory contract address  */\n  factory: GaugeFactory;\n  /**  Reference to Gauge entity - created when LiquidityGauge is added to GaugeController */\n  gauge?: Maybe<Gauge>;\n  /**  LiquidityGauge contract address  */\n  id: Scalars['ID'];\n  /**  Whether Balancer DAO killed the gauge  */\n  isKilled: Scalars['Boolean'];\n  /**  Whether the LiquidityGauge is the most recent added to GaugeController  */\n  isPreferentialGauge: Scalars['Boolean'];\n  /**  Reference to Pool entity  */\n  pool?: Maybe<Pool>;\n  /**  Address of the pool (lp_token of the gauge)  */\n  poolAddress: Scalars['Bytes'];\n  /**  Pool ID if lp_token is a Balancer pool; null otherwise  */\n  poolId?: Maybe<Scalars['Bytes']>;\n  /**  Relative weight cap of the gauge (0.01 = 1%) - V2 factories only  */\n  relativeWeightCap?: Maybe<Scalars['BigDecimal']>;\n  /**  List of reward tokens depositted in the gauge - ChildChainLiquidityGauge only  */\n  rewardTokensList?: Maybe<Array<Scalars['Bytes']>>;\n  /**  List of user shares  */\n  shares?: Maybe<Array<GaugeShare>>;\n  /**  Address of the contract that streams reward tokens to the gauge - ChildChainLiquidityGauge only  */\n  streamer?: Maybe<Scalars['Bytes']>;\n  /**  ERC20 token symbol  */\n  symbol: Scalars['String'];\n  /**  List of reward tokens depositted in the gauge  */\n  tokens?: Maybe<Array<RewardToken>>;\n  /**  Total of BPTs users have staked in the LiquidityGauge  */\n  totalSupply: Scalars['BigDecimal'];\n};\n\n\nexport type LiquidityGaugeSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type LiquidityGaugeTokensArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RewardToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<RewardToken_Filter>;\n};\n\nexport type LiquidityGauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<LiquidityGauge_Filter>>>;\n  factory?: InputMaybe<Scalars['String']>;\n  factory_?: InputMaybe<GaugeFactory_Filter>;\n  factory_contains?: InputMaybe<Scalars['String']>;\n  factory_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_ends_with?: InputMaybe<Scalars['String']>;\n  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_gt?: InputMaybe<Scalars['String']>;\n  factory_gte?: InputMaybe<Scalars['String']>;\n  factory_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_lt?: InputMaybe<Scalars['String']>;\n  factory_lte?: InputMaybe<Scalars['String']>;\n  factory_not?: InputMaybe<Scalars['String']>;\n  factory_not_contains?: InputMaybe<Scalars['String']>;\n  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_not_starts_with?: InputMaybe<Scalars['String']>;\n  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_starts_with?: InputMaybe<Scalars['String']>;\n  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isKilled?: InputMaybe<Scalars['Boolean']>;\n  isKilled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isKilled_not?: InputMaybe<Scalars['Boolean']>;\n  isKilled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPreferentialGauge?: InputMaybe<Scalars['Boolean']>;\n  isPreferentialGauge_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPreferentialGauge_not?: InputMaybe<Scalars['Boolean']>;\n  isPreferentialGauge_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  or?: InputMaybe<Array<InputMaybe<LiquidityGauge_Filter>>>;\n  pool?: InputMaybe<Scalars['String']>;\n  poolAddress?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_contains?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_gt?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_gte?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolAddress_lt?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_lte?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_not?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_not_contains?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolId?: InputMaybe<Scalars['Bytes']>;\n  poolId_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_gt?: InputMaybe<Scalars['Bytes']>;\n  poolId_gte?: InputMaybe<Scalars['Bytes']>;\n  poolId_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolId_lt?: InputMaybe<Scalars['Bytes']>;\n  poolId_lte?: InputMaybe<Scalars['Bytes']>;\n  poolId_not?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  relativeWeightCap?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  relativeWeightCap_lt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_lte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rewardTokensList?: InputMaybe<Array<Scalars['Bytes']>>;\n  rewardTokensList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  rewardTokensList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  rewardTokensList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  rewardTokensList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  rewardTokensList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  shares_?: InputMaybe<GaugeShare_Filter>;\n  streamer?: InputMaybe<Scalars['Bytes']>;\n  streamer_contains?: InputMaybe<Scalars['Bytes']>;\n  streamer_gt?: InputMaybe<Scalars['Bytes']>;\n  streamer_gte?: InputMaybe<Scalars['Bytes']>;\n  streamer_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  streamer_lt?: InputMaybe<Scalars['Bytes']>;\n  streamer_lte?: InputMaybe<Scalars['Bytes']>;\n  streamer_not?: InputMaybe<Scalars['Bytes']>;\n  streamer_not_contains?: InputMaybe<Scalars['Bytes']>;\n  streamer_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokens_?: InputMaybe<RewardToken_Filter>;\n  totalSupply?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSupply_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum LiquidityGauge_OrderBy {\n  factory = 'factory',\n  factory__id = 'factory__id',\n  factory__numGauges = 'factory__numGauges',\n  gauge = 'gauge',\n  gauge__addedTimestamp = 'gauge__addedTimestamp',\n  gauge__address = 'gauge__address',\n  gauge__id = 'gauge__id',\n  id = 'id',\n  isKilled = 'isKilled',\n  isPreferentialGauge = 'isPreferentialGauge',\n  pool = 'pool',\n  poolAddress = 'poolAddress',\n  poolId = 'poolId',\n  pool__address = 'pool__address',\n  pool__id = 'pool__id',\n  pool__poolId = 'pool__poolId',\n  relativeWeightCap = 'relativeWeightCap',\n  rewardTokensList = 'rewardTokensList',\n  shares = 'shares',\n  streamer = 'streamer',\n  symbol = 'symbol',\n  tokens = 'tokens',\n  totalSupply = 'totalSupply'\n}\n\nexport type LockSnapshot = {\n  __typename?: 'LockSnapshot';\n  /**  veBAL balance at the moment user locks  */\n  bias: Scalars['BigDecimal'];\n  /**  Equal to <userAddress>-<timestamp>  */\n  id: Scalars['ID'];\n  /**  veBAL decay rate (per second)  */\n  slope: Scalars['BigDecimal'];\n  /**  Timestamp at which the snapshot was taken [seconds]  */\n  timestamp: Scalars['Int'];\n  /**  Reference to User entity  */\n  user: User;\n};\n\nexport type LockSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<LockSnapshot_Filter>>>;\n  bias?: InputMaybe<Scalars['BigDecimal']>;\n  bias_gt?: InputMaybe<Scalars['BigDecimal']>;\n  bias_gte?: InputMaybe<Scalars['BigDecimal']>;\n  bias_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  bias_lt?: InputMaybe<Scalars['BigDecimal']>;\n  bias_lte?: InputMaybe<Scalars['BigDecimal']>;\n  bias_not?: InputMaybe<Scalars['BigDecimal']>;\n  bias_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<LockSnapshot_Filter>>>;\n  slope?: InputMaybe<Scalars['BigDecimal']>;\n  slope_gt?: InputMaybe<Scalars['BigDecimal']>;\n  slope_gte?: InputMaybe<Scalars['BigDecimal']>;\n  slope_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  slope_lt?: InputMaybe<Scalars['BigDecimal']>;\n  slope_lte?: InputMaybe<Scalars['BigDecimal']>;\n  slope_not?: InputMaybe<Scalars['BigDecimal']>;\n  slope_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum LockSnapshot_OrderBy {\n  bias = 'bias',\n  id = 'id',\n  slope = 'slope',\n  timestamp = 'timestamp',\n  user = 'user',\n  user__id = 'user__id'\n}\n\nexport type OmniVotingEscrowLock = {\n  __typename?: 'OmniVotingEscrowLock';\n  /**  veBAL balance at the moment user locks  */\n  bias: Scalars['BigDecimal'];\n  /**  Chain where the lock was bridged to  */\n  dstChainId: Scalars['Int'];\n  /**  Equal to: <userAdress>-<omniVotingEscrow>  */\n  id: Scalars['ID'];\n  /**  User on the local chain (reference to User entity)  */\n  localUser: User;\n  /**  User address on the remote chain  */\n  remoteUser: Scalars['Bytes'];\n  /**  veBAL decay rate (per second)  */\n  slope: Scalars['BigDecimal'];\n  /**  Timestamp the lock was created [seconds]  */\n  timestamp: Scalars['Int'];\n  /**  Reference to VotingEscrow entity  */\n  votingEscrowID: VotingEscrow;\n};\n\nexport type OmniVotingEscrowLock_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<OmniVotingEscrowLock_Filter>>>;\n  bias?: InputMaybe<Scalars['BigDecimal']>;\n  bias_gt?: InputMaybe<Scalars['BigDecimal']>;\n  bias_gte?: InputMaybe<Scalars['BigDecimal']>;\n  bias_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  bias_lt?: InputMaybe<Scalars['BigDecimal']>;\n  bias_lte?: InputMaybe<Scalars['BigDecimal']>;\n  bias_not?: InputMaybe<Scalars['BigDecimal']>;\n  bias_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  dstChainId?: InputMaybe<Scalars['Int']>;\n  dstChainId_gt?: InputMaybe<Scalars['Int']>;\n  dstChainId_gte?: InputMaybe<Scalars['Int']>;\n  dstChainId_in?: InputMaybe<Array<Scalars['Int']>>;\n  dstChainId_lt?: InputMaybe<Scalars['Int']>;\n  dstChainId_lte?: InputMaybe<Scalars['Int']>;\n  dstChainId_not?: InputMaybe<Scalars['Int']>;\n  dstChainId_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  localUser?: InputMaybe<Scalars['String']>;\n  localUser_?: InputMaybe<User_Filter>;\n  localUser_contains?: InputMaybe<Scalars['String']>;\n  localUser_contains_nocase?: InputMaybe<Scalars['String']>;\n  localUser_ends_with?: InputMaybe<Scalars['String']>;\n  localUser_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  localUser_gt?: InputMaybe<Scalars['String']>;\n  localUser_gte?: InputMaybe<Scalars['String']>;\n  localUser_in?: InputMaybe<Array<Scalars['String']>>;\n  localUser_lt?: InputMaybe<Scalars['String']>;\n  localUser_lte?: InputMaybe<Scalars['String']>;\n  localUser_not?: InputMaybe<Scalars['String']>;\n  localUser_not_contains?: InputMaybe<Scalars['String']>;\n  localUser_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  localUser_not_ends_with?: InputMaybe<Scalars['String']>;\n  localUser_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  localUser_not_in?: InputMaybe<Array<Scalars['String']>>;\n  localUser_not_starts_with?: InputMaybe<Scalars['String']>;\n  localUser_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  localUser_starts_with?: InputMaybe<Scalars['String']>;\n  localUser_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<InputMaybe<OmniVotingEscrowLock_Filter>>>;\n  remoteUser?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_contains?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_gt?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_gte?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  remoteUser_lt?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_lte?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_not?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_not_contains?: InputMaybe<Scalars['Bytes']>;\n  remoteUser_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  slope?: InputMaybe<Scalars['BigDecimal']>;\n  slope_gt?: InputMaybe<Scalars['BigDecimal']>;\n  slope_gte?: InputMaybe<Scalars['BigDecimal']>;\n  slope_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  slope_lt?: InputMaybe<Scalars['BigDecimal']>;\n  slope_lte?: InputMaybe<Scalars['BigDecimal']>;\n  slope_not?: InputMaybe<Scalars['BigDecimal']>;\n  slope_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  votingEscrowID?: InputMaybe<Scalars['String']>;\n  votingEscrowID_?: InputMaybe<VotingEscrow_Filter>;\n  votingEscrowID_contains?: InputMaybe<Scalars['String']>;\n  votingEscrowID_contains_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_ends_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_gt?: InputMaybe<Scalars['String']>;\n  votingEscrowID_gte?: InputMaybe<Scalars['String']>;\n  votingEscrowID_in?: InputMaybe<Array<Scalars['String']>>;\n  votingEscrowID_lt?: InputMaybe<Scalars['String']>;\n  votingEscrowID_lte?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_contains?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_ends_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  votingEscrowID_not_starts_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_starts_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum OmniVotingEscrowLock_OrderBy {\n  bias = 'bias',\n  dstChainId = 'dstChainId',\n  id = 'id',\n  localUser = 'localUser',\n  localUser__id = 'localUser__id',\n  remoteUser = 'remoteUser',\n  slope = 'slope',\n  timestamp = 'timestamp',\n  votingEscrowID = 'votingEscrowID',\n  votingEscrowID__id = 'votingEscrowID__id',\n  votingEscrowID__stakedSupply = 'votingEscrowID__stakedSupply'\n}\n\n/** Defines the order direction, either ascending or descending */\nexport enum OrderDirection {\n  asc = 'asc',\n  desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  /**  Address of the pool (lp_token of the gauge)  */\n  address: Scalars['Bytes'];\n  /**  List of gauges created for the pool  */\n  gauges?: Maybe<Array<LiquidityGauge>>;\n  /**  List of the pool's gauges addresses  */\n  gaugesList: Array<Scalars['Bytes']>;\n  /**  Address of the pool (lp_token of the gauge)  */\n  id: Scalars['ID'];\n  /**  Pool ID if lp_token is a Balancer pool; null otherwise  */\n  poolId?: Maybe<Scalars['Bytes']>;\n  /**  Most recent, unkilled gauge in the GaugeController  */\n  preferentialGauge?: Maybe<LiquidityGauge>;\n};\n\n\nexport type PoolGaugesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\nexport type Pool_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  and?: InputMaybe<Array<InputMaybe<Pool_Filter>>>;\n  gaugesList?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  gauges_?: InputMaybe<LiquidityGauge_Filter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<Pool_Filter>>>;\n  poolId?: InputMaybe<Scalars['Bytes']>;\n  poolId_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_gt?: InputMaybe<Scalars['Bytes']>;\n  poolId_gte?: InputMaybe<Scalars['Bytes']>;\n  poolId_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolId_lt?: InputMaybe<Scalars['Bytes']>;\n  poolId_lte?: InputMaybe<Scalars['Bytes']>;\n  poolId_not?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  preferentialGauge?: InputMaybe<Scalars['String']>;\n  preferentialGauge_?: InputMaybe<LiquidityGauge_Filter>;\n  preferentialGauge_contains?: InputMaybe<Scalars['String']>;\n  preferentialGauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_ends_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_gt?: InputMaybe<Scalars['String']>;\n  preferentialGauge_gte?: InputMaybe<Scalars['String']>;\n  preferentialGauge_in?: InputMaybe<Array<Scalars['String']>>;\n  preferentialGauge_lt?: InputMaybe<Scalars['String']>;\n  preferentialGauge_lte?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_contains?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  preferentialGauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_starts_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum Pool_OrderBy {\n  address = 'address',\n  gauges = 'gauges',\n  gaugesList = 'gaugesList',\n  id = 'id',\n  poolId = 'poolId',\n  preferentialGauge = 'preferentialGauge',\n  preferentialGauge__id = 'preferentialGauge__id',\n  preferentialGauge__isKilled = 'preferentialGauge__isKilled',\n  preferentialGauge__isPreferentialGauge = 'preferentialGauge__isPreferentialGauge',\n  preferentialGauge__poolAddress = 'preferentialGauge__poolAddress',\n  preferentialGauge__poolId = 'preferentialGauge__poolId',\n  preferentialGauge__relativeWeightCap = 'preferentialGauge__relativeWeightCap',\n  preferentialGauge__streamer = 'preferentialGauge__streamer',\n  preferentialGauge__symbol = 'preferentialGauge__symbol',\n  preferentialGauge__totalSupply = 'preferentialGauge__totalSupply'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  gauge?: Maybe<Gauge>;\n  gaugeFactories: Array<GaugeFactory>;\n  gaugeFactory?: Maybe<GaugeFactory>;\n  gaugeShare?: Maybe<GaugeShare>;\n  gaugeShares: Array<GaugeShare>;\n  gaugeType?: Maybe<GaugeType>;\n  gaugeTypes: Array<GaugeType>;\n  gaugeVote?: Maybe<GaugeVote>;\n  gaugeVotes: Array<GaugeVote>;\n  gauges: Array<Gauge>;\n  liquidityGauge?: Maybe<LiquidityGauge>;\n  liquidityGauges: Array<LiquidityGauge>;\n  lockSnapshot?: Maybe<LockSnapshot>;\n  lockSnapshots: Array<LockSnapshot>;\n  omniVotingEscrowLock?: Maybe<OmniVotingEscrowLock>;\n  omniVotingEscrowLocks: Array<OmniVotingEscrowLock>;\n  pool?: Maybe<Pool>;\n  pools: Array<Pool>;\n  rewardToken?: Maybe<RewardToken>;\n  rewardTokens: Array<RewardToken>;\n  rootGauge?: Maybe<RootGauge>;\n  rootGauges: Array<RootGauge>;\n  singleRecipientGauge?: Maybe<SingleRecipientGauge>;\n  singleRecipientGauges: Array<SingleRecipientGauge>;\n  user?: Maybe<User>;\n  users: Array<User>;\n  votingEscrow?: Maybe<VotingEscrow>;\n  votingEscrowLock?: Maybe<VotingEscrowLock>;\n  votingEscrowLocks: Array<VotingEscrowLock>;\n  votingEscrows: Array<VotingEscrow>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type QueryGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeFactoriesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeFactory_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeFactory_Filter>;\n};\n\n\nexport type QueryGaugeFactoryArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type QueryGaugeTypeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeTypesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeType_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeType_Filter>;\n};\n\n\nexport type QueryGaugeVoteArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeVotesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeVote_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeVote_Filter>;\n};\n\n\nexport type QueryGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Gauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Gauge_Filter>;\n};\n\n\nexport type QueryLiquidityGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLiquidityGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\n\nexport type QueryLockSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLockSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LockSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LockSnapshot_Filter>;\n};\n\n\nexport type QueryOmniVotingEscrowLockArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryOmniVotingEscrowLocksArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OmniVotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<OmniVotingEscrowLock_Filter>;\n};\n\n\nexport type QueryPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type QueryRewardTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryRewardTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RewardToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RewardToken_Filter>;\n};\n\n\nexport type QueryRootGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryRootGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RootGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RootGauge_Filter>;\n};\n\n\nexport type QuerySingleRecipientGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySingleRecipientGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SingleRecipientGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<SingleRecipientGauge_Filter>;\n};\n\n\nexport type QueryUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\n\nexport type QueryVotingEscrowArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryVotingEscrowLockArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryVotingEscrowLocksArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\n\nexport type QueryVotingEscrowsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrow_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrow_Filter>;\n};\n\nexport type RewardToken = {\n  __typename?: 'RewardToken';\n  /**  ERC20 token decimals - zero if call to decimals() reverts  */\n  decimals: Scalars['Int'];\n  /**  Reference to LiquidityGauge entity  */\n  gauge: LiquidityGauge;\n  /**  Equal to: <tokenAddress>-<gaugeAddress>  */\n  id: Scalars['ID'];\n  /**  Timestamp at which finishes the period of rewards  */\n  periodFinish?: Maybe<Scalars['BigInt']>;\n  /**  Rate of reward tokens streamed per second  */\n  rate?: Maybe<Scalars['BigDecimal']>;\n  /**  ERC20 token symbol - empty string if call to symbol() reverts  */\n  symbol: Scalars['String'];\n  /**  Amount of reward tokens that has been deposited into the gauge  */\n  totalDeposited: Scalars['BigDecimal'];\n};\n\nexport type RewardToken_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<RewardToken_Filter>>>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<LiquidityGauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  or?: InputMaybe<Array<InputMaybe<RewardToken_Filter>>>;\n  periodFinish?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_gt?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_gte?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  periodFinish_lt?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_lte?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_not?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  rate?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalDeposited?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalDeposited_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum RewardToken_OrderBy {\n  decimals = 'decimals',\n  gauge = 'gauge',\n  gauge__id = 'gauge__id',\n  gauge__isKilled = 'gauge__isKilled',\n  gauge__isPreferentialGauge = 'gauge__isPreferentialGauge',\n  gauge__poolAddress = 'gauge__poolAddress',\n  gauge__poolId = 'gauge__poolId',\n  gauge__relativeWeightCap = 'gauge__relativeWeightCap',\n  gauge__streamer = 'gauge__streamer',\n  gauge__symbol = 'gauge__symbol',\n  gauge__totalSupply = 'gauge__totalSupply',\n  id = 'id',\n  periodFinish = 'periodFinish',\n  rate = 'rate',\n  symbol = 'symbol',\n  totalDeposited = 'totalDeposited'\n}\n\nexport type RootGauge = {\n  __typename?: 'RootGauge';\n  /**  Chain where emissions by this gauge will be bridged to  */\n  chain: Chain;\n  /**  Factory contract address  */\n  factory: GaugeFactory;\n  /**  Reference to Gauge entity - created when LiquidityGauge is added to GaugeController */\n  gauge?: Maybe<Gauge>;\n  /**  RootGauge contract address */\n  id: Scalars['ID'];\n  /**  Whether Balancer DAO killed the gauge  */\n  isKilled: Scalars['Boolean'];\n  /**  Address where emissions by this gauge will be bridged to  */\n  recipient: Scalars['Bytes'];\n  /**  Relative weight cap of the gauge (0.01 = 1%) - V2 factories only  */\n  relativeWeightCap?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type RootGauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<RootGauge_Filter>>>;\n  chain?: InputMaybe<Chain>;\n  chain_in?: InputMaybe<Array<Chain>>;\n  chain_not?: InputMaybe<Chain>;\n  chain_not_in?: InputMaybe<Array<Chain>>;\n  factory?: InputMaybe<Scalars['String']>;\n  factory_?: InputMaybe<GaugeFactory_Filter>;\n  factory_contains?: InputMaybe<Scalars['String']>;\n  factory_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_ends_with?: InputMaybe<Scalars['String']>;\n  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_gt?: InputMaybe<Scalars['String']>;\n  factory_gte?: InputMaybe<Scalars['String']>;\n  factory_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_lt?: InputMaybe<Scalars['String']>;\n  factory_lte?: InputMaybe<Scalars['String']>;\n  factory_not?: InputMaybe<Scalars['String']>;\n  factory_not_contains?: InputMaybe<Scalars['String']>;\n  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_not_starts_with?: InputMaybe<Scalars['String']>;\n  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_starts_with?: InputMaybe<Scalars['String']>;\n  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isKilled?: InputMaybe<Scalars['Boolean']>;\n  isKilled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isKilled_not?: InputMaybe<Scalars['Boolean']>;\n  isKilled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  or?: InputMaybe<Array<InputMaybe<RootGauge_Filter>>>;\n  recipient?: InputMaybe<Scalars['Bytes']>;\n  recipient_contains?: InputMaybe<Scalars['Bytes']>;\n  recipient_gt?: InputMaybe<Scalars['Bytes']>;\n  recipient_gte?: InputMaybe<Scalars['Bytes']>;\n  recipient_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  recipient_lt?: InputMaybe<Scalars['Bytes']>;\n  recipient_lte?: InputMaybe<Scalars['Bytes']>;\n  recipient_not?: InputMaybe<Scalars['Bytes']>;\n  recipient_not_contains?: InputMaybe<Scalars['Bytes']>;\n  recipient_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  relativeWeightCap?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  relativeWeightCap_lt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_lte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum RootGauge_OrderBy {\n  chain = 'chain',\n  factory = 'factory',\n  factory__id = 'factory__id',\n  factory__numGauges = 'factory__numGauges',\n  gauge = 'gauge',\n  gauge__addedTimestamp = 'gauge__addedTimestamp',\n  gauge__address = 'gauge__address',\n  gauge__id = 'gauge__id',\n  id = 'id',\n  isKilled = 'isKilled',\n  recipient = 'recipient',\n  relativeWeightCap = 'relativeWeightCap'\n}\n\nexport type SingleRecipientGauge = {\n  __typename?: 'SingleRecipientGauge';\n  /**  Factory contract address  */\n  factory: GaugeFactory;\n  /**  Reference to Gauge entity - created when SingleRecipientGauge is added to GaugeController */\n  gauge?: Maybe<Gauge>;\n  /**  SingleRecipientGauge contract address */\n  id: Scalars['ID'];\n  /**  Whether Balancer DAO killed the gauge  */\n  isKilled: Scalars['Boolean'];\n  /**  Address where emissions for this gauge will be sent to  */\n  recipient: Scalars['Bytes'];\n  /**  Relative weight cap of the gauge (0.01 = 1%) - V2 factories only  */\n  relativeWeightCap?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type SingleRecipientGauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<SingleRecipientGauge_Filter>>>;\n  factory?: InputMaybe<Scalars['String']>;\n  factory_?: InputMaybe<GaugeFactory_Filter>;\n  factory_contains?: InputMaybe<Scalars['String']>;\n  factory_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_ends_with?: InputMaybe<Scalars['String']>;\n  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_gt?: InputMaybe<Scalars['String']>;\n  factory_gte?: InputMaybe<Scalars['String']>;\n  factory_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_lt?: InputMaybe<Scalars['String']>;\n  factory_lte?: InputMaybe<Scalars['String']>;\n  factory_not?: InputMaybe<Scalars['String']>;\n  factory_not_contains?: InputMaybe<Scalars['String']>;\n  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_not_starts_with?: InputMaybe<Scalars['String']>;\n  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_starts_with?: InputMaybe<Scalars['String']>;\n  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isKilled?: InputMaybe<Scalars['Boolean']>;\n  isKilled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isKilled_not?: InputMaybe<Scalars['Boolean']>;\n  isKilled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  or?: InputMaybe<Array<InputMaybe<SingleRecipientGauge_Filter>>>;\n  recipient?: InputMaybe<Scalars['Bytes']>;\n  recipient_contains?: InputMaybe<Scalars['Bytes']>;\n  recipient_gt?: InputMaybe<Scalars['Bytes']>;\n  recipient_gte?: InputMaybe<Scalars['Bytes']>;\n  recipient_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  recipient_lt?: InputMaybe<Scalars['Bytes']>;\n  recipient_lte?: InputMaybe<Scalars['Bytes']>;\n  recipient_not?: InputMaybe<Scalars['Bytes']>;\n  recipient_not_contains?: InputMaybe<Scalars['Bytes']>;\n  recipient_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  relativeWeightCap?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  relativeWeightCap_lt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_lte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum SingleRecipientGauge_OrderBy {\n  factory = 'factory',\n  factory__id = 'factory__id',\n  factory__numGauges = 'factory__numGauges',\n  gauge = 'gauge',\n  gauge__addedTimestamp = 'gauge__addedTimestamp',\n  gauge__address = 'gauge__address',\n  gauge__id = 'gauge__id',\n  id = 'id',\n  isKilled = 'isKilled',\n  recipient = 'recipient',\n  relativeWeightCap = 'relativeWeightCap'\n}\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  gauge?: Maybe<Gauge>;\n  gaugeFactories: Array<GaugeFactory>;\n  gaugeFactory?: Maybe<GaugeFactory>;\n  gaugeShare?: Maybe<GaugeShare>;\n  gaugeShares: Array<GaugeShare>;\n  gaugeType?: Maybe<GaugeType>;\n  gaugeTypes: Array<GaugeType>;\n  gaugeVote?: Maybe<GaugeVote>;\n  gaugeVotes: Array<GaugeVote>;\n  gauges: Array<Gauge>;\n  liquidityGauge?: Maybe<LiquidityGauge>;\n  liquidityGauges: Array<LiquidityGauge>;\n  lockSnapshot?: Maybe<LockSnapshot>;\n  lockSnapshots: Array<LockSnapshot>;\n  omniVotingEscrowLock?: Maybe<OmniVotingEscrowLock>;\n  omniVotingEscrowLocks: Array<OmniVotingEscrowLock>;\n  pool?: Maybe<Pool>;\n  pools: Array<Pool>;\n  rewardToken?: Maybe<RewardToken>;\n  rewardTokens: Array<RewardToken>;\n  rootGauge?: Maybe<RootGauge>;\n  rootGauges: Array<RootGauge>;\n  singleRecipientGauge?: Maybe<SingleRecipientGauge>;\n  singleRecipientGauges: Array<SingleRecipientGauge>;\n  user?: Maybe<User>;\n  users: Array<User>;\n  votingEscrow?: Maybe<VotingEscrow>;\n  votingEscrowLock?: Maybe<VotingEscrowLock>;\n  votingEscrowLocks: Array<VotingEscrowLock>;\n  votingEscrows: Array<VotingEscrow>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type SubscriptionGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeFactoriesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeFactory_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeFactory_Filter>;\n};\n\n\nexport type SubscriptionGaugeFactoryArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type SubscriptionGaugeTypeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeTypesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeType_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeType_Filter>;\n};\n\n\nexport type SubscriptionGaugeVoteArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeVotesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeVote_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeVote_Filter>;\n};\n\n\nexport type SubscriptionGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Gauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Gauge_Filter>;\n};\n\n\nexport type SubscriptionLiquidityGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLiquidityGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\n\nexport type SubscriptionLockSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLockSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LockSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LockSnapshot_Filter>;\n};\n\n\nexport type SubscriptionOmniVotingEscrowLockArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionOmniVotingEscrowLocksArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OmniVotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<OmniVotingEscrowLock_Filter>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type SubscriptionRewardTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionRewardTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RewardToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RewardToken_Filter>;\n};\n\n\nexport type SubscriptionRootGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionRootGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RootGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RootGauge_Filter>;\n};\n\n\nexport type SubscriptionSingleRecipientGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSingleRecipientGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SingleRecipientGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<SingleRecipientGauge_Filter>;\n};\n\n\nexport type SubscriptionUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\n\nexport type SubscriptionVotingEscrowArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionVotingEscrowLockArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionVotingEscrowLocksArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\n\nexport type SubscriptionVotingEscrowsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrow_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrow_Filter>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  /**  List of gauge the user has shares  */\n  gaugeShares?: Maybe<Array<GaugeShare>>;\n  /**  List of votes on gauges  */\n  gaugeVotes?: Maybe<Array<GaugeVote>>;\n  /**  User address  */\n  id: Scalars['ID'];\n  /**  List of omni locks the user created  */\n  omniVotingLocks?: Maybe<Array<OmniVotingEscrowLock>>;\n  /**  List of locks the user created  */\n  votingLocks?: Maybe<Array<VotingEscrowLock>>;\n};\n\n\nexport type UserGaugeSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type UserGaugeVotesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeVote_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeVote_Filter>;\n};\n\n\nexport type UserOmniVotingLocksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OmniVotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<OmniVotingEscrowLock_Filter>;\n};\n\n\nexport type UserVotingLocksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\nexport type User_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<User_Filter>>>;\n  gaugeShares_?: InputMaybe<GaugeShare_Filter>;\n  gaugeVotes_?: InputMaybe<GaugeVote_Filter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  omniVotingLocks_?: InputMaybe<OmniVotingEscrowLock_Filter>;\n  or?: InputMaybe<Array<InputMaybe<User_Filter>>>;\n  votingLocks_?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\nexport enum User_OrderBy {\n  gaugeShares = 'gaugeShares',\n  gaugeVotes = 'gaugeVotes',\n  id = 'id',\n  omniVotingLocks = 'omniVotingLocks',\n  votingLocks = 'votingLocks'\n}\n\nexport type VotingEscrow = {\n  __typename?: 'VotingEscrow';\n  /**  VotingEscrow contract address  */\n  id: Scalars['ID'];\n  /**  List of veBAL locks created  */\n  locks?: Maybe<Array<VotingEscrowLock>>;\n  /**  List of veBAL locks created  */\n  omniLocks?: Maybe<Array<OmniVotingEscrowLock>>;\n  /**  Amount of B-80BAL-20WETH BPT locked, only applies on mainnet  */\n  stakedSupply?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type VotingEscrowLocksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\n\nexport type VotingEscrowOmniLocksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OmniVotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<OmniVotingEscrowLock_Filter>;\n};\n\nexport type VotingEscrowLock = {\n  __typename?: 'VotingEscrowLock';\n  /**  veBAL balance at the moment user locks  */\n  bias: Scalars['BigDecimal'];\n  /**  Equal to: <userAdress>-<votingEscrow>  */\n  id: Scalars['ID'];\n  /**  Amount of B-80BAL-20WETH BPT the user has locked  */\n  lockedBalance: Scalars['BigDecimal'];\n  /**  veBAL decay rate (per second)  */\n  slope: Scalars['BigDecimal'];\n  /**  Timestamp at which the lock was created [seconds]  */\n  timestamp: Scalars['Int'];\n  /**  Timestamp at which B-80BAL-20WETH BPT can be unlocked by user [seconds]  */\n  unlockTime: Scalars['BigInt'];\n  /**  Timestamp at which the lcok was created [seconds]. Same as timestamp  */\n  updatedAt: Scalars['Int'];\n  /**  Reference to User entity  */\n  user: User;\n  /**  Reference to VotingEscrow entity  */\n  votingEscrowID: VotingEscrow;\n};\n\nexport type VotingEscrowLock_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<VotingEscrowLock_Filter>>>;\n  bias?: InputMaybe<Scalars['BigDecimal']>;\n  bias_gt?: InputMaybe<Scalars['BigDecimal']>;\n  bias_gte?: InputMaybe<Scalars['BigDecimal']>;\n  bias_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  bias_lt?: InputMaybe<Scalars['BigDecimal']>;\n  bias_lte?: InputMaybe<Scalars['BigDecimal']>;\n  bias_not?: InputMaybe<Scalars['BigDecimal']>;\n  bias_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lockedBalance?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lockedBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  or?: InputMaybe<Array<InputMaybe<VotingEscrowLock_Filter>>>;\n  slope?: InputMaybe<Scalars['BigDecimal']>;\n  slope_gt?: InputMaybe<Scalars['BigDecimal']>;\n  slope_gte?: InputMaybe<Scalars['BigDecimal']>;\n  slope_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  slope_lt?: InputMaybe<Scalars['BigDecimal']>;\n  slope_lte?: InputMaybe<Scalars['BigDecimal']>;\n  slope_not?: InputMaybe<Scalars['BigDecimal']>;\n  slope_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  unlockTime?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_gt?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_gte?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  unlockTime_lt?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_lte?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_not?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  updatedAt?: InputMaybe<Scalars['Int']>;\n  updatedAt_gt?: InputMaybe<Scalars['Int']>;\n  updatedAt_gte?: InputMaybe<Scalars['Int']>;\n  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;\n  updatedAt_lt?: InputMaybe<Scalars['Int']>;\n  updatedAt_lte?: InputMaybe<Scalars['Int']>;\n  updatedAt_not?: InputMaybe<Scalars['Int']>;\n  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID?: InputMaybe<Scalars['String']>;\n  votingEscrowID_?: InputMaybe<VotingEscrow_Filter>;\n  votingEscrowID_contains?: InputMaybe<Scalars['String']>;\n  votingEscrowID_contains_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_ends_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_gt?: InputMaybe<Scalars['String']>;\n  votingEscrowID_gte?: InputMaybe<Scalars['String']>;\n  votingEscrowID_in?: InputMaybe<Array<Scalars['String']>>;\n  votingEscrowID_lt?: InputMaybe<Scalars['String']>;\n  votingEscrowID_lte?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_contains?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_ends_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  votingEscrowID_not_starts_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_starts_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum VotingEscrowLock_OrderBy {\n  bias = 'bias',\n  id = 'id',\n  lockedBalance = 'lockedBalance',\n  slope = 'slope',\n  timestamp = 'timestamp',\n  unlockTime = 'unlockTime',\n  updatedAt = 'updatedAt',\n  user = 'user',\n  user__id = 'user__id',\n  votingEscrowID = 'votingEscrowID',\n  votingEscrowID__id = 'votingEscrowID__id',\n  votingEscrowID__stakedSupply = 'votingEscrowID__stakedSupply'\n}\n\nexport type VotingEscrow_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  and?: InputMaybe<Array<InputMaybe<VotingEscrow_Filter>>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  locks_?: InputMaybe<VotingEscrowLock_Filter>;\n  omniLocks_?: InputMaybe<OmniVotingEscrowLock_Filter>;\n  or?: InputMaybe<Array<InputMaybe<VotingEscrow_Filter>>>;\n  stakedSupply?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_gt?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_gte?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  stakedSupply_lt?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_lte?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_not?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum VotingEscrow_OrderBy {\n  id = 'id',\n  locks = 'locks',\n  omniLocks = 'omniLocks',\n  stakedSupply = 'stakedSupply'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n  /** Integer representation of the timestamp stored in blocks for the chain */\n  timestamp?: Maybe<Scalars['Int']>;\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   *\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  deny = 'deny'\n}\n\nexport type GaugeShareQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type GaugeShareQuery = { __typename?: 'Query', gaugeShare?: { __typename?: 'GaugeShare', id: string, balance: string, user: { __typename?: 'User', id: string }, gauge: { __typename?: 'LiquidityGauge', id: string, isKilled: boolean, poolId?: string | null, poolAddress: string, totalSupply: string } } | null };\n\nexport type GaugeSharesQueryVariables = Exact<{\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeShare_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type GaugeSharesQuery = { __typename?: 'Query', gaugeShares: Array<{ __typename?: 'GaugeShare', id: string, balance: string, user: { __typename?: 'User', id: string }, gauge: { __typename?: 'LiquidityGauge', id: string, isKilled: boolean, poolId?: string | null, poolAddress: string, totalSupply: string } }> };\n\nexport type SubgraphGaugeShareFragment = { __typename?: 'GaugeShare', id: string, balance: string, user: { __typename?: 'User', id: string }, gauge: { __typename?: 'LiquidityGauge', id: string, isKilled: boolean, poolId?: string | null, poolAddress: string, totalSupply: string } };\n\nexport type LiquidityGaugesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type LiquidityGaugesQuery = { __typename?: 'Query', liquidityGauges: Array<{ __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null }> };\n\nexport type SubgraphLiquidityGaugeFragment = { __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null };\n\nexport type PoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, poolId?: string | null, preferentialGauge?: { __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null } | null }> };\n\nexport type SubgraphPoolWithPreferentialGaugeFragment = { __typename?: 'Pool', id: string, poolId?: string | null, preferentialGauge?: { __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null } | null };\n\nexport type PoolGaugesQueryVariables = Exact<{\n  where?: InputMaybe<Pool_Filter>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolGaugesQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', gauges?: Array<{ __typename?: 'LiquidityGauge', id: string, relativeWeightCap?: string | null }> | null, preferentialGauge?: { __typename?: 'LiquidityGauge', id: string } | null }> };\n\nexport const SubgraphGaugeShareFragmentDoc = gql`\n    fragment SubgraphGaugeShare on GaugeShare {\n  id\n  balance\n  user {\n    id\n  }\n  gauge {\n    id\n    isKilled\n    poolId\n    poolAddress\n    totalSupply\n  }\n}\n    `;\nexport const SubgraphLiquidityGaugeFragmentDoc = gql`\n    fragment SubgraphLiquidityGauge on LiquidityGauge {\n  id\n  symbol\n  poolAddress\n  poolId\n  streamer\n  factory {\n    id\n    numGauges\n  }\n  totalSupply\n  tokens {\n    id\n    symbol\n    decimals\n    totalDeposited\n    rate\n    periodFinish\n  }\n}\n    `;\nexport const SubgraphPoolWithPreferentialGaugeFragmentDoc = gql`\n    fragment SubgraphPoolWithPreferentialGauge on Pool {\n  id\n  poolId\n  preferentialGauge {\n    ...SubgraphLiquidityGauge\n  }\n}\n    ${SubgraphLiquidityGaugeFragmentDoc}`;\nexport const GaugeShareDocument = gql`\n    query GaugeShare($id: ID!, $block: Block_height) {\n  gaugeShare(id: $id, block: $block) {\n    ...SubgraphGaugeShare\n  }\n}\n    ${SubgraphGaugeShareFragmentDoc}`;\nexport const GaugeSharesDocument = gql`\n    query GaugeShares($first: Int, $orderBy: GaugeShare_orderBy, $orderDirection: OrderDirection, $skip: Int, $where: GaugeShare_filter, $block: Block_height) {\n  gaugeShares(\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    skip: $skip\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphGaugeShare\n  }\n}\n    ${SubgraphGaugeShareFragmentDoc}`;\nexport const LiquidityGaugesDocument = gql`\n    query LiquidityGauges($skip: Int, $first: Int, $orderBy: LiquidityGauge_orderBy, $orderDirection: OrderDirection, $where: LiquidityGauge_filter, $block: Block_height) {\n  liquidityGauges(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphLiquidityGauge\n  }\n}\n    ${SubgraphLiquidityGaugeFragmentDoc}`;\nexport const PoolsDocument = gql`\n    query Pools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolWithPreferentialGauge\n  }\n}\n    ${SubgraphPoolWithPreferentialGaugeFragmentDoc}`;\nexport const PoolGaugesDocument = gql`\n    query PoolGauges($where: Pool_filter, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $skip: Int, $block: Block_height) {\n  pools(\n    where: $where\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    skip: $skip\n    block: $block\n  ) {\n    gauges {\n      id\n      relativeWeightCap\n    }\n    preferentialGauge {\n      id\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    GaugeShare(variables: GaugeShareQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GaugeShareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GaugeShareQuery>(GaugeShareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GaugeShare', 'query');\n    },\n    GaugeShares(variables?: GaugeSharesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GaugeSharesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GaugeSharesQuery>(GaugeSharesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GaugeShares', 'query');\n    },\n    LiquidityGauges(variables?: LiquidityGaugesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<LiquidityGaugesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LiquidityGaugesQuery>(LiquidityGaugesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'LiquidityGauges', 'query');\n    },\n    Pools(variables?: PoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsQuery>(PoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pools', 'query');\n    },\n    PoolGauges(variables?: PoolGaugesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolGaugesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolGaugesQuery>(PoolGaugesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolGauges', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport { getSdk, Sdk } from './generated/balancer-subgraph-types';\nimport * as Gauges from './generated/balancer-gauges';\nimport * as V2 from './generated/balancer-subgraph-types';\n\nexport * from './generated/balancer-subgraph-types';\n\nexport type SubgraphClient = Sdk;\nexport type GaugesClient = Gauges.Sdk;\nexport type SubgraphLiquidityGauge = Gauges.LiquidityGauge;\nexport type SubgraphPool = V2.SubgraphPoolFragment;\n\nexport function createSubgraphClient(subgraphUrl: string): SubgraphClient {\n  const client = new GraphQLClient(subgraphUrl);\n\n  return getSdk(client);\n}\n\nexport function createGaugesClient(url: string): GaugesClient {\n  const client = new GraphQLClient(url);\n\n  return Gauges.getSdk(client);\n}\n","import { set } from 'lodash';\nimport { Fragment, JsonFragment, Interface, Result } from '@ethersproject/abi';\nimport { CallOverrides } from '@ethersproject/contracts';\nimport { Multicall3, Multicall3__factory } from '@/contracts';\nimport { Provider } from '@ethersproject/providers';\n\nexport class Multicaller3 {\n  private interface: Interface;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private calls: [string, string, any][] = [];\n  private paths: string[] = [];\n  address = '0xcA11bde05977b3631167028862bE2a173976CA11';\n  multicall: Multicall3;\n\n  constructor(\n    abi: string | Array<Fragment | JsonFragment | string>,\n    provider: Provider,\n    private options: CallOverrides = {}\n  ) {\n    this.interface = new Interface(abi);\n    this.multicall = Multicall3__factory.connect(this.address, provider);\n  }\n\n  call(\n    path: string,\n    address: string,\n    functionName: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params?: any[]\n  ): Multicaller3 {\n    this.calls.push([address, functionName, params]);\n    this.paths.push(path);\n    return this;\n  }\n\n  async execute(\n    from: Record<string, unknown> = {},\n    batchSize = 1024 // Define the number of function calls in each batch\n  ): Promise<Record<string, unknown>> {\n    const obj = from;\n    const results = await this.executeMulticall(batchSize);\n    results.forEach((result, i) =>\n      set(obj, this.paths[i], result.length > 1 ? result : result[0])\n    );\n    this.calls = [];\n    this.paths = [];\n    return obj;\n  }\n\n  private async executeMulticall(batchSize: number): Promise<Result[]> {\n    const numBatches = Math.ceil(this.calls.length / batchSize);\n    const results: Result[] = [];\n\n    const batchPromises = [];\n\n    for (let batchIndex = 0; batchIndex < numBatches; batchIndex++) {\n      const batchCalls = this.calls.slice(\n        batchIndex * batchSize,\n        (batchIndex + 1) * batchSize\n      );\n\n      const batchRequests = batchCalls.map(\n        ([address, functionName, params]) => ({\n          target: address,\n          allowFailure: true,\n          callData: this.interface.encodeFunctionData(functionName, params),\n        })\n      );\n\n      batchPromises.push(\n        this.multicall.callStatic.aggregate3(batchRequests, this.options)\n      );\n    }\n\n    const batchResults = await Promise.all(batchPromises);\n\n    batchResults.forEach((res, batchIndex) => {\n      const offset = batchIndex * batchSize;\n\n      for (let i = 0; i < res.length; i++) {\n        const callIndex = offset + i;\n        const { success, returnData } = res[i];\n\n        if (success) {\n          try {\n            const result = this.interface.decodeFunctionResult(\n              this.calls[callIndex][1],\n              returnData\n            );\n            results[callIndex] = result;\n          } catch (e) {\n            console.error('Multicall error', this.paths[callIndex]);\n            results[callIndex] = [];\n          }\n        } else {\n          console.error('Failed request in multicall', this.paths[callIndex]);\n          results[callIndex] = [];\n        }\n      }\n    });\n\n    return results;\n  }\n}\n","import { Multicaller3 } from '@/lib/utils/multiCaller3';\nimport { SubgraphPoolBase } from '@/.';\nimport { Provider } from '@ethersproject/providers';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { SubgraphToken } from '@balancer-labs/sor';\nimport { PoolToken, Pool } from '@/types';\n\nconst abi = [\n  'function getSwapFeePercentage() view returns (uint256)',\n  'function percentFee() view returns (uint256)',\n  'function protocolPercentFee() view returns (uint256)',\n  'function getNormalizedWeights() view returns (uint256[])',\n  'function totalSupply() view returns (uint256)',\n  'function getVirtualSupply() view returns (uint256)',\n  'function getActualSupply() view returns (uint256)',\n  'function getTargets() view returns (uint256 lowerTarget, uint256 upperTarget)',\n  'function getTokenRates() view returns (uint256, uint256)',\n  'function getWrappedTokenRate() view returns (uint256)',\n  'function getAmplificationParameter() view returns (uint256 value, bool isUpdating, uint256 precision)',\n  'function getPausedState() view returns (bool)',\n  'function inRecoveryMode() view returns (bool)',\n  'function getRate() view returns (uint256)',\n  'function getScalingFactors() view returns (uint256[] memory)', // do we need this here?\n  'function getPoolTokens(bytes32) view returns (address[], uint256[])',\n];\n\nconst getTotalSupplyFn = (poolType: string) => {\n  if (poolType.includes('Linear') || ['StablePhantom'].includes(poolType)) {\n    return 'getVirtualSupply';\n  } else if (poolType === 'ComposableStable') {\n    return 'getActualSupply';\n  } else {\n    return 'totalSupply';\n  }\n};\n\nconst getSwapFeeFn = (poolType: string) => {\n  if (poolType === 'Element') {\n    return 'percentFee';\n  } else if (poolType === 'FX') {\n    return 'protocolPercentFee';\n  } else {\n    return 'getSwapFeePercentage';\n  }\n};\n\ntype GenericToken = SubgraphToken | PoolToken;\ntype GenericPool = Omit<SubgraphPoolBase | Pool, 'tokens'> & {\n  tokens: GenericToken[];\n};\n\ninterface OnchainData {\n  poolTokens: [string[], string[]];\n  totalShares: string;\n  swapFee: string;\n  isPaused?: boolean;\n  inRecoveryMode?: boolean;\n  rate?: string;\n  scalingFactors?: string[];\n  weights?: string[];\n  targets?: [string, string];\n  wrappedTokenRate?: string;\n  amp?: [string, boolean, string];\n  tokenRates?: [string, string];\n}\n\nconst defaultCalls = (\n  id: string,\n  address: string,\n  vaultAddress: string,\n  poolType: string,\n  multicaller: Multicaller3\n) => {\n  multicaller.call(`${id}.poolTokens`, vaultAddress, 'getPoolTokens', [id]);\n  multicaller.call(`${id}.totalShares`, address, getTotalSupplyFn(poolType));\n  multicaller.call(`${id}.swapFee`, address, getSwapFeeFn(poolType));\n  // Following where added to the pools query contract, however legacy onchain data didn't have them.\n  // multicaller.call(`${id}.isPaused`, address, 'getPausedState');\n  // multicaller.call(`${id}.inRecoveryMode`, address, 'inRecoveryMode');\n  // multicaller.call(`${id}.rate`, address, 'getRate');\n  // multicaller.call(`${id}.scalingFactors`, address, 'getScalingFactors');\n};\n\nconst weightedCalls = (\n  id: string,\n  address: string,\n  multicaller: Multicaller3\n) => {\n  multicaller.call(`${id}.weights`, address, 'getNormalizedWeights');\n};\n\nconst linearCalls = (\n  id: string,\n  address: string,\n  multicaller: Multicaller3\n) => {\n  multicaller.call(`${id}.targets`, address, 'getTargets');\n  multicaller.call(`${id}.wrappedTokenRate`, address, 'getWrappedTokenRate');\n};\n\nconst stableCalls = (\n  id: string,\n  address: string,\n  multicaller: Multicaller3\n) => {\n  multicaller.call(`${id}.amp`, address, 'getAmplificationParameter');\n};\n\nconst gyroECalls = (id: string, address: string, multicaller: Multicaller3) => {\n  multicaller.call(`${id}.tokenRates`, address, 'getTokenRates');\n};\n\nconst poolTypeCalls = (poolType: string, poolTypeVersion = 1) => {\n  const do_nothing = () => ({});\n  switch (poolType) {\n    case 'Weighted':\n    case 'LiquidityBootstrapping':\n    case 'Investment':\n      return weightedCalls;\n    case 'Stable':\n    case 'StablePhantom':\n    case 'MetaStable':\n    case 'ComposableStable':\n      return stableCalls;\n    case 'GyroE':\n      if (poolTypeVersion === 2) {\n        return gyroECalls;\n      } else {\n        return do_nothing;\n      }\n    case 'Gyro2':\n      if (poolTypeVersion === 2) {\n        // Gyro2 V2 has tokenRates same as GyroE V2\n        return gyroECalls;\n      } else {\n        return do_nothing;\n      }\n    case 'AaveLinear':\n      if (poolTypeVersion === 1) {\n        return linearCalls;\n      } else {\n        return do_nothing;\n      }\n    default:\n      return do_nothing;\n  }\n};\n\nconst merge = <T extends GenericPool>(pool: T, result: OnchainData) => ({\n  ...pool,\n  tokens: result.poolTokens\n    ? pool.tokens.map((token) => {\n        const idx = result.poolTokens[0]\n          .map((t) => t.toLowerCase())\n          .indexOf(token.address);\n        const wrappedToken =\n          pool.wrappedIndex && pool.tokensList[pool.wrappedIndex];\n        const tokenDecimals =\n          token.decimals === undefined ? 18 : token.decimals;\n        return {\n          ...token,\n          balance: formatFixed(result.poolTokens[1][idx], tokenDecimals),\n          weight:\n            (result.weights && formatFixed(result.weights[idx], 18)) ||\n            token.weight,\n          priceRate:\n            (result.wrappedTokenRate &&\n              wrappedToken &&\n              wrappedToken.toLowerCase() === token.address.toLowerCase() &&\n              formatFixed(result.wrappedTokenRate, 18)) ||\n            token.priceRate,\n        } as SubgraphToken;\n      })\n    : pool.tokens,\n  totalShares: result.totalShares\n    ? formatFixed(result.totalShares, 18)\n    : pool.totalShares,\n  swapFee: result.swapFee ? formatFixed(result.swapFee, 18) : pool.swapFee,\n  amp:\n    (result.amp &&\n      result.amp[0] &&\n      formatFixed(result.amp[0], String(result.amp[2]).length - 1)) ||\n    pool.amp,\n  lowerTarget:\n    (result.targets && formatFixed(result.targets[0], 18)) || pool.lowerTarget,\n  upperTarget:\n    (result.targets && formatFixed(result.targets[1], 18)) || pool.upperTarget,\n  tokenRates:\n    (result.tokenRates &&\n      result.tokenRates.map((rate) => formatFixed(rate, 18))) ||\n    pool.tokenRates,\n  // rate: result.rate,\n  // isPaused: result.isPaused,\n  // inRecoveryMode: result.inRecoveryMode,\n  // scalingFactors: result.scalingFactors,\n});\n\nexport const fetchOnChainPoolData = async (\n  pools: {\n    id: string;\n    address: string;\n    poolType: string;\n    poolTypeVersion?: number;\n  }[],\n  vaultAddress: string,\n  provider: Provider,\n  batchSize = 1024\n): Promise<{ [id: string]: OnchainData }> => {\n  if (pools.length === 0) {\n    return {};\n  }\n\n  const multicaller = new Multicaller3(abi, provider);\n\n  pools.forEach(({ id, address, poolType, poolTypeVersion }) => {\n    defaultCalls(id, address, vaultAddress, poolType, multicaller);\n    poolTypeCalls(poolType, poolTypeVersion)(id, address, multicaller);\n  });\n\n  const results = (await multicaller.execute({}, batchSize)) as {\n    [id: string]: OnchainData;\n  };\n\n  return results;\n};\n\nexport async function getOnChainBalances<T extends GenericPool>(\n  subgraphPoolsOriginal: T[],\n  _multiAddress: string,\n  vaultAddress: string,\n  provider: Provider,\n  batchSize = 1024\n): Promise<T[]> {\n  if (subgraphPoolsOriginal.length === 0) return subgraphPoolsOriginal;\n\n  const poolsWithOnchainData: T[] = [];\n\n  const onchainData = (await fetchOnChainPoolData(\n    subgraphPoolsOriginal,\n    vaultAddress,\n    provider,\n    batchSize\n  )) as { [id: string]: OnchainData };\n\n  subgraphPoolsOriginal.forEach((pool) => {\n    const data = onchainData[pool.id];\n    poolsWithOnchainData.push(merge(pool, data));\n  });\n\n  return poolsWithOnchainData;\n}\n","import { PoolDataService, SubgraphPoolBase } from '@balancer-labs/sor';\nimport {\n  OrderDirection,\n  Pool_OrderBy,\n  PoolsQueryVariables,\n  SubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport { parseInt } from 'lodash';\nimport { getOnChainBalances } from './onChainData3';\nimport { Provider } from '@ethersproject/providers';\nimport {\n  BalancerNetworkConfig,\n  BalancerSdkSorConfig,\n  GraphQLQuery,\n} from '@/types';\nimport { GraphQLArgs } from '@/lib/graphql/types';\nimport {\n  GraphQLArgsBuilder,\n  SubgraphArgsFormatter,\n} from '@/lib/graphql/args-builder';\n\nimport { Logger } from '@/lib/utils/logger';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function mapPools(pools: any[]): SubgraphPoolBase[] {\n  return pools.map((pool) => ({\n    ...pool,\n    poolType: pool.poolType || '',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    tokens: (pool.tokens || []).map((token: any) => ({\n      ...token,\n      weight: token.weight || null,\n    })),\n    totalWeight: pool.totalWeight || undefined,\n    amp: pool.amp || undefined,\n    expiryTime: pool.expiryTime ? parseInt(pool.expiryTime) : undefined,\n    unitSeconds: pool.unitSeconds ? parseInt(pool.unitSeconds) : undefined,\n    principalToken: pool.principalToken || undefined,\n    baseToken: pool.baseToken || undefined,\n  }));\n}\n\nexport class SubgraphPoolDataService implements PoolDataService {\n  private readonly defaultArgs: GraphQLArgs;\n  constructor(\n    private readonly client: SubgraphClient,\n    private readonly provider: Provider,\n    private readonly network: BalancerNetworkConfig,\n    private readonly sorConfig?: BalancerSdkSorConfig,\n    query?: GraphQLQuery\n  ) {\n    // Default args can be overwritten by passing in a queryArgs object to .getPools\n    this.defaultArgs = query?.args || {\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n      where: {\n        swapEnabled: {\n          eq: true,\n        },\n        totalShares: {\n          gt: 0.000000000001,\n        },\n      },\n    };\n  }\n\n  /**\n   * Returns pools from the subgraph filtered by queryArgs with on-chain balances\n   *\n   * @param queryArgs\n   * @returns SubgraphPoolBase[]\n   */\n  async getPools(queryArgs?: GraphQLArgs): Promise<SubgraphPoolBase[]> {\n    const pools = await this.getSubgraphPools(queryArgs);\n\n    const filteredPools = pools.filter((p) => {\n      if (!this.network.poolsToIgnore) return true;\n      const index = this.network.poolsToIgnore.findIndex(\n        (id) => id.toLowerCase() === p.id.toLowerCase()\n      );\n      return index === -1;\n    });\n\n    const mapped = mapPools(filteredPools);\n\n    if (this.sorConfig && this.sorConfig.fetchOnChainBalances === false) {\n      return mapped;\n    }\n\n    const logger = Logger.getInstance();\n    logger.time(`fetching on-chain balances for ${mapped.length} pools`);\n\n    const onChainBalances = await getOnChainBalances(\n      mapped,\n      this.network.addresses.contracts.multicall,\n      this.network.addresses.contracts.vault,\n      this.provider,\n      this.network.multicallBatchSize\n    );\n\n    logger.timeEnd(`fetching on-chain balances for ${mapped.length} pools`);\n\n    return onChainBalances;\n  }\n\n  private async getSubgraphPools(queryArgs?: GraphQLArgs) {\n    const formattedQuery = new GraphQLArgsBuilder(\n      queryArgs || this.defaultArgs\n    ).format(new SubgraphArgsFormatter()) as PoolsQueryVariables;\n\n    if (formattedQuery.first) {\n      const { pools } = await this.client.Pools(formattedQuery);\n      return pools;\n    }\n\n    const { pool0, pool1000, pool2000 } = await this.client.AllPools(\n      formattedQuery\n    );\n\n    const pools = [...pool0, ...pool1000, ...pool2000];\n\n    return pools;\n  }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport { SubgraphClient } from '@/modules/subgraph/subgraph';\nimport { keyBy } from 'lodash';\n\nexport class SubgraphTokenPriceService implements TokenPriceService {\n  private readonly weth: string;\n\n  constructor(private readonly client: SubgraphClient, weth: string) {\n    //the subgraph addresses are all toLowerCase\n    this.weth = weth.toLowerCase();\n  }\n\n  public async getNativeAssetPriceInToken(\n    tokenAddress: string\n  ): Promise<string> {\n    const ethPerToken = await this.getLatestPriceInEthFromSubgraph(\n      tokenAddress\n    );\n\n    if (!ethPerToken) {\n      throw Error('No price found in the subgraph');\n    }\n\n    // We want the price of 1 ETH in terms of the token base units\n    return `${1 / ethPerToken}`;\n  }\n\n  public async getLatestPriceInEthFromSubgraph(\n    tokenAddress: string\n  ): Promise<number | null> {\n    tokenAddress = tokenAddress.toLowerCase();\n\n    const { latestPrices } = await this.client.TokenLatestPrices({\n      where: { asset_in: [tokenAddress, this.weth] },\n    });\n    const pricesKeyedOnId = keyBy(latestPrices, 'id');\n\n    //the ids are set as ${asset}-${pricingAsset}\n    //first try to find an exact match\n    if (pricesKeyedOnId[`${tokenAddress}-${this.weth}`]) {\n      return parseFloat(pricesKeyedOnId[`${tokenAddress}-${this.weth}`].price);\n    }\n\n    //no exact match, try to traverse the path\n    const matchingLatestPrices = latestPrices.filter(\n      (price) => price.asset === tokenAddress\n    );\n\n    //pick the first one we match on.\n    //There is no timestamp on latestPrice, should get introduced to allow for sorting by latest\n    for (const tokenPrice of matchingLatestPrices) {\n      const pricingAssetPricedInEth =\n        pricesKeyedOnId[`${tokenPrice.pricingAsset}-${this.weth}`];\n\n      //1 BAL = 20 USDC, 1 USDC = 0.00025 ETH, 1 BAL = 20 * 0.00025\n      if (pricingAssetPricedInEth) {\n        return (\n          parseFloat(tokenPrice.price) *\n          parseFloat(pricingAssetPricedInEth.price)\n        );\n      }\n    }\n\n    return null;\n  }\n}\n","import { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { BalancerNetworkConfig, BalancerSdkConfig } from '@/types';\nexport function getNetworkConfig(\n  config: BalancerSdkConfig\n): BalancerNetworkConfig {\n  if (typeof config.network === 'number') {\n    const networkConfig = BALANCER_NETWORK_CONFIG[config.network];\n\n    return {\n      ...networkConfig,\n      urls: {\n        ...networkConfig.urls,\n        subgraph: config.customSubgraphUrl ?? networkConfig.urls.subgraph,\n      },\n      tenderly: config.tenderly,\n    };\n  }\n\n  return {\n    ...config.network,\n    urls: {\n      ...config.network.urls,\n      subgraph: config.customSubgraphUrl ?? config.network.urls.subgraph,\n    },\n    tenderly: config.network.tenderly,\n  };\n}\n","export const POOLS_TO_IGNORE = [\n  '0x00c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000477',\n  '0x02d928e68d8f10c0358566152677db51e1e2dc8c00000000000000000000051e',\n  '0x04248aabca09e9a1a3d5129a7ba05b7f17de768400000000000000000000050e',\n  '0x05513ca725b6ce035ca2641075474eb469f05f4c00020000000000000000041f',\n  '0x0a0fb4ff697de5ac5b6770cd8ee1b72af80b57cf000000000000000000000496',\n  '0x0afbd58beca09545e4fb67772faf3858e610bcd00000000000000000000004b9',\n  '0x0d05aac44ac7dd3c7ba5d50be93eb884a057d23400000000000000000000051c',\n  '0x11839d635e2f0270da37e8ef4324d4d5d54329570002000000000000000004d8',\n  '0x126e7643235ec0ab9c103c507642dc3f4ca23c66000000000000000000000468',\n  '0x133d241f225750d2c92948e464a5a80111920331000000000000000000000476',\n  '0x159cb00338fb63f263fd6f621df619cef71da9540000000000000000000004d5',\n  '0x173063a30e095313eee39411f07e95a8a806014e0002000000000000000003ab',\n  '0x1bd2f176a812e312077bca87e37c08432bb09f3e0000000000000000000005a1',\n  '0x20b156776114e8a801e9767d90c6ccccc8adf398000000000000000000000499',\n  '0x246ffb4d928e394a02e45761fecdba6c2e79b8eb000000000000000000000541',\n  '0x25accb7943fd73dda5e23ba6329085a3c24bfb6a000200000000000000000387',\n  '0x26c2b83fc8535deead276f5cc3ad9c1a2192e02700020000000000000000056b',\n  '0x2b218683178d029bab6c9789b1073aa6c96e517600000000000000000000058c',\n  '0x2ba7aa2213fa2c909cd9e46fed5a0059542b36b00000000000000000000003a3',\n  '0x2bbf681cc4eb09218bee85ea2a5d3d13fa40fc0c0000000000000000000000fd',\n  '0x2e52c64fd319e380cdbcfc4577ea1fda558a32e40002000000000000000005ba',\n  '0x2f4eb100552ef93840d5adc30560e5513dfffacb000000000000000000000334',\n  '0x2ff1a9dbdacd55297452cfd8a4d94724bc22a5f7000000000000000000000484',\n  '0x3035917be42af437cbdd774be26b9ec90a2bd677000200000000000000000543',\n  '0x331d50e0b00fc1c32742f151e56b9b616227e23e00000000000000000000047c',\n  '0x334c96d792e4b26b841d28f53235281cec1be1f200020000000000000000038a',\n  '0x335d1709d4da9aca59d16328db5cd4ea66bfe06b0000000000000000000004d6',\n  '0x395d8a1d9ad82b5abe558f8abbfe183b27138af40000000000000000000004e5',\n  '0x3bb22fc9033b802f2ac47c18885f63476f158afc000000000000000000000483',\n  '0x3c640f0d3036ad85afa2d5a9e32be651657b874f00000000000000000000046b',\n  '0x3cdae4f12a67ba563499e102f309c73213cb241c000000000000000000000335',\n  '0x3dbb8d974b82e82ce79c20c0f5995f4f1f533ede000000000000000000000470',\n  '0x3f7a7fd7f214be45ec26820fd01ac3be4fc75aa70002000000000000000004c5',\n  '0x3fcb7085b8f2f473f80bf6d879cae99ea4de934400000000000000000000056d',\n  '0x41503c9d499ddbd1dcdf818a1b05e9774203bf46000000000000000000000594',\n  '0x4228290ee9cab692938ff0b4ba303fbcdb68e9f200020000000000000000057d',\n  '0x454ed96955d04d2f5cdd05e0fd1c77975bfe5307000000000000000000000410',\n  '0x481c5fc05d63a58aa2f0f2aa417c021b5d419cb200000000000000000000056a',\n  '0x483006684f422a9448023b2382615c57c5ecf18f000000000000000000000488',\n  '0x4a82b580365cff9b146281ab72500957a849abdc000000000000000000000494',\n  '0x4c81255cc9ed7062180ea99962fe05ac0d57350b0000000000000000000005a3',\n  '0x4c8d2e60863e8d7e1033eda2b3d84e92a641802000000000000000000000040f',\n  '0x4cbde5c4b4b53ebe4af4adb85404725985406163000000000000000000000595',\n  '0x4ce0bd7debf13434d3ae127430e9bd4291bfb61f00020000000000000000038b',\n  '0x4ce277df0feb5b4d07a0ca2adcf5326e4005239d000000000000000000000518',\n  '0x4fd4687ec38220f805b6363c3c1e52d0df3b5023000200000000000000000473',\n  '0x4fd63966879300cafafbb35d157dc5229278ed230000000000000000000000e9',\n  '0x50cf90b954958480b8df7958a9e965752f62712400000000000000000000046f',\n  '0x53bc3cba3832ebecbfa002c12023f8ab1aa3a3a0000000000000000000000411',\n  '0x5a6a8cffb4347ff7fc484bf5f0f8a2e234d34255000200000000000000000275',\n  '0x5b3240b6be3e7487d61cd1afdfc7fe4fa1d81e6400000000000000000000037b',\n  '0x60683b05e9a39e3509d8fdb9c959f23170f8a0fa000000000000000000000489',\n  '0x60d604890feaa0b5460b28a424407c24fe89374a0000000000000000000004fc',\n  '0x639883476960a23b38579acfd7d71561a0f408cf000200000000000000000505',\n  '0x652d486b80c461c397b0d95612a404da936f3db30000000000000000000000e7',\n  '0x6667c6fa9f2b3fc1cc8d85320b62703d938e43850000000000000000000004fb',\n  '0x6a1eb2e9b45e772f55bd9a34659a04b6f75da68700000000000000000000040d',\n  '0x6c56e72c551b5ac4bf54a620a76077ca768c8fe40002000000000000000004da',\n  '0x70b7d3b3209a59fb0400e17f67f3ee8c37363f4900020000000000000000018f',\n  '0x7337224d59cb16c2dc6938cd45a7b2c60c865d6a0000000000000000000004d4',\n  '0x74cbfaf94a3577c539a9dcee9870a6349a33b34f000000000000000000000534',\n  '0x779d01f939d78a918a3de18cc236ee89221dfd4e0000000000000000000004c7',\n  '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n  '0x804cdb9116a10bb78768d3252355a1b18067bf8f0000000000000000000000fb',\n  '0x813e3fe1761f714c502d1d2d3a7cceb33f37f59d00000000000000000000040c',\n  '0x82698aecc9e28e9bb27608bd52cf57f704bd1b83000000000000000000000336',\n  '0x8a6b25e33b12d1bb6929a8793961076bd1f9d3eb0002000000000000000003e8',\n  '0x8e6ec57a822c2f527f2df7c7d7d361df3e7530a1000000000000000000000498',\n  '0x8f4063446f5011bc1c9f79a819efe87776f23704000000000000000000000197',\n  '0x9001cbbd96f54a658ff4e6e65ab564ded76a543100000000000000000000050a',\n  '0x9210f1204b5a24742eba12f710636d76240df3d00000000000000000000000fc',\n  '0x9516a2d25958edb8da246a320f2c7d94a0dbe25d000000000000000000000519',\n  '0x959216bb492b2efa72b15b7aacea5b5c984c3cca000200000000000000000472',\n  '0x968024662b9566b42d78af23a0f441bc8723fa83000200000000000000000418',\n  '0x99c88ad7dc566616548adde8ed3effa730eb6c3400000000000000000000049a',\n  '0x9b1c8407a360443a9e5eca004713e4088fab8ac0000000000000000000000497',\n  '0x9b692f571b256140a39a34676bffa30634c586e100000000000000000000059d',\n  '0x9d7f992c900fbea0ec314bdd71b7cc1becf76a33000200000000000000000573',\n  '0x9fb771d530b0ceba5160f7bfe2dd1e8b8aa1340300000000000000000000040e',\n  '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n  '0xa1697f9af0875b63ddc472d6eebada8c1fab85680000000000000000000004f9',\n  '0xa3823e50f20982656557a4a6a9c06ba5467ae9080000000000000000000000e6',\n  '0xa718042e5622099e5f0ace4e7122058ab39e1bbe000200000000000000000475',\n  '0xa8b103a10a94f4f2d7ed2fdcd5545e807557330700000000000000000000048e',\n  '0xac5b4ef7ede2f2843a704e96dcaa637f4ba3dc3f00000000000000000000051d',\n  '0xac976bb42cb0c85635644e8c7c74d0e0286aa61c0000000000000000000003cb',\n  '0xae37d54ae477268b9997d4161b96b8200755935c000000000000000000000337',\n  '0xae8535c23afedda9304b03c68a3563b75fc8f92b0000000000000000000005a0',\n  '0xb0f75e97a114a4eb4a425edc48990e6760726709000000000000000000000198',\n  '0xb5e3de837f869b0248825e0175da73d4e8c3db6b000200000000000000000474',\n  '0xb841b062ea8ccf5c4cb78032e91de4ae875560420002000000000000000005b7',\n  '0xb9bd68a77ccf8314c0dfe51bc291c77590c4e9e6000200000000000000000385',\n  '0xbb6881874825e60e1160416d6c426eae65f2459e000000000000000000000592',\n  '0xbc0f2372008005471874e426e86ccfae7b4de79d000000000000000000000485',\n  '0xbf2ef8bdc2fc0f3203b3a01778e3ec5009aeef3300000000000000000000058d',\n  '0xbfa413a2ff0f20456d57b643746133f54bfe0cd20000000000000000000004c3',\n  '0xc2b021133d1b0cf07dba696fd5dd89338428225b000000000000000000000598',\n  '0xc443c15033fcb6cf72cc24f1bda0db070ddd9786000000000000000000000593',\n  '0xc50d4347209f285247bda8a09fc1c12ce42031c3000000000000000000000590',\n  '0xc5dc1316ab670a2eed5716d7f19ced321191f38200000000000000000000056e',\n  '0xc8c79fcd0e859e7ec81118e91ce8e4379a481ee6000000000000000000000196',\n  '0xcaa052584b462198a5a9356c28bce0634d65f65c0000000000000000000004db',\n  '0xcbfa4532d8b2ade2c261d3dd5ef2a2284f7926920000000000000000000004fa',\n  '0xcfae6e251369467f465f13836ac8135bd42f8a56000000000000000000000591',\n  '0xd4e7c1f3da1144c9e2cfd1b015eda7652b4a439900000000000000000000046a',\n  '0xd6e355036f41dc261b3f1ed3bbc6003e87aadb4f000000000000000000000495',\n  '0xd7edb56f63b2a0191742aea32df1f98ca81ed9c600000000000000000000058e',\n  '0xd997f35c9b1281b82c8928039d14cddab5e13c2000000000000000000000019c',\n  '0xdba274b4d04097b90a72b62467d828cefd708037000000000000000000000486',\n  '0xdc063deafce952160ec112fa382ac206305657e60000000000000000000004c4',\n  '0xdec02e6642e2c999af429f5ce944653cad15e093000000000000000000000469',\n  '0xe03af00fabe8401560c1ff7d242d622a5b601573000000000000000000000493',\n  '0xe0fcbf4d98f0ad982db260f86cf28b49845403c5000000000000000000000504',\n  '0xe2d16b0a39f3fbb4389a0e8f1efcbecfb3d1e6e10000000000000000000005a7',\n  '0xe4dc3c1998ac693d68f4c77476d7c815694c3e94000200000000000000000416',\n  '0xe6bcc79f328eec93d4ec8f7ed35534d9ab549faa0000000000000000000000e8',\n  '0xe8c56405bc405840154d9b572927f4197d110de10000000000000000000005a4',\n  '0xeb486af868aeb3b6e53066abc9623b1041b42bc000000000000000000000046c',\n  '0xeb567dde03f3da7fe185bdacd5ab495ab220769d000000000000000000000548',\n  '0xec3626fee40ef95e7c0cbb1d495c8b67b34d398300000000000000000000053d',\n  '0xf22ff21e17157340575158ad7394e068048dd98b0000000000000000000004b8',\n  '0xf57c794f42da72b38c8f610ff3b5e8502e48cbde00000000000000000000055c',\n  '0xf71d0774b214c4cf51e33eb3d30ef98132e4dbaa00000000000000000000046e',\n  '0xfa24a90a3f2bbe5feea92b95cd0d14ce709649f900000000000000000000058f',\n  '0xfd11ccdbdb7ab91cb9427a6d6bf570c95876d1950000000000000000000004c2',\n  '0xfebb0bbf162e64fb9d0dfe186e517d84c395f016000000000000000000000502',\n  '0xfef969638c52899f91781f1be594af6f40b99bad00000000000000000000047b',\n  '0x02e139d53ebf4033bf78ab66c6a1e7f1f204487f0002000000000000000009f9',\n  '0x03090a9811181a2afe830a3a0b467698ccf3a8b1000000000000000000000bf5',\n  '0x0320c1c5b6df19a194d48882aaec1c72940081d9000000000000000000000a7d',\n  '0x04b54ea92d73de2d62d651db7d9778f0c49157d8000200000000000000000ba2',\n  '0x0503dd6b2d3dd463c9bef67fb5156870af63393e00000000000000000000042e',\n  '0x0889b240a5876aae745ac19f1771853671dc5d36000000000000000000000b3f',\n  '0x0bc54e914f53f98d16035f4f0d948f3e09c2fac0000200000000000000000bac',\n  '0x0c06e87c7b88d998f645b91c1f53b51294b12bca000100000000000000000bb9',\n  '0x10b040038f87219d9b42e025e3bd9b8095c87dd9000000000000000000000b11',\n  '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000aca',\n  '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000a5f',\n  '0x1379b816b9be611431d693290289c204720ca56d000100000000000000000b6f',\n  '0x150e7b885bdfce974f2abe88a72fdbd692175c6f0002000000000000000009fd',\n  '0x178e029173417b1f9c8bc16dcec6f697bc323746000000000000000000000758',\n  '0x1aafc31091d93c3ff003cff5d2d8f7ba2e7284250000000000000000000003b3',\n  '0x216690738aac4aa0c4770253ca26a28f0115c595000000000000000000000b2c',\n  '0x216d6db0c28204014618482c369d7fbf0a8f3232000100000000000000000b60',\n  '0x230ecdb2a7cee56d6889965a023aa0473d6da507000000000000000000000bf3',\n  '0x252ff6a3a6fd7b5e8e999de8e3f5c3b306ed1401000200000000000000000bec',\n  '0x25e57f4612912614e6c99616bd2abb9b5ae71e99000000000000000000000bf0',\n  '0x2645b13fd2c5295296e94a76280b968bdcbbdfed000000000000000000000c11',\n  '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000ac9',\n  '0x2c8dbe8eb86135d9f2f26d196748c088d47f73e7000200000000000000000a29',\n  '0x31bccf9e28b94e5dacebaa67fe8bc1603cecd904000000000000000000000a01',\n  '0x341068a547c3cde3c09e338714010dd01b32f93f000200000000000000000a34',\n  '0x3db543faf7a92052de7860c5c9debabee59ed5bd000000000000000000000a62',\n  '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd00000000000000000000070d',\n  '0x3efb91c4f9b103ee45885695c67794591916f34e000200000000000000000b43',\n  '0x402cfdb7781fa85d52f425352661128250b79e12000000000000000000000be3',\n  '0x43894de14462b421372bcfe445fa51b1b4a0ff3d000000000000000000000b36',\n  '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000b10',\n  '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n  '0x4a0b73f0d13ff6d43e304a174697e3d5cfd310a400020000000000000000091c',\n  '0x4a77ef015ddcd972fd9ba2c7d5d658689d090f1a000000000000000000000b38',\n  '0x4ae3661afa119892f0cc8c43edaf6a94989ac171000000000000000000000c06',\n  '0x4ccb966d8246240afb7a1a24628efb930870b1c40002000000000000000009fc',\n  '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000b0f',\n  '0x5b77107fcdf2b41903bab2bc555d4fc14cf7667d000000000000000000000b32',\n  '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000ac6',\n  '0x600bd01b6526611079e12e1ff93aba7a3e34226f0000000000000000000009e4',\n  '0x63ce19ccd39930725b8a3d2733627804718ab83d000000000000000000000bf2',\n  '0x64efad69f099813021b41f4cac6e749fd55e188f000000000000000000000b39',\n  '0x6933ec1ca55c06a894107860c92acdfd2dd8512f000000000000000000000428',\n  '0x6abe4e7a497b8293c258389c1b00d177e4f257ed00010000000000000000080d',\n  '0x6c8c7fc50247a47038015eb1fd5dc105d05dafba000200000000000000000ba0',\n  '0x7079a25dec33be61bbd81b2fb69b468e80d3e72c0000000000000000000009ff',\n  '0x71bd10c2a590b5858f5576550c163976a48af906000000000000000000000b27',\n  '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000acd',\n  '0x7f4f4942f2a14b6ab7b08b10ada1aacede4ee8d4000200000000000000000b44',\n  '0x86aef31951e0a3a54333bd9e72f9a95587d058c5000200000000000000000912',\n  '0x882c7a84231484b3e9f3fd45ac04b1eb5d35b076000200000000000000000a91',\n  '0x894c82800526e0391e709c0983a5aea3718b7f6d000000000000000000000ac5',\n  '0x89b28a9494589b09dbccb69911c189f74fdadc5a000000000000000000000b33',\n  '0x89bb15076c9f2d86aa98ec6cffc1a71e31c38953000000000000000000000bf1',\n  '0x89f1146fee52b5d9166e9c83cc388b6d8f69f1380001000000000000000009e7',\n  '0x8a819a4cabd6efcb4e5504fe8679a1abd831dd8f00000000000000000000042d',\n  '0x8b58a1e7fff52001c22386c2918d45938a6a9be30001000000000000000008d9',\n  '0x8b8225bfedebaf1708c55743acb4ad43fd4d0f21000200000000000000000918',\n  '0x8fbd0f8e490735cfc3abf4f29cbddd5c3289b9a7000000000000000000000b5b',\n  '0x8fd39252d683fdb60bddd4df4b53c9380b496d59000200000000000000000b45',\n  '0x9321e2250767d79bab5aa06daa8606a2b3b7b4c5000000000000000000000bf4',\n  '0x949a12b95ec5b80c375b98963a5d6b33b0d0efff0002000000000000000009fe',\n  '0x9a020bdc2faff5bd24c6acc2020d01ff9f2c627a000000000000000000000ae2',\n  '0x9cf9358300e34bf9373d30129a1e718d8d058b54000200000000000000000913',\n  '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000ad5',\n  '0xa5a935833f6a5312715f182733eab088452335d7000100000000000000000bee',\n  '0xa5fe91dde37d8bf2dacacc0168b115d28ed03f84000000000000000000000b35',\n  '0xa8bf1c584519be0184311c48adbdc4c15cb2e8c1000000000000000000000bf6',\n  '0xab269164a10fab22bc87c39946da06c870b172d6000000000000000000000bfc',\n  '0xac2cae8d2f78a4a8f92f20dbe74042cd0a8d5af3000000000000000000000be2',\n  '0xae646817e458c0be890b81e8d880206710e3c44e000000000000000000000acb',\n  '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000ac8',\n  '0xb0c830dceb4ef55a60192472c20c8bf19df03488000000000000000000000be1',\n  '0xb266ac3b7c98d7bcb28731dac0ef42dba1b276be000000000000000000000be4',\n  '0xb371aa09f5a110ab69b39a84b5469d29f9b22b76000000000000000000000b37',\n  '0xb3d658d5b95bf04e2932370dd1ff976fe18dd66a000000000000000000000ace',\n  '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n  '0xb59be8f3c85a9dd6e2899103b6fbf6ea405b99a4000000000000000000000b34',\n  '0xb878ecce26838fbba4f78cb5b791a0e09152c067000000000000000000000427',\n  '0xb973ca96a3f0d61045f53255e319aedb6ed4924000000000000000000000042f',\n  '0xbd4e35784c832d0f9049b54cb3609e5907c5b495000100000000000000000b14',\n  '0xc55ec796a4debe625d95436a3531f4950b11bdcf000000000000000000000b3e',\n  '0xc7e6389e364f4275eb442ef215ed21877028e2af000000000000000000000ac7',\n  '0xc83b55bbd005f1f84906545fcdb145dee53523e0000200000000000000000b30',\n  '0xcb21a9e647c95127ed784626485b3104cb28d0e7000000000000000000000425',\n  '0xd00f9ca46ce0e4a63067c4657986f0167b0de1e5000000000000000000000b42',\n  '0xd2f3b9e67c69762dd1c88f1d3dadd1649a190761000200000000000000000bf7',\n  '0xd4accb350f9cf59fe3cf7a5ee6ed9ace6a568ea9000200000000000000000b75',\n  '0xda1cd1711743e57dd57102e9e61b75f3587703da000000000000000000000acc',\n  '0xdae301690004946424e41051ace1791083be42a1000000000000000000000b40',\n  '0xde0a77ab6689b980c30306b10f9131a007e1af81000200000000000000000ba1',\n  '0xe051605a83deae38d26a7346b100ef1ac2ef8a0b0000000000000000000003ce',\n  '0xe1fb90d0d3b47e551d494d7ebe8f209753526b01000000000000000000000ac4',\n  '0xe2272cddb2cc408e79e02a73d1db9acc24a843d5000200000000000000000ba7',\n  '0xe2dc0e0f2c358d6e31836dee69a558ab8d1390e70000000000000000000009fa',\n  '0xe4885ed2818cc9e840a25f94f9b2a28169d1aea7000000000000000000000b29',\n  '0xe6909c2f18a29d97217a6146f045e1780606991f000100000000000000000bfe',\n  '0xe78b25c06db117fdf8f98583cdaaa6c92b79e917000000000000000000000b2b',\n  '0xea11645ac7d8f2def94c9d8d86bd766296c9b6b6000000000000000000000b3a',\n  '0xeb480dbbdd921cd6c359e4cc4c65ddea6395e2a1000200000000000000000946',\n  '0xed35f28f837e96f81240ebb82e0e3f518c7e8a2f000100000000000000000bb5',\n  '0xf0211cceebe6fcc45052b4e57ee95d233f5669d2000100000000000000000c01',\n  '0xf22a66046b5307842f21b311ecb4c462c24c0635000000000000000000000b15',\n  '0xf28f17be00f8ca3c9b7f66a4aad5513757fb3341000200000000000000000b5a',\n  '0xf42ed61450458ee4620f5ef4f29adb25a6ef0fb6000000000000000000000bf8',\n  '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000000000000000000000445',\n  '0xf93579002dbe8046c43fefe86ec78b1112247bb8000000000000000000000759',\n  '0xf984eb2b8a7ef780245a797a2fccd82f346409ca000000000000000000000a59',\n  '0xfa2c0bd8327c99db5bde4c9e9e5cbf30946351bb000000000000000000000948',\n  '0xff4ce5aaab5a627bf82f4a571ab1ce94aa365ea600000000000000000000075a',\n  '0x1ac55c31dac78ca943cb8ebfca5945ce09e036e2000000000000000000000024',\n  '0x225e0047671939a8d78e08ebd692788abe63f15c000000000000000000000009',\n  '0x41211bba6d37f5a74b22e667533f080c7c7f3f1300000000000000000000000b',\n  '0x4de21b365d6543661d0e105e579a34b963862497000200000000000000000045',\n  '0x581ec1f5e7ced12b186deae32256adb53bdd5b08000000000000000000000001',\n  '0x66f33ae36dd80327744207a48122f874634b3ada000100000000000000000013',\n  '0xa3ed6f78edc29f69df8a0d16b1d1ccf9871f918c000000000000000000000032',\n  '0xa611a551b95b205ccd9490657acf7899daee5db700000000000000000000002e',\n  '0xb95829adbacd8af89e291dee78bc09e24de51d6b000000000000000000000043',\n  '0xb973ca96a3f0d61045f53255e319aedb6ed49240000200000000000000000011',\n  '0xba1a5b19d09a79dada039b1f974015c5a989d5fd000100000000000000000046',\n  '0xbb9cd48d33033f5effbedec9dd700c7d7e1dcf5000000000000000000000000e',\n  '0xd16f72b02da5f51231fde542a8b9e2777a478c8800000000000000000000000f',\n  '0xd4015683b8153666190e0b2bec352580ebc4caca00000000000000000000000d',\n  '0xe15cac1df3621e001f76210ab12a7f1a1691481f000000000000000000000044',\n  '0xe7f88d7d4ef2eb18fcf9dd7216ba7da1c46f3dd600000000000000000000000a',\n  '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000200000000000000000012',\n  '0xfedb19ec000d38d92af4b21436870f115db22725000000000000000000000010',\n  '0xffff76a3280e95dc855696111c2562da09db2ac000000000000000000000000c',\n  '0x00fcd3d55085e998e291a0005cedecf58ac14c4000020000000000000000047f',\n  '0x077794c30afeccdf5ad2abc0588e8cee7197b71a000000000000000000000352',\n  '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000381',\n  '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000353',\n  '0x19b1c92631405a0a9495ccba0becf4f2e8e908bd000000000000000000000410',\n  '0x1e550b7764da9638fdd32c8a701364de31f45ee800000000000000000000047c',\n  '0x1fa7f727934226aedab636d62a084931b97d366b000000000000000000000411',\n  '0x23ca0306b21ea71552b148cf3c4db4fc85ae19290000000000000000000000c9',\n  '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000380',\n  '0x2a96254ca32020b20ed3506f8f75318da24709f9000200000000000000000456',\n  '0x36942963e3b6f37ecc45a4e72349558514233f0000000000000000000000048a',\n  '0x3f53a862919ccfa023cb6ace91378a79fb0f6bf500000000000000000000040f',\n  '0x40af308e3d07ec769d85eb80afb116525ff4ac99000000000000000000000485',\n  '0x418de00ae109e6f874d872658767866d680eaa1900000000000000000000047d',\n  '0x45c4d1376943ab28802b995acffc04903eb5223f000000000000000000000470',\n  '0x4689122d360c4725d244c5cfea22861333d862e6000100000000000000000468',\n  '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000409',\n  '0x49a0e3334496442a9706e481617724e7e37eaa080000000000000000000003ff',\n  '0x519cce718fcd11ac09194cff4517f12d263be067000000000000000000000382',\n  '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000408',\n  '0x567ecfcb22205d279bb8eed3e066989902bf03d5000000000000000000000452',\n  '0x585d95df0231fa08aeee35ff0c16b92fd0ecdc3300020000000000000000045f',\n  '0x5a7f39435fd9c381e4932fa2047c9a5136a5e3e7000000000000000000000400',\n  '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000350',\n  '0x6cb787a419c3e6ee2e9ff365856c29cd10659113000000000000000000000474',\n  '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000406',\n  '0x81fc12c60ee5b753cf5fd0adc342dfb5f3817e3200000000000000000000035d',\n  '0x894c82800526e0391e709c0983a5aea3718b7f6d00000000000000000000034f',\n  '0x970712708a08e8fb152be4d81b2dc586923f5369000200000000000000000479',\n  '0x9bf7c3b63c77b4b4f2717776f15a4bec1b532a280000000000000000000000c8',\n  '0x9cebf13bb702f253abf1579294694a1edad00eaa000000000000000000000486',\n  '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000407',\n  '0x9fb7d6dcac7b6aa20108bad226c35b85a9e31b63000200000000000000000412',\n  '0xa1ea76c42b2938cfa9abea12357881006c52851300000000000000000000048f',\n  '0xa50f89e9f439fde2a6fe05883721a00475da3c4500000000000000000000048b',\n  '0xa612b6aed2e7ca1a3a4f23fbca9128461bbb7718000000000000000000000274',\n  '0xa8af146d79ac0bb981e4e0d8b788ec5711b1d5d000000000000000000000047b',\n  '0xad28940024117b442a9efb6d0f25c8b59e1c950b00000000000000000000046f',\n  '0xae646817e458c0be890b81e8d880206710e3c44e00000000000000000000039d',\n  '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000351',\n  '0xbbf9d705b75f408cfcaee91da32966124d2c6f7d00000000000000000000047e',\n  '0xbd724eb087d4cc0f61a5fed1fffaf937937e14de000000000000000000000473',\n  '0xbe0f30217be1e981add883848d0773a86d2d2cd4000000000000000000000471',\n  '0xc46be4b8bb6b5a3d3120660efae9c5416318ed40000000000000000000000472',\n  '0xc69771058481551261709d8db44977e9afde645000010000000000000000042a',\n  '0xc6eee8cb7643ec2f05f46d569e9ec8ef8b41b389000000000000000000000475',\n  '0xcba9ff45cfb9ce238afde32b0148eb82cbe635620000000000000000000003fd',\n  '0xcf8b555b7754556cf2ac2165e77ee23ed8517d7900020000000000000000045e',\n  '0xd0dc20e6342db2de82692b8dc842301ff9121805000200000000000000000454',\n  '0xd3d5d45f4edf82ba0dfaf061d230766032a10e07000200000000000000000413',\n  '0xd6d20527c7b0669989ee082b9d3a1c63af742290000000000000000000000483',\n  '0xda1cd1711743e57dd57102e9e61b75f3587703da0000000000000000000003fc',\n  '0xe1fb90d0d3b47e551d494d7ebe8f209753526b0100000000000000000000034e',\n  '0xee02583596aee94cccb7e8ccd3921d955f17982a00000000000000000000040a',\n  '0xf984eb2b8a7ef780245a797a2fccd82f346409ca00000000000000000000034d',\n  '0xff8f84e8c87532af96aef5582ee451572233678b000200000000000000000478',\n  '0x054e7b0c73e1ee5aed6864fa511658fc2b54bcaa000000000000000000000015',\n  '0x3f1a2c4a3a751f6626bd90ef16e104f0772d4d6b00020000000000000000001b',\n  '0x7275c131b1f67e8b53b4691f92b0e35a4c1c6e22000000000000000000000010',\n  '0xa154009870e9b6431305f19b09f9cfd7284d4e7a000000000000000000000013',\n  '0xa1d14d922a575232066520eda11e27760946c991000000000000000000000012',\n  '0xa826a114b0c7db4d1ff4a4be845a78998c64564c000000000000000000000008',\n  '0xea67626e1f0b59e0d172a04f5702ef90bcdf440c00000000000000000000000f',\n  '0xeb496161099d45b3ea4892408ef745c6182eb56e00000000000000000000000e',\n  '0xece571847897fd61e764d455dc15cf1cd9de8d6f000000000000000000000014',\n  '0xed3e2f496cbcd8e212192fb8d1499842f04a0d19000000000000000000000009',\n  '0x02c9dcb975262719a61f9b40bdf0987ead9add3a000000000000000000000006',\n  '0x16c9a4d841e88e52b51936106010f27085a529ec00000000000000000000000c',\n  '0x32be2d0ddeaf3333501b24a28668ce373ba8e763000200000000000000000014',\n  '0x32f03464fdf909fdf3798f87ff3712b10c59bd86000000000000000000000005',\n  '0x4b718e0e2fea1da68b763cd50c446fba03ceb2ea00000000000000000000000b',\n  '0x68a69c596b3839023c0e08d09682314f582314e5000200000000000000000011',\n  '0x6f34a44fce1506352a171232163e7716dd073ade000200000000000000000015',\n  '0x9e2d87f904862671eb49cb358e74284762cc9f42000200000000000000000013',\n  '0xac4b72c01072a52b73ca71105504f1372efcce0d000000000000000000000003',\n  '0xbfd65c6160cfd638a85c645e6e6d8acac5dac935000000000000000000000004',\n  '0xe274c9deb6ed34cfe4130f8d0a8a948dea5bb28600000000000000000000000d',\n];\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport { gql, request } from 'graphql-request';\nimport { Network } from '@/types';\n\nexport class ApiTokenPriceService implements TokenPriceService {\n  private chainKey: string;\n\n  private balancerApiUrl = 'https://api-v3.balancer.fi/';\n\n  private tokenPriceQuery = gql`\n    query queryTokenPrices($chainKey: GqlChain!) {\n      tokenGetCurrentPrices(chains: [$chainKey]) {\n        address\n        price\n      }\n    }\n  `;\n\n  constructor(private readonly chainId: number) {\n    this.chainKey = Network[chainId];\n  }\n  async getNativeAssetPriceInToken(tokenAddress: string): Promise<string> {\n    const { tokenGetCurrentPrices: tokenPrices } = await request(\n      this.balancerApiUrl,\n      this.tokenPriceQuery,\n      {\n        chainKey: this.chainKey,\n      }\n    );\n    const tokenPriceUsd = (\n      tokenPrices as { address: string; price: number }[]\n    ).find(\n      ({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()\n    );\n    if (!tokenPriceUsd) {\n      throw new Error('Token Price not found in the API');\n    }\n    const nativeAssetPriceUsd = (\n      tokenPrices as { address: string; price: number }[]\n    ).find(\n      ({ address }) =>\n        address.toLowerCase() ===\n        NativeAssetAddress[this.chainKey as keyof typeof NativeAssetAddress]\n    );\n    if (!nativeAssetPriceUsd) {\n      throw new Error('Native Token Price not found in the API');\n    }\n    const tokenPriceInNativeAsset =\n      tokenPriceUsd.price / nativeAssetPriceUsd.price;\n    return String(tokenPriceInNativeAsset);\n  }\n}\n\nenum NativeAssetAddress {\n  MAINNET = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n  POLYGON = '0x0000000000000000000000000000000000001010',\n  ARBITRUM = '0x912ce59144191c1204e64559fe8253a0e49e6548',\n  AVALANCHE = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n  BASE = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n  FANTOM = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n  GNOSIS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n  OPTIMISM = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n  ZKEVM = '0xa2036f0538221a77a3937f1379699f44945018d0',\n}\n","export function getCoingeckoApiBaseUrl(isDemoApi = true): string {\n  if (isDemoApi) {\n    return 'https://coingecko.polarisfinance.io/';\n  }\n  return 'https://pro-api.coingecko.com/api/v3/';\n}\n\nexport function getCoingeckoApiKeyHeaderName(isDemoApi = true): string {\n  if (isDemoApi) {\n    return 'x-cg-demo-api-key';\n  }\n  return 'x-cg-pro-api-key';\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport axios from 'axios';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { Network, BalancerNetworkConfig, CoingeckoConfig } from '@/types';\nimport {\n  getCoingeckoApiBaseUrl,\n  getCoingeckoApiKeyHeaderName,\n} from '@/lib/utils/coingecko-api';\n\nexport class CoingeckoTokenPriceService implements TokenPriceService {\n  private readonly urlBase: string;\n  private readonly apiKey: string;\n  private readonly coingeckoApiKeyHeaderName: string;\n  constructor(private readonly chainId: number, coingecko: CoingeckoConfig) {\n    this.urlBase = `${getCoingeckoApiBaseUrl(\n      coingecko?.isDemoApiKey\n    )}getTokens/?chain=${this.platformId}`;\n    this.coingeckoApiKeyHeaderName = getCoingeckoApiKeyHeaderName(\n      coingecko?.isDemoApiKey\n    );\n    this.apiKey = coingecko.coingeckoApiKey;\n  }\n\n  public async getNativeAssetPriceInToken(\n    tokenAddress: string\n  ): Promise<string> {\n    const ethPerToken = await this.getTokenPriceInNativeAsset(tokenAddress);\n\n    // We get the price of token in terms of ETH\n    // We want the price of 1 ETH in terms of the token base units\n    return `${1 / parseFloat(ethPerToken)}`;\n  }\n\n  /**\n   * @dev Assumes that the native asset has 18 decimals\n   * @param tokenAddress - the address of the token contract\n   * @returns the price of 1 ETH in terms of the token base units\n   */\n  async getTokenPriceInNativeAsset(tokenAddress: string): Promise<string> {\n    const endpoint = `${this.urlBase}&contract_addresses=${tokenAddress}`;\n\n    const { data } = await axios.get(endpoint, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [this.coingeckoApiKeyHeaderName]: this.apiKey ?? '',\n      },\n    });\n\n    if (\n      data[tokenAddress.toLowerCase()] === undefined ||\n      data[tokenAddress.toLowerCase()][this.nativeAssetId] === undefined\n    ) {\n      throw Error('No price returned from Coingecko');\n    }\n\n    return data[tokenAddress.toLowerCase()][this.nativeAssetId];\n  }\n\n  private get platformId(): string {\n    const networkConfig: BalancerNetworkConfig =\n      BALANCER_NETWORK_CONFIG[this.chainId as Network];\n    return networkConfig.thirdParty.coingecko.platformId || '2';\n  }\n\n  private get nativeAssetId(): string {\n    const networkConfig: BalancerNetworkConfig =\n      BALANCER_NETWORK_CONFIG[this.chainId as Network];\n    return networkConfig.thirdParty.coingecko.nativeAssetId || '';\n  }\n}\n","import { SOR, SorConfig, TokenPriceService } from '@balancer-labs/sor';\nimport { Provider, JsonRpcProvider } from '@ethersproject/providers';\nimport { SubgraphPoolDataService } from './pool-data/subgraphPoolDataService';\nimport {\n  SubgraphClient,\n  createSubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport {\n  BalancerNetworkConfig,\n  BalancerSdkConfig,\n  BalancerSdkSorConfig,\n  CoingeckoConfig,\n} from '@/types';\nimport { SubgraphTokenPriceService } from './token-price/subgraphTokenPriceService';\nimport { getNetworkConfig } from '@/modules/sdk.helpers';\nimport { POOLS_TO_IGNORE } from '@/lib/constants/poolsToIgnore';\nimport { ApiTokenPriceService } from '@/modules/sor/token-price/apiTokenPriceService';\nimport { CoingeckoTokenPriceService } from '@/modules/sor/token-price/coingeckoTokenPriceService';\n\nexport class Sor extends SOR {\n  constructor(sdkConfig: BalancerSdkConfig) {\n    const network = getNetworkConfig(sdkConfig);\n    const sorConfig = Sor.getSorConfig(sdkConfig);\n    const sorNetworkConfig = Sor.getSorNetworkConfig(network);\n    const provider = new JsonRpcProvider(\n      sdkConfig.rpcUrl,\n      sdkConfig.network as number\n    );\n    const subgraphClient = createSubgraphClient(network.urls.subgraph);\n\n    const poolDataService = Sor.getPoolDataService(\n      network,\n      sorConfig,\n      provider,\n      subgraphClient\n    );\n\n    const tokenPriceService = Sor.getTokenPriceService(\n      network,\n      sorConfig,\n      subgraphClient,\n      sdkConfig.coingecko\n    );\n\n    super(provider, sorNetworkConfig, poolDataService, tokenPriceService);\n  }\n\n  private static getSorConfig(config: BalancerSdkConfig): BalancerSdkSorConfig {\n    return {\n      tokenPriceService: 'api',\n      poolDataService: 'subgraph',\n      fetchOnChainBalances: true,\n      ...config.sor,\n    };\n  }\n\n  private static getSorNetworkConfig(\n    network: BalancerNetworkConfig\n  ): SorConfig {\n    return {\n      ...network,\n      vault: network.addresses.contracts.vault,\n      weth: network.addresses.tokens.wrappedNativeAsset,\n      lbpRaisingTokens: network.addresses.tokens?.lbpRaisingTokens,\n      wETHwstETH: network.pools.wETHwstETH,\n      connectingTokens: network.sorConnectingTokens,\n      triPathMidPoolIds: network.sorTriPathMidPoolIds,\n    };\n  }\n\n  private static getPoolDataService(\n    network: BalancerNetworkConfig,\n    sorConfig: BalancerSdkSorConfig,\n    provider: Provider,\n    subgraphClient: SubgraphClient\n  ) {\n    // For SOR we want to ignore all configured pools (for Vault/Simulation we don't)\n    const allPoolsToIgnore = [\n      ...(network.poolsToIgnore ?? []),\n      ...POOLS_TO_IGNORE,\n    ];\n    return typeof sorConfig.poolDataService === 'object'\n      ? sorConfig.poolDataService\n      : new SubgraphPoolDataService(\n          subgraphClient,\n          provider,\n          { ...network, poolsToIgnore: allPoolsToIgnore },\n          sorConfig\n        );\n  }\n\n  private static getTokenPriceService(\n    network: BalancerNetworkConfig,\n    sorConfig: BalancerSdkSorConfig,\n    subgraphClient: SubgraphClient,\n    coingeckoConfig?: CoingeckoConfig\n  ): TokenPriceService {\n    if (sorConfig.tokenPriceService === 'coingecko' && coingeckoConfig) {\n      return new CoingeckoTokenPriceService(network.chainId, coingeckoConfig);\n    }\n    if (typeof sorConfig.tokenPriceService === 'object') {\n      return sorConfig.tokenPriceService;\n    } else if (sorConfig.tokenPriceService === 'subgraph') {\n      return new SubgraphTokenPriceService(\n        subgraphClient,\n        network.addresses.tokens.wrappedNativeAsset\n      );\n    }\n    return new ApiTokenPriceService(network.chainId);\n  }\n}\n","import {\n  QuerySimpleFlashSwapParameters,\n  QuerySimpleFlashSwapResponse,\n  SimpleFlashSwapParameters,\n  SwapType,\n} from '../types';\nimport { queryBatchSwap } from '../queryBatchSwap';\nimport { BatchSwap } from '../types';\nimport { sum } from 'lodash';\n\nfunction checkSimpleFlashSwapParams(params: {\n  poolIds: string[];\n  assets: string[];\n}) {\n  if (params.poolIds.length > 2) {\n    throw new Error('Simple flash swap only supports a maximum of two pools');\n  }\n\n  if (params.assets.length > 2) {\n    throw new Error(\n      'Simple flash swap only supports a maximum of to two assets (tokens)'\n    );\n  }\n}\n\nfunction createSwaps(\n  poolIds: SimpleFlashSwapParameters['poolIds'],\n  amount: string\n): BatchSwap['swaps'] {\n  return [\n    {\n      poolId: poolIds[0],\n      assetInIndex: 0,\n      assetOutIndex: 1,\n      amount,\n      userData: '0x',\n    },\n    {\n      poolId: poolIds[1],\n      assetInIndex: 1,\n      assetOutIndex: 0,\n      amount: '0',\n      userData: '0x',\n    },\n  ];\n}\n\nexport function convertSimpleFlashSwapToBatchSwapParameters({\n  poolIds,\n  assets,\n  flashLoanAmount,\n  walletAddress,\n}: SimpleFlashSwapParameters & {\n  walletAddress: string;\n}): BatchSwap {\n  checkSimpleFlashSwapParams({ poolIds, assets });\n\n  const swaps = createSwaps(poolIds, flashLoanAmount);\n\n  const funds = {\n    sender: walletAddress,\n    fromInternalBalance: false,\n    recipient: walletAddress,\n    toInternalBalance: false,\n  };\n\n  const limits = ['0', '0'];\n\n  const deadline = '999999999999999999';\n\n  return {\n    kind: SwapType.SwapExactIn,\n    swaps,\n    assets,\n    funds,\n    limits,\n    deadline,\n  };\n}\n\nfunction deltaToExpectedProfit(delta: string) {\n  return Number(delta) * -1;\n}\n\nfunction calcProfit(profits: string[]) {\n  return sum(profits);\n}\n\n/**\n * Simple interface to test if a simple flash swap is valid and see potential profits.\n *\n * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n * swapping in the first pool and then back in the second pool for a profit. For more\n * complex flash swaps, you will have to use the batch swap method.\n *\n * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n *\n * _NB: This method doesn't execute a flashSwap\n *\n * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n * @param {Contract}                    params.vaultContract - the ethersjs contract for the Balancer Vault.\n * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n * @param {string[]}                    params.poolIds - array of Balancer pool ids\n * @param {string[]}                    params.assets - array of token addresses\n * @returns {Promise<QuerySimpleFlashSwapResponse}>}       Returns an ethersjs transaction response\n */\nexport async function querySimpleFlashSwap(\n  params: QuerySimpleFlashSwapParameters\n): Promise<QuerySimpleFlashSwapResponse> {\n  checkSimpleFlashSwapParams(params);\n\n  const [tokenAddress0, tokenAddress1] = params.assets;\n\n  try {\n    const deltas = await queryBatchSwap(\n      params.vaultContract,\n      SwapType.SwapExactIn,\n      createSwaps(params.poolIds, params.flashLoanAmount),\n      params.assets\n    );\n\n    const profits = {\n      [tokenAddress0]: deltaToExpectedProfit(deltas[0]).toString(),\n      [tokenAddress1]: deltaToExpectedProfit(deltas[1]).toString(),\n    };\n\n    return {\n      profits,\n      isProfitable:\n        calcProfit([profits[tokenAddress0], profits[tokenAddress1]]) > 0,\n    };\n  } catch (err) {\n    throw `Failed to querySimpleFlashSwap: ${err}`;\n  }\n}\n","import { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { JsonFragment } from '@ethersproject/abi';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { BatchRelayerLibrary__factory } from '@/contracts';\n\n/**\n * Maps SOR data to get the tokenIn used in swaps.\n * Logic related to a relayer wrapping and unwrapping tokens.\n * SOR returns list of already wrapped tokenAddresses used in the swap.\n * However tokenIn defined as an input is the unwrapped token.\n * Note: tokenAddresses are transformed in SOR lib wrapInfo.setWrappedInfo\n * TODO: Once PR is merged, this table can be removed.\n */\ntype WrappedList = {\n  [key: string]: string;\n};\n\nconst underlyingToWrappedMap: WrappedList = {\n  // stETH => wstETH\n  '0xae7ab96520de3a18e5e111b5eaab095312d7fe84':\n    '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n\n  // AMPL => WAMPL\n  '0xd46ba6d942050d489dbd938a2c909a5d5039a161':\n    '0xedb171c18ce90b633db442f2a6f72874093b49ef',\n\n  // aAMPL -> ubAAMPL\n  '0x1e6bb68acec8fefbd87d192be09bb274170a0548':\n    '0xF03387d8d0FF326ab586A58E0ab4121d106147DF',\n};\n\n/**\n * Vault swaps are operating on wrapped tokens. When user is sending an unwrapped token, it's wrapped in a relayer.\n * SOR is returning an array of tokens already wrapped.\n * Converts tokenIn to match tokenIn used in a swap.\n *\n * TODO: add tokenIn and tokenOut addressed used for swap in the SOR results as tokenInForSwap, tokenOutForSwap\n *\n * @param token token address\n * @returns wrapped token address\n */\nfunction tokenForSwaps(token: string): string {\n  let wrapped = token;\n  // eslint-disable-next-line no-prototype-builtins\n  if (underlyingToWrappedMap.hasOwnProperty(token)) {\n    wrapped = underlyingToWrappedMap[token as keyof WrappedList];\n  }\n  return wrapped;\n}\n\nexport enum Relayers {\n  vault = 1,\n  lido = 2,\n}\n\nexport interface SwapRelayer {\n  id: Relayers;\n  address: string;\n}\n\n/**\n * Resolves a contract address for sending swap transaction to.\n * Balancer is using relayers to automatically wrap / unwrap tokens not compatibile with ERC20.\n */\nfunction relayerResolver(\n  assetIn: string,\n  assetOut: string,\n  chainId: number\n): SwapRelayer {\n  const { tokens, contracts } = networkAddresses(chainId);\n\n  let to = {\n    id: Relayers.vault,\n    address: contracts.vault,\n  };\n\n  if (tokens.stETH && contracts.lidoRelayer)\n    if ([assetIn, assetOut].includes(tokens.stETH))\n      to = {\n        id: Relayers.lido,\n        address: contracts.lidoRelayer,\n      };\n\n  return to;\n}\n\nfunction swapFragment(relayer: SwapRelayer): JsonFragment[] {\n  if (relayer.id === Relayers.lido)\n    return BatchRelayerLibrary__factory.abi.filter(\n      (f) =>\n        f.type === 'function' &&\n        f.name &&\n        ['swap', 'batchSwap'].includes(f.name)\n    );\n  else\n    return Vault__factory.abi.filter(\n      (f) =>\n        f.type === 'function' &&\n        f.name &&\n        ['swap', 'batchSwap'].includes(f.name)\n    );\n}\n\nfunction batchSwapFragment(\n  assetIn: string,\n  assetOut: string,\n  chainId: number\n): JsonFragment[] {\n  const { tokens, contracts } = networkAddresses(chainId);\n  if (tokens.stETH && contracts.lidoRelayer) {\n    if ([assetIn, assetOut].includes(tokens.stETH)) {\n      const relayerSignaturesForSwaps = BatchRelayerLibrary__factory.abi.filter(\n        (f) => f.type === 'function' && f.name === 'batchSwap'\n      );\n      return relayerSignaturesForSwaps;\n    }\n  }\n  const vaultSignaturesForSwaps = Vault__factory.abi.filter(\n    (f) => f.type === 'function' && f.name === 'batchSwap'\n  );\n  return vaultSignaturesForSwaps;\n}\n\nexport { tokenForSwaps, relayerResolver, swapFragment, batchSwapFragment };\n","import { SwapInfo } from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { tokenForSwaps } from './swap_utils';\nimport { SwapType } from '../types';\n\ninterface AmountForLimit {\n  amount: BigNumber;\n  max: (slippage: number) => BigNumber;\n  min: (slippage: number) => BigNumber;\n}\n\ninterface SDKSwapInfo extends SwapInfo {\n  /** Name mapping to improve readability. */\n  amountIn: BigNumber;\n  amountOut: BigNumber;\n  /** Name mapping for amounts used specifically for limits calculations. */\n  amountInForLimits: AmountForLimit;\n  amountOutForLimits: AmountForLimit;\n  /** Wrapped token addresses used in the swap. */\n  tokenInForSwaps: string;\n  tokenOutFromSwaps: string;\n}\n\n/** Applies slippage to a number */\nfunction amountForLimit(amount: BigNumber): AmountForLimit {\n  return {\n    amount,\n    max: (maxSlippage: number): BigNumber => {\n      return amount.mul(1e4 + maxSlippage).div(1e4);\n    },\n    min: (maxSlippage: number): BigNumber => {\n      return amount.mul(1e4 - maxSlippage).div(1e4);\n    },\n  };\n}\n\nfunction decorateSorSwapInfo(\n  swapInfo: SwapInfo,\n  swapType: SwapType\n): SDKSwapInfo {\n  const amountIn =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.swapAmount\n      : swapInfo.returnAmount;\n  const amountOut =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.returnAmount\n      : swapInfo.swapAmount;\n  const amountInForLimits =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.swapAmountForSwaps || swapInfo.swapAmount\n      : swapInfo.returnAmountFromSwaps || swapInfo.returnAmount;\n  const amountOutForLimits =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.returnAmountFromSwaps || swapInfo.returnAmount\n      : swapInfo.swapAmountForSwaps || swapInfo.swapAmount;\n  const tokenInForSwaps = tokenForSwaps(swapInfo.tokenIn);\n  const tokenOutFromSwaps = tokenForSwaps(swapInfo.tokenOut);\n\n  return {\n    ...swapInfo,\n    amountIn,\n    amountOut,\n    amountInForLimits: amountForLimit(amountInForLimits),\n    amountOutForLimits: amountForLimit(amountOutForLimits),\n    tokenInForSwaps,\n    tokenOutFromSwaps,\n  };\n}\n\nexport { SDKSwapInfo, tokenForSwaps, decorateSorSwapInfo };\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { FundManagement, SingleSwap, Swap, SwapType } from '../types';\nimport { Interface, JsonFragment } from '@ethersproject/abi';\nimport { SwapInfo } from '@balancer-labs/sor';\nimport { SDKSwapInfo, decorateSorSwapInfo } from './swap_info_decorator';\nimport { AddressZero } from '@ethersproject/constants';\nimport { swapFragment, relayerResolver, SwapRelayer } from './swap_utils';\n\nclass SingleSwapBuilder {\n  private swapInfo: SDKSwapInfo;\n  funds?: FundManagement;\n  limit?: BigNumberish;\n  deadline?: string;\n  relayer: SwapRelayer;\n  readonly functionName = 'swap';\n\n  /**\n   * Building swap transaction data\n   *\n   * @param swapInfo SOR result\n   * @param kind\n   * @param chainId used to resolve relayer addresses\n   */\n  constructor(\n    swapInfo: SwapInfo,\n    private readonly kind: SwapType,\n    private readonly chainId: number\n  ) {\n    this.swapInfo = decorateSorSwapInfo(swapInfo, kind);\n    this.relayer = relayerResolver(\n      this.swapInfo.tokenIn,\n      this.swapInfo.tokenOut,\n      this.chainId\n    );\n  }\n\n  setFunds(sender: string, recipient?: string): void {\n    this.funds = {\n      sender,\n      recipient: recipient || sender,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n  }\n\n  /**\n   * @param deadline block timestamp\n   */\n  setDeadline(deadline: string): void {\n    this.deadline = deadline;\n  }\n\n  get amount(): BigNumber {\n    return this.kind === SwapType.SwapExactOut\n      ? this.swapInfo.amountOutForLimits.amount\n      : this.swapInfo.amountInForLimits.amount;\n  }\n\n  /**\n   * Calculates the limit for token amount.\n   * https://dev.balancer.fi/guides/swaps/single-swaps\n   * https://dev.balancer.fi/resources/swaps/single-swap\n   *\n   * For swap:\n   * The meaning of limit depends on the value of kind\n   *    GIVEN_IN: The minimum amount of tokens we would accept to receive from the swap.\n   *    GIVEN_OUT: The maximum amount of tokens we would be sending to swap.\n   *\n   * @param maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   */\n  setLimits(maxSlippage: number): void {\n    this.limit =\n      this.kind === SwapType.SwapExactIn\n        ? this.swapInfo.amountOutForLimits.min(maxSlippage).toString()\n        : this.swapInfo.amountInForLimits.max(maxSlippage).toString();\n  }\n\n  get singleSwap(): SingleSwap {\n    const poolId = this.swapInfo.swaps[0].poolId;\n    const kind = this.kind;\n    const assetIn = this.swapInfo.tokenInForSwaps;\n    const assetOut = this.swapInfo.tokenOutFromSwaps;\n    const amount = this.amount.toString();\n    const userData = '0x';\n\n    return {\n      poolId,\n      kind,\n      assetIn,\n      assetOut,\n      amount,\n      userData,\n    };\n  }\n\n  attributes(): Swap {\n    if (!this.funds || !this.limit || !this.deadline) {\n      throw new Error('Uninitialized arguments');\n    }\n\n    // TODO: Raise errors when some parameters are missing\n    let attrs: Swap = {\n      request: this.singleSwap,\n      funds: this.funds,\n      limit: this.limit,\n      deadline: this.deadline,\n    };\n\n    // TODO: Call this logic from a relayer module maybe? Do we actually need to do that?\n    // additional parameters on a contract:\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L44\n    const fragment = this.fragment();\n    if (fragment[0].inputs && fragment[0].inputs?.length > 4) {\n      attrs = {\n        ...attrs,\n        value: '0',\n        outputReference: '0',\n      };\n    }\n\n    return attrs;\n  }\n\n  data(): string {\n    const contractInterface = new Interface(this.fragment());\n\n    return contractInterface.encodeFunctionData(\n      'swap',\n      Object.values(this.attributes())\n    );\n  }\n\n  value(maxSlippage: number): BigNumber {\n    let amount = BigNumber.from(0);\n    if (this.swapInfo.tokenIn === AddressZero)\n      amount =\n        this.kind === SwapType.SwapExactIn\n          ? this.swapInfo.amountIn\n          : this.swapInfo.amountInForLimits.max(maxSlippage);\n    return amount;\n  }\n\n  to(): string {\n    return this.relayer.address;\n  }\n\n  private fragment(): JsonFragment[] {\n    return swapFragment(this.relayer).filter(\n      (f) => f.name === this.functionName\n    );\n  }\n}\n\nexport { SingleSwapBuilder };\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { BatchSwap, FundManagement, SwapType } from '../types';\nimport { Interface, JsonFragment } from '@ethersproject/abi';\nimport { SwapInfo } from '@balancer-labs/sor';\nimport { SDKSwapInfo, decorateSorSwapInfo } from './swap_info_decorator';\nimport { AddressZero } from '@ethersproject/constants';\nimport { swapFragment, relayerResolver, SwapRelayer } from './swap_utils';\n\nclass BatchSwapBuilder {\n  private swapInfo: SDKSwapInfo;\n  funds?: FundManagement;\n  limits?: BigNumberish[];\n  deadline?: string;\n  relayer: SwapRelayer;\n  readonly functionName = 'batchSwap';\n\n  /**\n   * Building swap transaction data\n   *\n   * @param swapInfo SOR result\n   * @param kind\n   */\n  constructor(\n    swapInfo: SwapInfo,\n    private readonly kind: SwapType,\n    private readonly chainId: number\n  ) {\n    this.swapInfo = decorateSorSwapInfo(swapInfo, kind);\n    this.relayer = relayerResolver(\n      this.swapInfo.tokenIn,\n      this.swapInfo.tokenOut,\n      this.chainId\n    );\n  }\n\n  setFunds(sender: string, recipient?: string): void {\n    this.funds = {\n      sender,\n      recipient: recipient || sender,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n  }\n\n  /**\n   * @param deadline block timestamp\n   */\n  setDeadline(deadline: string): void {\n    this.deadline = deadline;\n  }\n\n  /**\n   * Given IN it's the minimum amount we are willing to accept.\n   * Given OUT it's the fixed amount defined as output.\n   */\n  minAmountOut(maxSlippage: number): BigNumber {\n    return this.kind === SwapType.SwapExactIn\n      ? this.swapInfo.amountOutForLimits.min(maxSlippage)\n      : this.swapInfo.amountOutForLimits.amount;\n  }\n\n  /**\n   * Given IN it's the fixed amount we define as input.\n   * Given OUT it's the maximum amount we are willing to pay for the request.\n   */\n  maxAmountIn(maxSlippage: number): BigNumber {\n    return this.kind === SwapType.SwapExactOut\n      ? this.swapInfo.amountInForLimits.max(maxSlippage)\n      : this.swapInfo.amountInForLimits.amount;\n  }\n\n  /**\n   * Calculates limits for token amount.\n   * Maximum number of tokens to send is a positive number\n   * Minimum amount of tokens to receive is a negative number\n   * https://dev.balancer.fi/guides/swaps/batch-swaps\n   * https://dev.balancer.fi/resources/swaps/batch-swaps#multi-hop-examples\n   *\n   * For batchSwap:\n   * An array of of the maximum net amounts of each asset which can be taken to perform the swap.\n   * Should the total trade require more than limits[i] tokens to be taken from sender for any i\n   * then the transaction shall fail.\n   *\n   * @param maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   */\n  setLimits(maxSlippage: number): void {\n    // TODO: This implementation handles only a single input. We might want to extend it for multiple token inputs\n    this.limits = this.swapInfo.tokenAddresses\n      .map((token) => {\n        let amount = BigNumber.from(0);\n        if (token === this.swapInfo.tokenInForSwaps) {\n          amount = this.maxAmountIn(maxSlippage);\n        }\n        if (token === this.swapInfo.tokenOutFromSwaps) {\n          amount = this.minAmountOut(maxSlippage).mul(-1);\n        }\n        return amount;\n      })\n      .map((limit) => limit.toString().split('.')[0]);\n  }\n\n  attributes(): BatchSwap {\n    // TODO: Raise errors when some parameters are missing\n    if (!this.funds || !this.limits || !this.deadline) {\n      throw new Error('Uninitialized arguments');\n    }\n\n    let attrs: BatchSwap = {\n      kind: this.kind,\n      swaps: this.swapInfo.swaps,\n      assets: this.swapInfo.tokenAddresses,\n      funds: this.funds,\n      limits: this.limits,\n      deadline: this.deadline,\n    };\n\n    const fragment = this.fragment();\n\n    // TODO: Call this logic from a relayer module maybe? Do we actually need to do that?\n    // additional parameters on a contract:\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L67\n    if (fragment[0].inputs && fragment[0].inputs?.length > 6) {\n      attrs = {\n        ...attrs,\n        value: '0',\n        outputReferences: [],\n      };\n    }\n\n    return attrs;\n  }\n\n  data(): string {\n    const contractInterface = new Interface(this.fragment());\n\n    return contractInterface.encodeFunctionData(\n      'batchSwap',\n      Object.values(this.attributes())\n    );\n  }\n\n  value(maxSlippage: number): BigNumber {\n    let amount = BigNumber.from(0);\n    if (this.swapInfo.tokenIn === AddressZero)\n      amount = this.maxAmountIn(maxSlippage);\n    return amount;\n  }\n\n  to(): string {\n    return this.relayer.address;\n  }\n\n  private fragment(): JsonFragment[] {\n    return swapFragment(this.relayer).filter(\n      (f) => f.name === this.functionName\n    );\n  }\n}\n\nexport { BatchSwapBuilder };\n","import { SOR, SubgraphPoolBase, SwapInfo, SwapTypes } from '@balancer-labs/sor';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { Vault } from '@/contracts/Vault';\nimport {\n  BatchSwap,\n  QuerySimpleFlashSwapParameters,\n  QuerySimpleFlashSwapResponse,\n  SimpleFlashSwapParameters,\n  FindRouteParameters,\n  BuildTransactionParameters,\n  SwapAttributes,\n  SwapType,\n  TokenAmounts,\n  SwapsOptions,\n} from './types';\nimport { queryBatchSwap, getSorSwapInfo } from './queryBatchSwap';\nimport { balancerVault } from '@/lib/constants/config';\nimport { getLimitsForSlippage } from './helpers';\nimport { BalancerSdkConfig } from '@/types';\nimport { SwapInput } from './types';\nimport { Sor } from '@/modules/sor/sor.module';\nimport {\n  convertSimpleFlashSwapToBatchSwapParameters,\n  querySimpleFlashSwap,\n} from './flashSwap';\nimport {\n  SingleSwapBuilder,\n  BatchSwapBuilder,\n} from '@/modules/swaps/swap_builder';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { GraphQLArgs } from '@/lib/graphql';\n\nconst buildRouteDefaultOptions = {\n  maxPools: 4,\n  gasPrice: '1',\n  deadline: '999999999999999999',\n  maxSlippage: 10, // in bspt, eg: 10 = 0.1%\n};\n\nexport class Swaps {\n  readonly sor: SOR;\n  chainId: number;\n  vaultContract: Vault;\n\n  // TODO: sorOrConfig - let's make it more predictable and always pass configuration explicitly\n  constructor(sorOrConfig: SOR | BalancerSdkConfig) {\n    if (sorOrConfig instanceof SOR) {\n      this.sor = sorOrConfig;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.chainId = (<any>this.sor.provider)['_network']['chainId'];\n    } else {\n      this.sor = new Sor(sorOrConfig);\n      if (typeof sorOrConfig.network === 'number')\n        this.chainId = sorOrConfig.network as number;\n      else this.chainId = sorOrConfig.network.chainId;\n    }\n\n    this.vaultContract = Vault__factory.connect(\n      balancerVault,\n      this.sor.provider\n    );\n  }\n\n  static getLimitsForSlippage(\n    tokensIn: string[],\n    tokensOut: string[],\n    swapType: SwapType,\n    deltas: string[],\n    assets: string[],\n    slippage: string\n  ): string[] {\n    // TO DO - Check best way to do this?\n    const limits = getLimitsForSlippage(\n      tokensIn,\n      tokensOut,\n      swapType,\n      deltas,\n      assets,\n      slippage\n    );\n\n    return limits.map((l) => l.toString());\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param FindRouteParameters\n   * @param FindRouteParameters.tokenIn Address\n   * @param FindRouteParameters.tokenOut Address\n   * @param FindRouteParameters.amount BigNumber with a trade amount\n   * @param FindRouteParameters.gasPrice BigNumber current gas price\n   * @param FindRouteParameters.maxPools number of pool included in path, default 4\n   * @returns Best trade route information\n   */\n  async findRouteGivenIn({\n    tokenIn,\n    tokenOut,\n    amount,\n    gasPrice,\n    maxPools = 4,\n  }: FindRouteParameters): Promise<SwapInfo> {\n    return this.sor.getSwaps(tokenIn, tokenOut, SwapTypes.SwapExactIn, amount, {\n      gasPrice,\n      maxPools,\n    });\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param FindRouteParameters\n   * @param FindRouteParameters.tokenIn Address\n   * @param FindRouteParameters.tokenOut Address\n   * @param FindRouteParameters.amount BigNumber with a trade amount\n   * @param FindRouteParameters.gasPrice BigNumber current gas price\n   * @param FindRouteParameters.maxPools number of pool included in path, default 4\n   * @returns Best trade route information\n   */\n  async findRouteGivenOut({\n    tokenIn,\n    tokenOut,\n    amount,\n    gasPrice,\n    maxPools = 4,\n  }: FindRouteParameters): Promise<SwapInfo> {\n    return this.sor.getSwaps(\n      tokenIn,\n      tokenOut,\n      SwapTypes.SwapExactOut,\n      amount,\n      {\n        gasPrice,\n        maxPools,\n      }\n    );\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param BuildTransactionParameters\n   * @param BuildTransactionParameters.userAddress Address\n   * @param BuildTransactionParameters.swapInfo result of route finding\n   * @param BuildTransactionParameters.kind 0 - givenIn, 1 - givenOut\n   * @param BuildTransactionParameters.deadline block linux timestamp as string\n   * @param BuildTransactionParameters.maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildSwap({\n    userAddress,\n    recipient,\n    swapInfo,\n    kind,\n    deadline,\n    maxSlippage,\n  }: BuildTransactionParameters): SwapAttributes {\n    if (!this.chainId) throw 'Missing network configuration';\n\n    // one vs batch (gas cost optimisation when using single swap)\n    const builder =\n      swapInfo.swaps.length > 1\n        ? new BatchSwapBuilder(swapInfo, kind, this.chainId)\n        : new SingleSwapBuilder(swapInfo, kind, this.chainId);\n    builder.setFunds(userAddress, recipient);\n    builder.setDeadline(deadline);\n    builder.setLimits(maxSlippage);\n\n    const to = builder.to();\n    const { functionName } = builder;\n    const attributes = builder.attributes();\n    const data = builder.data();\n    const value = builder.value(maxSlippage);\n\n    return { to, functionName, attributes, data, value };\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   * and builds a transaction request\n   *\n   * @param sender Sender of the swap\n   * @param recipient Reciever of the swap\n   * @param tokenIn Address of tokenIn\n   * @param tokenOut Address of tokenOut\n   * @param amount Amount of tokenIn to swap as a string with 18 decimals precision\n   * @param options\n   * @param options.maxPools number of pool included in path\n   * @param options.gasPrice BigNumber current gas price\n   * @param options.deadline BigNumber block timestamp\n   * @param options.maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  async buildRouteExactIn(\n    sender: string,\n    recipient: string,\n    tokenIn: string,\n    tokenOut: string,\n    amount: string,\n    options: SwapsOptions = buildRouteDefaultOptions\n  ): Promise<SwapAttributes> {\n    const opts = {\n      ...buildRouteDefaultOptions,\n      ...options,\n    };\n\n    const swapInfo = await this.findRouteGivenIn({\n      tokenIn,\n      tokenOut,\n      amount: BigNumber.from(amount),\n      gasPrice: BigNumber.from(opts.gasPrice),\n      maxPools: opts.maxPools,\n    });\n\n    const tx = this.buildSwap({\n      userAddress: sender, // sender account\n      recipient, // recipient account\n      swapInfo, // result from the previous step\n      kind: SwapType.SwapExactIn, // or SwapExactOut\n      deadline: opts.deadline, // BigNumber block timestamp\n      maxSlippage: opts.maxSlippage, // [bps], eg: 1 == 0.01%, 100 == 1%\n    });\n\n    // TODO: add query support\n    // query will be a function that returns the deltas for the swap in { [address: string]: string } format\n    // const query = this.queryBatchSwap(tx);\n\n    return tx;\n  }\n\n  /**\n   * Encode batchSwap in an ABI byte string\n   *\n   * [See method for a batchSwap](https://dev.balancer.fi/references/contracts/apis/the-vault#batch-swaps).\n   *\n   * _NB: This method doesn't execute a batchSwap -- it returns an [ABI byte string](https://docs.soliditylang.org/en/latest/abi-spec.html)\n   * containing the data of the function call on a contract, which can then be sent to the network to be executed.\n   * (ex. [sendTransaction](https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html#sendtransaction)).\n   *\n   * @param {BatchSwap}           batchSwap - BatchSwap information used for query.\n   * @param {SwapType}            batchSwap.kind - either exactIn or exactOut\n   * @param {BatchSwapSteps[]}    batchSwap.swaps - sequence of swaps\n   * @param {string[]}            batchSwap.assets - array contains the addresses of all assets involved in the swaps\n   * @param {FundManagement}      batchSwap.funds - object containing information about where funds should be taken/sent\n   * @param {number[]}            batchSwap.limits - limits for each token involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the minimum amount of tokens to receive (by passing a negative value) is specified\n   * @param {string}              batchSwap.deadline -  time (in Unix timestamp) after which it will no longer attempt to make a trade\n   * @returns {string}            encodedBatchSwapData - Returns an ABI byte string containing the data of the function call on a contract\n   */\n  static encodeBatchSwap(batchSwap: BatchSwap): string {\n    const vaultInterface = Vault__factory.createInterface();\n\n    return vaultInterface.encodeFunctionData('batchSwap', [\n      batchSwap.kind,\n      batchSwap.swaps,\n      batchSwap.assets,\n      batchSwap.funds,\n      batchSwap.limits,\n      batchSwap.deadline,\n    ]);\n  }\n\n  /**\n   * Encode simple flash swap into a ABI byte string\n   *\n   * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n   * swapping in the first pool and then back in the second pool for a profit. For more\n   * complex flash swaps, you will have to use the batch swap method.\n   *\n   * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n   *\n   * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n   * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n   * @param {string[]}                    params.poolIds - array of Balancer pool ids\n   * @param {string[]}                    params.assets - array of token addresses\n   * @param {string}                      params.walletAddress - array of token addresses\n   * @returns {string}                    encodedBatchSwapData - Returns an ABI byte string containing the data of the function call on a contract\n   */\n  static encodeSimpleFlashSwap(params: SimpleFlashSwapParameters): string {\n    return this.encodeBatchSwap(\n      convertSimpleFlashSwapToBatchSwapParameters(params)\n    );\n  }\n\n  /**\n   * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n   *\n   * @returns Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async fetchPools(queryArgs?: GraphQLArgs): Promise<boolean> {\n    return this.sor.fetchPools(queryArgs);\n  }\n\n  public getPools(): SubgraphPoolBase[] {\n    return this.sor.getPools();\n  }\n\n  /**\n   * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas.\n   * @param batchSwap - BatchSwap information used for query.\n   * @param {SwapType} batchSwap.kind - either exactIn or exactOut.\n   * @param {BatchSwapStep[]} batchSwap.swaps - sequence of swaps.\n   * @param {string[]} batchSwap.assets - array contains the addresses of all assets involved in the swaps.\n   * @returns {Promise<string[]>} Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n   * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n   * the same index in the `assets` array.\n   */\n  async queryBatchSwap(\n    batchSwap: Pick<BatchSwap, 'kind' | 'swaps' | 'assets'>\n  ): Promise<string[]> {\n    return await queryBatchSwap(\n      this.vaultContract,\n      batchSwap.kind,\n      batchSwap.swaps,\n      batchSwap.assets\n    );\n  }\n\n  /**\n   * Simple interface to test if a simple flash swap is valid and see potential profits.\n   *\n   * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n   * swapping in the first pool and then back in the second pool for a profit. For more\n   * complex flash swaps, you will have to use the batch swap method.\n   *\n   * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n   *\n   * _NB: This method doesn't execute a flashSwap\n   *\n   * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n   * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n   * @param {string[]}                    params.poolIds - array of Balancer pool ids\n   * @param {string[]}                    params.assets - array of token addresses\n   * @returns {Promise<{profits: Record<string, string>, isProfitable: boolean}>}       Returns an ethersjs transaction response\n   */\n  async querySimpleFlashSwap(\n    params: Omit<QuerySimpleFlashSwapParameters, 'vaultContract'>\n  ): Promise<QuerySimpleFlashSwapResponse> {\n    return await querySimpleFlashSwap({\n      ...params,\n      vaultContract: this.vaultContract,\n    });\n  }\n\n  /**\n   * Use SOR to get swapInfo for tokenIn<>tokenOut.\n   * @param {SwapInput} swapInput - Swap information used for querying using SOR.\n   * @param {string} swapInput.tokenIn - Addresse of asset in.\n   * @param {string} swapInput.tokenOut - Addresse of asset out.\n   * @param {SwapType} swapInput.swapType - Type of Swap, ExactIn/Out.\n   * @param {string} swapInput.amount - Amount used in swap.\n   * @returns {Promise<SwapInfo>} SOR swap info.\n   */\n  async getSorSwap(swapInput: SwapInput): Promise<SwapInfo> {\n    return await getSorSwapInfo(\n      swapInput.tokenIn,\n      swapInput.tokenOut,\n      swapInput.swapType,\n      swapInput.amount,\n      this.sor\n    );\n  }\n\n  async queryExactIn(swap: SwapInfo): Promise<TokenAmounts> {\n    const deltas = await this.query(swap, SwapType.SwapExactIn);\n    return this.assetDeltas(deltas.map(String), swap.tokenAddresses);\n  }\n\n  async queryExactOut(swap: SwapInfo): Promise<TokenAmounts> {\n    const deltas = await this.query(swap, SwapType.SwapExactOut);\n    return this.assetDeltas(deltas.map(String), swap.tokenAddresses);\n  }\n\n  private query(swap: SwapInfo, kind: SwapType): Promise<BigNumber[]> {\n    const { swaps, tokenAddresses: assets } = swap;\n\n    const funds = {\n      sender: AddressZero,\n      recipient: AddressZero,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n\n    return this.vaultContract.callStatic.queryBatchSwap(\n      kind,\n      swaps,\n      assets,\n      funds\n    );\n  }\n\n  private assetDeltas(deltas: string[], assets: string[]): TokenAmounts {\n    return Object.fromEntries(deltas.map((delta, idx) => [assets[idx], delta]));\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { ExitPoolRequest, JoinPoolRequest } from '@/types';\nimport { SwapType, BatchSwapStep, FundManagement } from '@/modules/swaps/types';\n\nexport enum PoolKind {\n  WEIGHTED = 0,\n  LEGACY_STABLE,\n  COMPOSABLE_STABLE,\n  COMPOSABLE_STABLE_V2,\n}\n\nexport type OutputReference = {\n  index: number;\n  key: BigNumber;\n};\n\nexport interface EncodeBatchSwapInput {\n  swapType: SwapType;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: string[];\n  deadline: BigNumberish;\n  value: BigNumberish;\n  outputReferences: OutputReference[];\n}\n\nexport interface EncodeExitPoolInput {\n  poolId: string;\n  poolKind: number;\n  sender: string;\n  recipient: string;\n  outputReferences: OutputReference[];\n  exitPoolRequest: ExitPoolRequest;\n}\n\nexport interface EncodeJoinPoolInput {\n  poolId: string;\n  kind: number;\n  sender: string;\n  recipient: string;\n  joinPoolRequest: JoinPoolRequest;\n  value: BigNumberish;\n  outputReference: string;\n}\n\nexport interface EncodeWrapAaveDynamicTokenInput {\n  staticToken: string;\n  sender: string;\n  recipient: string;\n  amount: BigNumberish;\n  fromUnderlying: boolean;\n  outputReference: BigNumberish;\n}\n\nexport interface EncodeUnwrapAaveStaticTokenInput {\n  staticToken: string;\n  sender: string;\n  recipient: string;\n  amount: BigNumberish;\n  toUnderlying: boolean;\n  outputReference: BigNumberish;\n}\n\nexport interface EncodeUnwrapInput {\n  wrappedToken: string;\n  sender: string;\n  recipient: string;\n  amount: BigNumberish;\n  outputReference: BigNumberish;\n}\n\nexport interface EncodeUnwrapWstETHInput {\n  sender: string;\n  recipient: string;\n  amount: BigNumberish;\n  outputReference: BigNumberish;\n}\n\nexport type ExitPoolData = ExitPoolRequest & EncodeExitPoolInput;\nexport type JoinPoolData = JoinPoolRequest & EncodeJoinPoolInput;\n","import { JsonRpcSigner } from '@ethersproject/providers';\nimport { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { BatchRelayerLibrary__factory } from '@/contracts';\nimport { IVault, Vault } from '@/contracts/Vault';\nimport {\n  EncodeBatchSwapInput,\n  EncodeExitPoolInput,\n  EncodeJoinPoolInput,\n  EncodeUnwrapAaveStaticTokenInput,\n  EncodeUnwrapInput,\n  EncodeUnwrapWstETHInput,\n  EncodeWrapAaveDynamicTokenInput,\n  ExitPoolData,\n  JoinPoolData,\n} from './types';\nimport { ExitPoolRequest, JoinPoolRequest } from '@/types';\nimport { Swap } from '../swaps/types';\nimport { RelayerAuthorization } from '@/lib/utils';\nimport FundManagementStruct = IVault.FundManagementStruct;\nimport SingleSwapStruct = IVault.SingleSwapStruct;\n\nexport * from './types';\n\nconst relayerLibrary = BatchRelayerLibrary__factory.createInterface();\n\nexport class Relayer {\n  static CHAINED_REFERENCE_TEMP_PREFIX = 'ba10'; // Temporary reference: it is deleted after a read.\n  static CHAINED_REFERENCE_READONLY_PREFIX = 'ba11'; // Read-only reference: it is not deleted after a read.\n\n  static encodeApproveVault(tokenAddress: string, maxAmount: string): string {\n    return relayerLibrary.encodeFunctionData('approveVault', [\n      tokenAddress,\n      maxAmount,\n    ]);\n  }\n\n  static encodeSetRelayerApproval(\n    relayerAdress: string,\n    approved: boolean,\n    authorisation: string\n  ): string {\n    return relayerLibrary.encodeFunctionData('setRelayerApproval', [\n      relayerAdress,\n      approved,\n      authorisation,\n    ]);\n  }\n\n  static encodeGaugeWithdraw(\n    gaugeAddress: string,\n    sender: string,\n    recipient: string,\n    amount: string\n  ): string {\n    return relayerLibrary.encodeFunctionData('gaugeWithdraw', [\n      gaugeAddress,\n      sender,\n      recipient,\n      amount,\n    ]);\n  }\n\n  static encodeGaugeDeposit(\n    gaugeAddress: string,\n    sender: string,\n    recipient: string,\n    amount: string\n  ): string {\n    return relayerLibrary.encodeFunctionData('gaugeDeposit', [\n      gaugeAddress,\n      sender,\n      recipient,\n      amount,\n    ]);\n  }\n\n  static encodeSwap(params: Swap): string {\n    return relayerLibrary.encodeFunctionData('swap', [\n      params.request as SingleSwapStruct,\n      params.funds as FundManagementStruct,\n      params.limit,\n      params.deadline as BigNumberish,\n      params.value as BigNumberish,\n      params.outputReference as BigNumberish,\n    ]);\n  }\n\n  static encodeBatchSwap(params: EncodeBatchSwapInput): string {\n    return relayerLibrary.encodeFunctionData('batchSwap', [\n      params.swapType,\n      params.swaps,\n      params.assets,\n      params.funds,\n      params.limits,\n      params.deadline,\n      params.value,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodeExitPool(params: EncodeExitPoolInput): string {\n    return relayerLibrary.encodeFunctionData('exitPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.exitPoolRequest,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodeJoinPool(params: EncodeJoinPoolInput): string {\n    return relayerLibrary.encodeFunctionData('joinPool', [\n      params.poolId,\n      params.kind,\n      params.sender,\n      params.recipient,\n      params.joinPoolRequest,\n      params.value,\n      params.outputReference,\n    ]);\n  }\n\n  static encodeWrapAaveDynamicToken(\n    params: EncodeWrapAaveDynamicTokenInput\n  ): string {\n    return relayerLibrary.encodeFunctionData('wrapAaveDynamicToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.fromUnderlying,\n      params.outputReference,\n    ]);\n  }\n\n  static encodeUnwrapAaveStaticToken(\n    params: EncodeUnwrapAaveStaticTokenInput\n  ): string {\n    return relayerLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.toUnderlying,\n      params.outputReference,\n    ]);\n  }\n\n  static encodeUnwrapWstETH(params: EncodeUnwrapWstETHInput): string {\n    return relayerLibrary.encodeFunctionData('unwrapWstETH', [\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  static encodeUnwrap(\n    params: EncodeUnwrapInput,\n    linearPoolType: string\n  ): string {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let unwrapType: any;\n\n    /**\n     * Other unwrap types available on BatchRelayerLibrary that does not seem to\n     * have a respective Linear pool type in the SDK:\n     * - unwrapUnbuttonToken\n     * - unwrapWstETH\n     */\n\n    switch (linearPoolType) {\n      case 'AaveLinear':\n        return this.encodeUnwrapAaveStaticToken({\n          staticToken: params.wrappedToken,\n          sender: params.sender,\n          recipient: params.recipient,\n          amount: params.amount,\n          toUnderlying: true,\n          outputReference: params.outputReference,\n        });\n      case 'BeefyLinear':\n      case 'ERC4626Linear':\n        unwrapType = 'unwrapERC4626';\n        break;\n      case 'EulerLinear':\n        unwrapType = 'unwrapEuler';\n        break;\n      case 'GearboxLinear':\n        unwrapType = 'unwrapGearbox';\n        break;\n      case 'ReaperLinear':\n        unwrapType = 'unwrapReaperVaultToken';\n        break;\n      case 'TetuLinear':\n        unwrapType = 'unwrapTetu';\n        break;\n      case 'YearnLinear':\n        unwrapType = 'unwrapYearn';\n        break;\n      case 'MidasLinear':\n        unwrapType = 'unwrapCompoundV2';\n        break;\n      case 'SiloLinear':\n        unwrapType = 'unwrapShareToken';\n        break;\n      default:\n        throw new Error(\n          'Unwrapping not supported for this pool type: ' + linearPoolType\n        );\n    }\n\n    return relayerLibrary.encodeFunctionData(unwrapType, [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  static encodePeekChainedReferenceValue(reference: BigNumberish): string {\n    return relayerLibrary.encodeFunctionData('peekChainedReferenceValue', [\n      reference,\n    ]);\n  }\n\n  static toChainedReference(key: BigNumberish, isTemporary = true): BigNumber {\n    const prefix = isTemporary\n      ? Relayer.CHAINED_REFERENCE_TEMP_PREFIX\n      : Relayer.CHAINED_REFERENCE_READONLY_PREFIX;\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${prefix}${'0'.repeat(64 - prefix.length)}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  static fromChainedReference(ref: string, isTemporary = true): BigNumber {\n    const prefix = isTemporary\n      ? Relayer.CHAINED_REFERENCE_TEMP_PREFIX\n      : Relayer.CHAINED_REFERENCE_READONLY_PREFIX;\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${prefix}${'0'.repeat(64 - prefix.length)}`;\n    return BigNumber.from(ref).sub(BigNumber.from(paddedPrefix));\n  }\n\n  /**\n   * Returns true if `amount` is not actually an amount, but rather a chained reference.\n   */\n  static isChainedReference(amount: string): boolean {\n    const amountBn = BigNumber.from(amount);\n    const mask = BigNumber.from(\n      '0xfff0000000000000000000000000000000000000000000000000000000000000'\n    );\n    const readonly =\n      '0xba10000000000000000000000000000000000000000000000000000000000000';\n    const check = amountBn.toBigInt() & mask.toBigInt();\n    return readonly === BigNumber.from(check)._hex.toString();\n  }\n\n  static formatExitPoolInput(params: ExitPoolData): EncodeExitPoolInput {\n    const {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n    } = params;\n\n    const exitPoolRequest: ExitPoolRequest = {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    };\n\n    const exitPoolInput: EncodeExitPoolInput = {\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest,\n    };\n    return exitPoolInput;\n  }\n\n  static formatJoinPoolInput(params: JoinPoolData): EncodeJoinPoolInput {\n    const {\n      assets,\n      maxAmountsIn,\n      userData,\n      fromInternalBalance,\n      poolId,\n      kind,\n      sender,\n      recipient,\n      value,\n      outputReference,\n    } = params;\n\n    const joinPoolRequest: JoinPoolRequest = {\n      assets,\n      maxAmountsIn,\n      userData,\n      fromInternalBalance,\n    };\n\n    const joinPoolInput: EncodeJoinPoolInput = {\n      poolId,\n      kind,\n      sender,\n      recipient,\n      value,\n      outputReference,\n      joinPoolRequest,\n    };\n\n    return joinPoolInput;\n  }\n\n  static signRelayerApproval = async (\n    relayerAddress: string,\n    signerAddress: string,\n    signer: JsonRpcSigner,\n    vault: Vault\n  ): Promise<string> => {\n    const approval = vault.interface.encodeFunctionData('setRelayerApproval', [\n      signerAddress,\n      relayerAddress,\n      true,\n    ]);\n\n    const signature =\n      await RelayerAuthorization.signSetRelayerApprovalAuthorization(\n        vault,\n        signer,\n        relayerAddress,\n        approval\n      );\n\n    const calldata = RelayerAuthorization.encodeCalldataAuthorization(\n      '0x',\n      MaxUint256,\n      signature\n    );\n\n    return calldata;\n  };\n}\n","import { BalancerSdkConfig } from '@/types';\nimport { GraphQLClient } from 'graphql-request';\nimport { getNetworkConfig } from '../sdk.helpers';\nimport { getSdk } from './generated/balancer-subgraph-types';\nimport { SubgraphClient } from './subgraph';\n\nexport class Subgraph {\n  public readonly url: string;\n  public readonly client: SubgraphClient;\n\n  constructor(config: BalancerSdkConfig) {\n    this.url = getNetworkConfig(config).urls.subgraph;\n    this.client = this.initClient();\n  }\n\n  private initClient(): SubgraphClient {\n    const client = new GraphQLClient(this.url);\n    return getSdk(client);\n  }\n}\n","import { Swaps } from '@/modules/swaps/swaps.module';\nimport { BalancerSdkConfig } from '@/types';\nimport {\n  SubgraphPoolBase,\n  ZERO,\n  parseToPoolsDict,\n  getSpotPriceAfterSwapForPath,\n} from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nexport class Pricing {\n  private readonly swaps: Swaps;\n\n  constructor(config: BalancerSdkConfig, swaps?: Swaps) {\n    if (swaps) {\n      this.swaps = swaps;\n    } else {\n      this.swaps = new Swaps(config);\n    }\n  }\n\n  /**\n   * Retrieves pools using poolDataService.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.swaps.fetchPools();\n  }\n\n  /**\n   * Get currently saved pools list (fetched using fetchPools()).\n   * @returns {SubgraphPoolBase[]} pools list.\n   */\n  public getPools(): SubgraphPoolBase[] {\n    return this.swaps.getPools();\n  }\n\n  /**\n   * Calculates Spot Price for a token pair - finds most liquid path and uses this as reference SP.\n   * @param { string } tokenIn Token in address.\n   * @param { string } tokenOut Token out address.\n   * @param { SubgraphPoolBase[] } pools Optional - Pool data. Will be fetched via dataProvider if not supplied.\n   * @returns  { string } Spot price.\n   */\n  async getSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pools: SubgraphPoolBase[] = []\n  ): Promise<string> {\n    // If pools list isn't supplied fetch it from swaps data provider\n    if (pools.length === 0) {\n      await this.fetchPools();\n      pools = this.getPools();\n    }\n\n    // We find the path for the pair with the highest liquidity and use this as the ref SP\n    const poolsDict = parseToPoolsDict(pools, 0);\n    // This creates all paths for tokenIn>Out ordered by liquidity\n    const paths = this.swaps.sor.routeProposer.getCandidatePathsFromDict(\n      tokenIn,\n      tokenOut,\n      0,\n      poolsDict,\n      4\n    );\n\n    if (paths.length === 0)\n      throw new BalancerError(BalancerErrorCode.UNSUPPORTED_PAIR);\n    return getSpotPriceAfterSwapForPath(paths[0], 0, ZERO).toString();\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { Signer } from '@ethersproject/abstract-signer';\n\nconst abi = [\n  'function getPoolId() view returns (bytes32)',\n  'function getSwapFeePercentage() view returns (uint256)',\n  'function getProtocolFeesCollector() view returns (address)',\n  'function inRecoveryMode() view returns (bool)',\n];\n\nexport const BasePool = (\n  address: string,\n  signerOrProvider: Signer | Provider\n): Contract => new Contract(address, abi, signerOrProvider);\n","import { set } from 'lodash';\nimport { Fragment, JsonFragment, Interface, Result } from '@ethersproject/abi';\nimport { CallOverrides } from '@ethersproject/contracts';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { Multicall } from '@/contracts';\n\nexport class Multicaller {\n  private interface: Interface;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private calls: [string, string, any][] = [];\n  private paths: string[] = [];\n\n  constructor(\n    private multicall: Multicall,\n    abi: string | Array<Fragment | JsonFragment | string>,\n    private options: CallOverrides = {}\n  ) {\n    this.interface = new Interface(abi);\n  }\n\n  call(\n    path: string,\n    address: string,\n    functionName: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params?: any[]\n  ): Multicaller {\n    this.calls.push([address, functionName, params]);\n    this.paths.push(path);\n    return this;\n  }\n\n  async execute(\n    from: Record<string, unknown> = {}\n  ): Promise<Record<string, unknown>> {\n    const obj = from;\n    const results = await this.executeMulticall();\n    results.forEach((result, i) =>\n      set(obj, this.paths[i], result.length > 1 ? result : result[0])\n    );\n    this.calls = [];\n    this.paths = [];\n    return obj;\n  }\n\n  private async executeMulticall(): Promise<Result[]> {\n    const [, res] = await this.multicall.callStatic.aggregate(\n      this.calls.map(([address, functionName, params]) => ({\n        target: address,\n        callData: this.interface.encodeFunctionData(functionName, params),\n      })),\n      this.options\n    );\n\n    return res.map((result: BytesLike, i: number) =>\n      this.interface.decodeFunctionResult(this.calls[i][1], result)\n    );\n  }\n}\n","export const oneSecondInMs = 1000;\nexport const twentyFourHoursInSecs = 24 * 60 * 60;\n\nexport function toJsTimestamp(unixTimestamp: number): number {\n  return unixTimestamp * oneSecondInMs;\n}\n\nexport function toUnixTimestamp(jsTimestamp: number): number {\n  return Math.round(jsTimestamp / oneSecondInMs);\n}\n\nexport function isLessThan24Hours(incomingDateInSec: number): boolean {\n  const now = Math.round(Date.now() / 1000);\n  const difference = now - incomingDateInSec;\n\n  return difference < twentyFourHoursInSecs;\n}\n","import { JsonFragment } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall, VeBal__factory } from '@/contracts';\nimport { Multicaller } from '@/lib/utils/multiCaller';\nimport { toJsTimestamp } from '@/lib/utils/time';\n\nexport type VeBalLockInfo = {\n  lockedEndDate: number;\n  lockedAmount: string;\n  totalSupply: string;\n  epoch: string;\n  hasExistingLock: boolean;\n  isExpired: boolean;\n};\n\ntype VeBalLockInfoResult = {\n  locked: BigNumber[];\n  epoch: BigNumber;\n  totalSupply: BigNumber;\n};\n\nexport class VeBal {\n  constructor(private veBalAddress: string, private multicall: Multicall) {}\n\n  public async getLockInfo(\n    account: string\n  ): Promise<VeBalLockInfo | undefined> {\n    if (!this.veBalAddress) throw new Error('veBal address must be defined');\n\n    const multicaller = new Multicaller(this.multicall, [\n      ...(VeBal__factory.abi as readonly JsonFragment[]),\n    ]);\n\n    multicaller.call('locked', this.veBalAddress, 'locked', [account]);\n    multicaller.call('epoch', this.veBalAddress, 'epoch');\n    multicaller.call('totalSupply', this.veBalAddress, 'totalSupply()');\n\n    const result = <VeBalLockInfoResult>await multicaller.execute();\n\n    return this.formatLockInfo(result);\n  }\n\n  public formatLockInfo(lockInfo: VeBalLockInfoResult): VeBalLockInfo {\n    const [lockedAmount, lockedEndDate] = lockInfo.locked;\n\n    const hasExistingLock = lockedAmount.gt(0);\n    const lockedEndDateNormalised = toJsTimestamp(lockedEndDate.toNumber());\n    const isExpired = hasExistingLock && Date.now() > lockedEndDateNormalised;\n\n    return {\n      lockedEndDate: lockedEndDateNormalised,\n      lockedAmount: formatUnits(lockedAmount),\n      totalSupply: formatUnits(lockInfo.totalSupply),\n      epoch: formatUnits(lockInfo.epoch, 0),\n      hasExistingLock,\n      isExpired,\n    };\n  }\n}\n","import { Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { formatUnits } from '@ethersproject/units';\n\nimport { VeDelegationProxy__factory } from '@/contracts';\nimport { ContractAddresses } from '@/types';\n\nexport class VeBalProxy {\n  instance: Contract;\n\n  constructor(addresses: ContractAddresses, provider: Provider) {\n    if (!addresses.veBalProxy)\n      throw new Error('veBalProxy address must be defined');\n    this.instance = VeDelegationProxy__factory.connect(\n      addresses.veBalProxy,\n      provider\n    );\n  }\n\n  async getAdjustedBalance(account: string): Promise<string> {\n    const balance = await this.instance.adjustedBalanceOf(account);\n    return formatUnits(balance);\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { Signer } from '@ethersproject/abstract-signer';\n\nimport { BasePool } from './implementations/base-pool';\nimport { VeBal } from './implementations/veBAL';\nimport { VeBalProxy } from './implementations/veBAL-proxy';\nimport {\n  AaveLinearPoolFactory,\n  AaveLinearPoolFactory__factory,\n  BalancerHelpers,\n  BalancerHelpers__factory,\n  BalancerRelayer__factory,\n  ComposableStablePoolFactory,\n  ComposableStablePoolFactory__factory,\n  ERC20,\n  ERC20__factory,\n  ERC4626LinearPoolFactory,\n  ERC4626LinearPoolFactory__factory,\n  EulerLinearPoolFactory,\n  EulerLinearPoolFactory__factory,\n  GaugeClaimHelper,\n  GaugeClaimHelper__factory,\n  GearboxLinearPoolFactory,\n  GearboxLinearPoolFactory__factory,\n  GyroConfig,\n  GyroConfig__factory,\n  LidoRelayer,\n  LidoRelayer__factory,\n  LiquidityGaugeV5__factory,\n  Multicall,\n  Multicall__factory,\n  Vault,\n  Vault__factory,\n  WeightedPoolFactory,\n  WeightedPoolFactory__factory,\n  YearnLinearPoolFactory,\n  YearnLinearPoolFactory__factory,\n} from '@/contracts';\nimport { Network } from '@/lib/constants/network';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { ContractAddresses } from '@/types';\n\ntype ContractFactory = (\n  address: string,\n  signerOrProvider: Signer | Provider\n) => Contract;\n\nexport interface ContractInstances {\n  aaveLinearPoolFactory?: AaveLinearPoolFactory;\n  balancerHelpers: BalancerHelpers;\n  BasePool: ContractFactory;\n  composableStablePoolFactory?: ComposableStablePoolFactory;\n  ERC20: ContractFactory;\n  erc4626LinearPoolFactory?: ERC4626LinearPoolFactory;\n  eulerLinearPoolFactory?: EulerLinearPoolFactory;\n  gaugeClaimHelper?: GaugeClaimHelper;\n  gearboxLinearPoolFactory?: GearboxLinearPoolFactory;\n  gyroConfig?: GyroConfig;\n  lidoRelayer?: LidoRelayer;\n  liquidityGauge: ContractFactory;\n  multicall: Multicall;\n  relayer: Contract;\n  vault: Vault;\n  veBal?: VeBal;\n  veBalProxy?: VeBalProxy;\n  weightedPoolFactory?: WeightedPoolFactory;\n  yearnLinearPoolFactory?: YearnLinearPoolFactory;\n}\n\nexport class Contracts {\n  contractAddresses: ContractAddresses;\n  private instances: ContractInstances;\n\n  /**\n   * Create instances of Balancer contracts connected to passed provider.\n   * @param { Network | ContractAddresses } networkOrAddresses\n   * @param { Provider } provider\n   */\n  constructor(\n    networkOrAddresses: Network | ContractAddresses,\n    provider: Provider\n  ) {\n    // Access addresses using passed network if available\n    if (typeof networkOrAddresses === 'number') {\n      this.contractAddresses =\n        BALANCER_NETWORK_CONFIG[networkOrAddresses].addresses.contracts;\n    } else {\n      this.contractAddresses = networkOrAddresses;\n    }\n\n    const vault: Vault = Vault__factory.connect(\n      this.contractAddresses.vault,\n      provider\n    );\n    const balancerHelpers: BalancerHelpers = BalancerHelpers__factory.connect(\n      this.contractAddresses.balancerHelpers,\n      provider\n    );\n    let lidoRelayer: undefined | LidoRelayer;\n    if (this.contractAddresses.lidoRelayer)\n      lidoRelayer = LidoRelayer__factory.connect(\n        this.contractAddresses.lidoRelayer,\n        provider\n      );\n\n    const multicall: Multicall = Multicall__factory.connect(\n      this.contractAddresses.multicall,\n      provider\n    );\n    const relayer = BalancerRelayer__factory.connect(\n      this.contractAddresses.balancerRelayer,\n      provider\n    );\n    let veBal: undefined | VeBal;\n    if (this.contractAddresses.veBal) {\n      veBal = new VeBal(this.contractAddresses.veBal, multicall);\n    }\n    let veBalProxy: undefined | VeBalProxy;\n    if (this.contractAddresses.veBalProxy) {\n      veBalProxy = new VeBalProxy(this.contractAddresses, provider);\n    }\n    let gaugeClaimHelper: undefined | GaugeClaimHelper;\n    if (this.contractAddresses.gaugeClaimHelper)\n      gaugeClaimHelper = GaugeClaimHelper__factory.connect(\n        this.contractAddresses.gaugeClaimHelper,\n        provider\n      );\n    let composableStablePoolFactory: undefined | ComposableStablePoolFactory;\n    if (this.contractAddresses.composableStablePoolFactory) {\n      composableStablePoolFactory =\n        ComposableStablePoolFactory__factory.connect(\n          this.contractAddresses.composableStablePoolFactory,\n          provider\n        );\n    }\n    let weightedPoolFactory: undefined | WeightedPoolFactory;\n    if (this.contractAddresses.weightedPoolFactory) {\n      weightedPoolFactory = WeightedPoolFactory__factory.connect(\n        this.contractAddresses.weightedPoolFactory,\n        provider\n      );\n    }\n    let aaveLinearPoolFactory: undefined | AaveLinearPoolFactory;\n    if (this.contractAddresses.aaveLinearPoolFactory) {\n      aaveLinearPoolFactory = AaveLinearPoolFactory__factory.connect(\n        this.contractAddresses.aaveLinearPoolFactory,\n        provider\n      );\n    }\n    let erc4626LinearPoolFactory: undefined | ERC4626LinearPoolFactory;\n    if (this.contractAddresses.erc4626LinearPoolFactory) {\n      erc4626LinearPoolFactory = ERC4626LinearPoolFactory__factory.connect(\n        this.contractAddresses.erc4626LinearPoolFactory,\n        provider\n      );\n    }\n    let eulerLinearPoolFactory: undefined | EulerLinearPoolFactory;\n    if (this.contractAddresses.eulerLinearPoolFactory) {\n      eulerLinearPoolFactory = EulerLinearPoolFactory__factory.connect(\n        this.contractAddresses.eulerLinearPoolFactory,\n        provider\n      );\n    }\n    let gearboxLinearPoolFactory: undefined | GearboxLinearPoolFactory;\n    if (this.contractAddresses.gearboxLinearPoolFactory) {\n      gearboxLinearPoolFactory = GearboxLinearPoolFactory__factory.connect(\n        this.contractAddresses.gearboxLinearPoolFactory,\n        provider\n      );\n    }\n    let yearnLinearPoolFactory: undefined | YearnLinearPoolFactory;\n    if (this.contractAddresses.yearnLinearPoolFactory) {\n      yearnLinearPoolFactory = YearnLinearPoolFactory__factory.connect(\n        this.contractAddresses.yearnLinearPoolFactory,\n        provider\n      );\n    }\n    let gyroConfig: undefined | GyroConfig;\n    if (this.contractAddresses.gyroConfigProxy) {\n      gyroConfig = GyroConfig__factory.connect(\n        this.contractAddresses.gyroConfigProxy,\n        provider\n      );\n    }\n\n    this.instances = {\n      aaveLinearPoolFactory,\n      balancerHelpers,\n      BasePool: this.getBasePool,\n      composableStablePoolFactory,\n      ERC20: this.getErc20,\n      erc4626LinearPoolFactory,\n      eulerLinearPoolFactory,\n      gaugeClaimHelper,\n      gearboxLinearPoolFactory,\n      gyroConfig,\n      liquidityGauge: this.getLiquidityGauge,\n      lidoRelayer,\n      multicall,\n      relayer,\n      veBal,\n      veBalProxy,\n      weightedPoolFactory,\n      yearnLinearPoolFactory,\n      vault,\n    };\n  }\n\n  /**\n   * Expose contract instances.\n   */\n  get contracts(): ContractInstances {\n    return this.instances;\n  }\n\n  /**\n   * Helper to create ERC20 contract.\n   * @param { string } address ERC20 address.\n   * @param { Signer | Provider } signerOrProvider Signer or Provider.\n   * @returns Contract.\n   */\n  getErc20(address: string, signerOrProvider: Signer | Provider): ERC20 {\n    return ERC20__factory.connect(address, signerOrProvider);\n  }\n\n  /**\n   * Helper to create base pool contract.\n   * @param { string } address pool address.\n   * @param { Signer | Provider } signerOrProvider Signer or Provider.\n   * @returns Contract.\n   */\n  getBasePool(address: string, signerOrProvider: Signer | Provider): Contract {\n    return BasePool(address, signerOrProvider);\n  }\n\n  /**\n   * Helper to create LiquidityGauge contract.\n   * @param { string } address Gauge address.\n   * @param { Signer | Provider} signerOrProvider Signer or Provider.\n   * @returns Contract.\n   */\n  getLiquidityGauge = LiquidityGaugeV5__factory.connect;\n}\n","/**\n * Calculate the Impermanent Loss for a given pool and user.\n *\n * 1. Prepare the data:\n *  a. get exit price for pools' tokens\n *  b. get entry price for pools' tokens\n * 2. calculate delta values for tokens in pools\n * 3. calculate and return the impermanent loss as percentage rounded to 2 decimal places.\n *\n */\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Findable, Pool, PoolToken, Price } from '@/types';\nimport { Logger } from '@/lib/utils/logger';\n\ntype Asset = {\n  priceDelta: number;\n  weight: number;\n};\n\ntype TokenPrices = {\n  [key: string]: number;\n};\n\nexport class ImpermanentLossService {\n  constructor(\n    private tokenPrices: Findable<Price>,\n    private tokenHistoricalPrices: Findable<Price>\n  ) {}\n\n  /**\n   * entry point to calculate impermanent loss.\n   *\n   * The function will\n   *  - retrieve the tokens' historical value at the desired time in the future\n   *  - calculate the relative variation between current and historical value\n   *  - return the IL in percentage rounded to 2 decimal places\n   *\n   * @param timestamp UNIX timestamp from which the IL is desired\n   * @param pool the pool\n   * @returns the impermanent loss as percentage rounded to 2 decimal places\n   */\n  async calcImpLoss(timestamp: number, pool: Pool): Promise<number> {\n    if (timestamp * 1000 >= Date.now()) {\n      console.error(\n        `[ImpermanentLossService][calcImpLoss]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.TIMESTAMP_IN_THE_FUTURE\n        )}`\n      );\n      throw new BalancerError(BalancerErrorCode.TIMESTAMP_IN_THE_FUTURE);\n    }\n    const assets = await this.prepareData(timestamp, pool);\n\n    const poolValueDelta = this.getPoolValueDelta(assets);\n    const holdValueDelta = this.getHoldValueDelta(assets);\n\n    const impLoss = this.calculateImpermanentLoss(\n      poolValueDelta,\n      holdValueDelta\n    );\n    return impLoss;\n  }\n\n  calculateImpermanentLoss(\n    poolValueDelta: number,\n    holdValueDelta: number\n  ): number {\n    return (\n      Math.floor(Math.abs(poolValueDelta / holdValueDelta - 1) * 100 * 100) /\n      100\n    );\n  }\n\n  getPoolValueDelta(assets: Asset[]): number {\n    return assets.reduce(\n      (result, asset) =>\n        result * Math.pow(Math.abs(asset.priceDelta + 1), asset.weight),\n      1\n    );\n  }\n\n  getHoldValueDelta(assets: Asset[]): number {\n    return assets.reduce(\n      (result, asset) => result + Math.abs(asset.priceDelta + 1) * asset.weight,\n      0\n    );\n  }\n\n  /**\n   * prepare the data for calculating the impermanent loss\n   *\n   * @param entryTimestamp UNIX timestamp from which the IL is desired\n   * @param pool the pool\n   * @returns a list of pair weight/price delta for each token in the pool\n   * @throws BalancerError if\n   *  1. a token's price is unknown\n   *  2. a token's weight is unknown\n   *  3. the user has no liquidity invested in the pool\n   */\n  async prepareData(entryTimestamp: number, pool: Pool): Promise<Asset[]> {\n    const poolTokens = pool.tokens.filter(\n      (token) => token.address !== pool.address\n    );\n\n    const weights = this.getWeights(poolTokens);\n\n    const tokenAddresses = poolTokens.map((t) => t.address);\n\n    const entryPrices = await this.getEntryPrices(\n      entryTimestamp,\n      tokenAddresses\n    );\n    const exitPrices: TokenPrices = await this.getExitPrices(poolTokens);\n\n    return this.getAssets(poolTokens, exitPrices, entryPrices, weights);\n  }\n\n  getAssets(\n    poolTokens: PoolToken[],\n    exitPrices: TokenPrices,\n    entryPrices: TokenPrices,\n    weights: number[]\n  ): Asset[] {\n    return poolTokens.map((token, i) => ({\n      priceDelta: this.getDelta(\n        entryPrices[token.address],\n        exitPrices[token.address]\n      ),\n      weight: weights[i],\n    }));\n  }\n\n  getDelta(entryPrice: number, exitPrice: number): number {\n    if (entryPrice === 0) {\n      console.error(\n        `[ImpermanentLossService][getDelta]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.ILLEGAL_PARAMETER\n        )}: entry price is 0`\n      );\n      throw new BalancerError(BalancerErrorCode.ILLEGAL_PARAMETER);\n    }\n    return (exitPrice - entryPrice) / entryPrice;\n  }\n\n  /**\n   * returns the list of token's weights.\n   *\n   * @param poolTokens the pools' tokens\n   * @returns the list of token's weights\n   * @throws BalancerError if a token's weight is missing\n   *\n   */\n  getWeights(poolTokens: PoolToken[]): number[] {\n    const noWeights = poolTokens.every((token) => !token.weight);\n    const uniformWeight = Math.round((1 / poolTokens.length) * 100) / 100;\n    const weights: number[] = noWeights\n      ? poolTokens.map(() => uniformWeight) // if no weight is returned we assume the tokens are balanced uniformly in the pool\n      : poolTokens.map((token) => Number(token.weight ?? 0));\n\n    if (weights.some((w) => w === 0)) {\n      console.error(\n        `[ImpermanentLossService][getWeights]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.MISSING_WEIGHT\n        )}`\n      );\n      throw new BalancerError(BalancerErrorCode.MISSING_WEIGHT);\n    }\n    return weights;\n  }\n\n  /**\n   * get the current's tokens' prices\n   * @param tokens the pools' tokens\n   * @returns a list of tokens with prices\n   */\n  async getExitPrices(tokens: PoolToken[]): Promise<TokenPrices> {\n    const prices = await Promise.all(\n      tokens.map((token) => this.tokenPrices.find(token.address))\n    ).catch(() => []);\n\n    if (!prices.length || prices.some((price) => price?.usd === undefined)) {\n      console.error(\n        `[ImpermanentLossService][getExitPrices]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.MISSING_PRICE_RATE\n        )}`\n      );\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n    }\n\n    const tokensWithPrice = tokens.map((token, i) => ({\n      ...token,\n      price: prices[i],\n    }));\n\n    const tokenPrices: TokenPrices = {};\n    for (const token of tokensWithPrice) {\n      if (token.price?.usd) tokenPrices[token.address] = +token.price.usd; // price.usd is never undefined but JS complains\n    }\n    return tokenPrices;\n  }\n\n  /**\n   * get the tokens' price at a given time\n   *\n   * @param timestamp the Unix timestamp\n   * @param tokenAddresses the tokens' addresses\n   * @returns a map of tokens' price\n   */\n  async getEntryPrices(\n    timestamp: number,\n    tokenAddresses: string[]\n  ): Promise<TokenPrices> {\n    const prices: TokenPrices = {};\n    for (const address of tokenAddresses) {\n      const price = await this.tokenHistoricalPrices\n        .findBy(address, timestamp)\n        .catch((reason) => {\n          const logger = Logger.getInstance();\n          logger.warn(\n            `[ImpermanentLossService][getEntryPrices]Error: ${reason.message}`\n          );\n          return undefined;\n        });\n      if (!price?.usd) {\n        const logger = Logger.getInstance();\n        logger.warn(\n          `[ImpermanentLossService][getEntryPrices]Error: ${BalancerError.getMessage(\n            BalancerErrorCode.MISSING_PRICE_RATE\n          )}`\n        );\n        throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n      }\n      prices[address] = +price.usd;\n    }\n    return prices;\n  }\n}\n","/**\n * Weekly Bal emissions are fixed / year according to:\n * https://docs.google.com/spreadsheets/d/1FY0gi596YWBOTeu_mrxhWcdF74SwKMNhmu0qJVgs0KI/edit#gid=0\n *\n * Using regular numbers for simplicity assuming frontend use only.\n *\n * Calculation source\n * https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/BalancerTokenAdmin.sol\n */\n\nexport const INITIAL_RATE = 145000;\nexport const START_EPOCH_TIME = 1648465251;\nconst RATE_REDUCTION_TIME = 365 * 86400;\nconst RATE_REDUCTION_COEFFICIENT = 2 ** (1 / 4);\n\n/**\n * Weekly BAL emissions\n *\n * @param currentTimestamp used to get the epoch\n * @returns BAL emitted in a week\n */\nexport const weekly = (\n  currentTimestamp: number = Math.round(new Date().getTime() / 1000)\n): number => {\n  const miningEpoch = Math.floor(\n    (currentTimestamp - START_EPOCH_TIME) / RATE_REDUCTION_TIME\n  );\n\n  const rate = INITIAL_RATE * RATE_REDUCTION_COEFFICIENT ** -miningEpoch;\n\n  return rate;\n};\n\n/**\n * Total BAL emitted in epoch (1 year)\n *\n * @param epoch starting from 0 for the first year of emissions\n * @returns BAL emitted in epoch\n */\nexport const total = (epoch: number): number => {\n  const weeklyRate = INITIAL_RATE * RATE_REDUCTION_COEFFICIENT ** -epoch;\n  const dailyRate = weeklyRate / 7;\n\n  return dailyRate * 365;\n};\n\n/**\n * Total BAL emitted between two timestamps\n *\n * @param start starting timestamp\n * @param end ending timestamp\n * @returns BAL emitted in period\n */\nexport const between = (start: number, end: number): number => {\n  if (start < START_EPOCH_TIME) {\n    throw 'start timestamp before emission schedule deployment';\n  }\n  if (end < start) {\n    throw 'cannot finish before starting';\n  }\n\n  let totalEmissions = 0;\n\n  const startingEpoch = Math.floor(\n    (start - START_EPOCH_TIME) / RATE_REDUCTION_TIME\n  );\n  const endingEpoch = Math.floor(\n    (end - START_EPOCH_TIME) / RATE_REDUCTION_TIME\n  );\n\n  for (\n    let currentEpoch = startingEpoch;\n    currentEpoch <= endingEpoch;\n    currentEpoch++\n  ) {\n    totalEmissions += total(currentEpoch);\n  }\n\n  // Subtract what isn't emmited within the time range\n  const startingEpochEnd =\n    START_EPOCH_TIME + RATE_REDUCTION_TIME * (startingEpoch + 1);\n  const endingEpochStart = START_EPOCH_TIME + RATE_REDUCTION_TIME * endingEpoch;\n\n  const secondsInStartingEpoch = startingEpochEnd - start;\n  const secondsInEndingEpoch = end - endingEpochStart;\n\n  totalEmissions -=\n    (total(startingEpoch) * (RATE_REDUCTION_TIME - secondsInStartingEpoch)) /\n    RATE_REDUCTION_TIME;\n  totalEmissions -=\n    (total(endingEpoch) * (RATE_REDUCTION_TIME - secondsInEndingEpoch)) /\n    RATE_REDUCTION_TIME;\n\n  return totalEmissions;\n};\n","import { Findable, Price } from '@/types';\nimport { BaseFeeDistributor } from '@/modules/data';\n\nexport interface ProtocolRevenueData {\n  lastWeekBalRevenue: number;\n  lastWeekBBAUsdRevenue: number;\n  veBalSupply: number;\n}\n\nexport class ProtocolRevenue {\n  constructor(\n    private repository: BaseFeeDistributor,\n    private tokenPrices: Findable<Price>\n  ) {}\n\n  async data(now = Date.now()): Promise<ProtocolRevenueData> {\n    const data = await this.repository.multicallData(now);\n    const balPrice = await this.tokenPrices.find(data.balAddress);\n\n    if (!balPrice || !balPrice.usd) {\n      throw `No BAL USD price found`;\n    }\n\n    return {\n      lastWeekBalRevenue: data.balAmount * parseFloat(balPrice.usd),\n      lastWeekBBAUsdRevenue: data.bbAUsdAmount * data.bbAUsdPrice,\n      veBalSupply: data.veBalSupply,\n    };\n  }\n}\n","/**\n * Calculates pool fees\n *\n * 1. Pool fees in last 24hrs\n */\nimport { isLessThan24Hours } from '@/lib/utils/time';\nimport { Pool, Findable, PoolAttribute } from '@/types';\n\nexport class PoolFees {\n  constructor(\n    private yesterdaysPools: Findable<Pool, PoolAttribute> | undefined\n  ) {}\n\n  // 🚨 this is adding 1 call to get yesterday's block height and 2nd call to fetch yesterday's pools data from subgraph\n  // TODO: find a better data source for that eg. add blocks to graph, replace with a database, or dune\n  async last24h(pool: Pool): Promise<number> {\n    let yesterdaysPool;\n    if (this.yesterdaysPools) {\n      yesterdaysPool = await this.yesterdaysPools.find(pool.id);\n    }\n    if (!pool.totalSwapFee) {\n      return 0;\n    }\n\n    if (!yesterdaysPool?.totalSwapFee) {\n      // Process edge case when pool creation time is less that 24h\n      if (pool.createTime && isLessThan24Hours(pool.createTime)) {\n        return parseFloat(pool.totalSwapFee);\n      }\n      return 0;\n    }\n\n    return (\n      parseFloat(pool.totalSwapFee) - parseFloat(yesterdaysPool.totalSwapFee)\n    );\n  }\n}\n","import { formatUnits } from '@ethersproject/units';\nimport * as emissions from '@/modules/data/bal/emissions';\nimport type {\n  Findable,\n  Pool,\n  PoolAttribute,\n  Price,\n  Token,\n  TokenAttribute,\n  LiquidityGauge,\n  Network,\n  PoolToken,\n} from '@/types';\nimport { BaseFeeDistributor } from '@/modules/data';\nimport { ProtocolRevenue } from './protocol-revenue';\nimport { Liquidity } from '@/modules/liquidity/liquidity.module';\nimport { identity, zipObject, pickBy } from 'lodash';\nimport { PoolFees } from '../fees/fees';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Logger } from '@/lib/utils/logger';\nimport { GyroConfigRepository } from '@/modules/data/gyro-config/repository';\nimport { POOLS_TO_IGNORE } from '@/lib/constants/poolsToIgnore';\n\nexport interface AprBreakdown {\n  swapFees: number;\n  tokenAprs: {\n    total: number;\n    breakdown: { [address: string]: number };\n  };\n  stakingApr: {\n    min: number;\n    max: number;\n  };\n  rewardAprs: {\n    total: number;\n    breakdown: { [address: string]: number };\n  };\n  protocolApr: number;\n  min: number;\n  max: number;\n}\n\n/**\n * Calculates pool APR via summing up sources of APR:\n *\n * 1. Swap fees (pool level) data coming from subgraph\n * 2. Yield bearing pool tokens, with data from external sources eg: http endpoints, subgraph, onchain\n *    * stETH\n *    * aave\n *    * usd+\n *    map token: calculatorFn\n * 3. Staking rewards based from veBal gauges\n */\nexport class PoolApr {\n  constructor(\n    private pools: Findable<Pool, PoolAttribute>,\n    private tokenPrices: Findable<Price>,\n    private tokenMeta: Findable<Token, TokenAttribute>,\n    private tokenYields: Findable<number>,\n    private feeCollector: Findable<number>,\n    private yesterdaysPools?: Findable<Pool, PoolAttribute>,\n    private liquidityGauges?: Findable<LiquidityGauge>,\n    private feeDistributor?: BaseFeeDistributor,\n    private gyroConfigRepository?: GyroConfigRepository\n  ) {}\n\n  /**\n   * Pool revenue via swap fees.\n   * Fees and liquidity are takes from subgraph as USD floats.\n   *\n   * @returns APR [bsp] from fees accumulated over last 24h\n   */\n  async swapFees(pool: Pool): Promise<number> {\n    // 365 * dailyFees * (1 - protocolFees) / totalLiquidity\n    const last24hFees = await this.last24hFees(pool);\n    const totalLiquidity = await this.totalLiquidity(pool);\n    // TODO: what to do when we are missing last24hFees or totalLiquidity?\n    // eg: stable phantom returns 0\n    if (!last24hFees || !totalLiquidity) {\n      return 0;\n    }\n    const dailyFees =\n      last24hFees * (1 - (await this.protocolSwapFeePercentage(pool)));\n    const feesDailyBsp = 10000 * (dailyFees / parseFloat(totalLiquidity));\n\n    return Math.round(365 * feesDailyBsp);\n  }\n\n  /**\n   * Pool revenue from holding yield-bearing wrapped tokens.\n   *\n   * @returns APR [bsp] from tokens contained in the pool\n   */\n  async tokenAprs(pool: Pool): Promise<AprBreakdown['tokenAprs']> {\n    if (!pool.tokens) {\n      return {\n        total: 0,\n        breakdown: {},\n      };\n    }\n\n    const totalLiquidity = await this.totalLiquidity(pool);\n\n    // Filter out BPT: token with the same address as the pool\n    // TODO: move this to data layer\n    const bptFreeTokens = pool.tokens.filter((token) => {\n      return token.address !== pool.address;\n    });\n\n    // Get each token APRs\n    const aprs = await Promise.all(\n      bptFreeTokens.map(async (token) => {\n        let apr = 0;\n        const tokenYield = await this.tokenYields.find(token.address);\n        if (tokenYield) {\n          // metastable pools incorrectly apply the swap fee to the yield earned.\n          // they don't have the concept of a yield fee like the newer pools do.\n          if (\n            pool.poolType === 'MetaStable' ||\n            pool.poolType.includes('Gyro')\n          ) {\n            apr =\n              tokenYield * (1 - (await this.protocolSwapFeePercentage(pool)));\n          } else if (\n            pool.poolType === 'ComposableStable' ||\n            (pool.poolType === 'Weighted' && pool.poolTypeVersion >= 2)\n          ) {\n            if (token.isExemptFromYieldProtocolFee) {\n              apr = tokenYield;\n            } else {\n              apr =\n                tokenYield *\n                (1 - parseFloat(pool.protocolYieldFeeCache || '0.5'));\n            }\n          } else {\n            apr = tokenYield;\n          }\n        } else {\n          // Handle subpool APRs with recursive call to get the subPool APR\n          const subPool = await this.pools.findBy('address', token.address);\n\n          if (subPool) {\n            // INFO: Liquidity mining APR can't cascade to other pools\n            const subSwapFees = await this.swapFees(subPool);\n            const subtokenAprs = await this.tokenAprs(subPool);\n            let subApr = subtokenAprs.total;\n            if (\n              pool.poolType === 'ComposableStable' ||\n              (pool.poolType === 'Weighted' && pool.poolTypeVersion === 2)\n            ) {\n              if (!token.isExemptFromYieldProtocolFee) {\n                subApr =\n                  subApr *\n                  (1 - parseFloat(pool.protocolYieldFeeCache || '0.5'));\n              }\n            }\n            apr = subSwapFees + subApr;\n          }\n        }\n\n        return apr;\n      })\n    );\n\n    // Get token weights normalised by usd price\n    const getWeight = async (token: PoolToken): Promise<number> => {\n      let tokenPrice: string | undefined;\n      if (token.weight) {\n        return parseFloat(token.weight);\n      } else if (token.token?.pool?.poolType) {\n        const poolToken = await this.pools.findBy('address', token.address);\n        if (poolToken) {\n          tokenPrice = (await this.bptPrice(poolToken)).toString();\n        }\n      } else {\n        tokenPrice =\n          token.price?.usd ||\n          (await this.tokenPrices.find(token.address))?.usd ||\n          token.token?.latestUSDPrice;\n      }\n      if (tokenPrice) {\n        // using floats assuming frontend purposes with low precision needs\n        const tokenValue = parseFloat(token.balance) * parseFloat(tokenPrice);\n        return tokenValue / parseFloat(totalLiquidity);\n      } else {\n        throw `No price for ${token.address}`;\n      }\n    };\n\n    // Normalise tokenAPRs according to weights\n    const weightedAprs = await Promise.all(\n      bptFreeTokens.map(async (token, idx) => {\n        if (aprs[idx] === 0) {\n          return 0;\n        }\n\n        // Handle missing token weights, usually due to missing token prices\n        try {\n          const weight = await getWeight(token);\n          return Math.round(aprs[idx] * weight);\n        } catch (e) {\n          const logger = Logger.getInstance();\n          logger.error(e as string);\n          return 0;\n        }\n      })\n    );\n\n    // sum them up to get pool APRs\n    const apr = weightedAprs.reduce((sum, apr) => sum + apr, 0);\n    const breakdown = pickBy<number>(\n      zipObject(\n        bptFreeTokens.map((t) => t.address),\n        weightedAprs\n      ),\n      identity\n    );\n\n    return {\n      total: apr,\n      breakdown,\n    };\n  }\n\n  /**\n   * Calculates staking rewards based on veBal gauges deployed with Curve Finance contracts.\n   * https://curve.readthedocs.io/dao-gauges.html\n   *\n   * Terminology:\n   *  - LP token of a gauge is a BPT of a pool\n   *  - Depositing into a gauge is called staking on the frontend\n   *  - gauge totalSupply - BPT tokens deposited to a gauge\n   *  - gauge workingSupply - effective BPT tokens participating in reward distribution. sum of 40% deposit + 60% boost from individual user's veBal\n   *  - gauge relative weight - weight of this gauge in bal inflation distribution [0..1] scaled to 1e18\n   *\n   * APR sources:\n   *  - gauge BAL emissions = min: 40% of totalSupply, max: 40% of totalSupply + 60% of totalSupply * gauge LPs voting power\n   *    https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeV5.vy#L338\n   *  - gauge reward tokens: Admin or designated depositor has an option to deposit additional reward with a weekly accruing cadence.\n   *    https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeV5.vy#L641\n   *    rate: amount of token per second\n   *\n   * @param pool\n   * @param boost range between 1 and 2.5\n   * @returns APR [bsp] from protocol rewards.\n   */\n  async stakingApr(pool: Pool, boost = 1): Promise<number> {\n    if (!this.liquidityGauges) {\n      return 0;\n    }\n\n    // Data resolving\n    const gauge = await this.liquidityGauges.findBy('poolId', pool.id);\n    if (\n      !gauge ||\n      (pool.chainId == 1313161554 && gauge.workingSupply === 0) ||\n      (pool.chainId != 1313161554 && gauge.totalSupply === 0) ||\n      (pool.chainId != 1313161554 && gauge.balInflationRate === 0)\n    ) {\n      return 0;\n    }\n\n    const bal =\n      BALANCER_NETWORK_CONFIG[pool.chainId as Network].addresses.tokens.bal;\n    if (!bal) {\n      return 0;\n    }\n\n    const [balPrice, bptPriceUsd] = await Promise.all([\n      this.tokenPrices.find(bal), // BAL\n      this.bptPrice(pool),\n    ]);\n\n    if (!balPrice?.usd) {\n      throw 'Missing BAL price';\n    }\n\n    const gaugeSupply = (gauge.workingSupply + 0.4) / 0.4; // Only 40% of LP token staked accrue emissions, totalSupply = workingSupply * 2.5\n    const gaugeSupplyUsd = gaugeSupply * bptPriceUsd;\n\n    // Handle child chain gauges with inflation_rate\n    // balInflationRate - amount of BAL tokens per second as a float\n    if (gauge.balInflationRate) {\n      const reward =\n        gauge.balInflationRate * 86400 * 365 * parseFloat(balPrice.usd);\n      return Math.round((boost * 10000 * reward) / gaugeSupplyUsd);\n    } else if (pool.chainId != 1313161554) {\n      // TODO: remove after all gauges are migrated (around 01-07-2023), Subgraph is returning BAL staking rewards as reward tokens for L2 gauges.\n      if (!gauge.rewardTokens) {\n        return 0;\n      }\n\n      const balReward = bal && gauge.rewardTokens[bal];\n      if (balReward) {\n        let reward: { address: string; value: number };\n        try {\n          reward = await this.rewardTokenApr(bal, balReward);\n          const totalSupplyUsd = gauge.totalSupply * bptPriceUsd;\n          const rewardValue = reward.value / totalSupplyUsd;\n          return Math.round(10000 * rewardValue);\n        } catch (e) {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    }\n\n    // Handle mainnet gauges\n    const balPriceUsd = parseFloat(balPrice.usd);\n    const now = Math.round(new Date().getTime() / 1000);\n    const totalBalEmissions = (emissions.weekly(now) / 7) * 365;\n    const gaugeBalEmissions = totalBalEmissions * gauge.relativeWeight;\n    const gaugeBalEmissionsUsd = gaugeBalEmissions * balPriceUsd;\n    const gaugeBalAprBps = Math.round(\n      (boost * 10000 * gaugeBalEmissionsUsd) / gaugeSupplyUsd\n    );\n\n    return gaugeBalAprBps;\n  }\n\n  /**\n   * Some gauges are holding tokens distributed as rewards to LPs.\n   *\n   * @param pool\n   * @returns APR [bsp] from token rewards.\n   */\n  async rewardAprs(pool: Pool): Promise<AprBreakdown['rewardAprs']> {\n    if (!this.liquidityGauges) {\n      return { total: 0, breakdown: {} };\n    }\n\n    // Data resolving\n    const gauge = await this.liquidityGauges.findBy('poolId', pool.id);\n    if (\n      !gauge ||\n      !gauge.rewardTokens ||\n      Object.keys(gauge.rewardTokens).length < 1\n    ) {\n      return { total: 0, breakdown: {} };\n    }\n\n    // BAL rewards already returned as stakingApr, so we can filter them out\n    const bal =\n      BALANCER_NETWORK_CONFIG[pool.chainId as Network].addresses.tokens.bal;\n    const rewardTokenAddresses = Object.keys(gauge.rewardTokens).filter(\n      (a) => a != bal\n    );\n\n    // Gets each tokens rate, extrapolate to a year and convert to USD\n    const rewards = rewardTokenAddresses.map(async (tAddress) => {\n      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n      const data = gauge!.rewardTokens![tAddress];\n      try {\n        const reward = await this.rewardTokenApr(tAddress, data);\n        return reward;\n      } catch (e) {\n        return { address: tAddress, value: 0 };\n      }\n    });\n\n    // Get the gauge totalSupplyUsd\n    const bptPriceUsd = await this.bptPrice(pool);\n    const totalSupplyUsd = gauge.totalSupply * bptPriceUsd;\n\n    if (totalSupplyUsd == 0) {\n      return { total: 0, breakdown: {} };\n    }\n\n    const rewardTokensBreakdown: Record<string, number> = {};\n\n    let total = 0;\n    for await (const reward of Object.values(rewards)) {\n      const rewardValue = reward.value / totalSupplyUsd;\n      const rewardValueScaled = Math.round(10000 * rewardValue);\n      total += rewardValueScaled;\n      rewardTokensBreakdown[reward.address] = rewardValueScaled;\n    }\n\n    return {\n      total,\n      breakdown: rewardTokensBreakdown,\n    };\n  }\n\n  /**\n   * 80BAL-20WETH pool is accruing protocol revenue.\n   *\n   * @param pool\n   * @returns accrued protocol revenue as APR [bsp]\n   */\n  async protocolApr(pool: Pool): Promise<number> {\n    const veBalPoolId =\n      '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014';\n\n    if (pool.id != veBalPoolId || !this.feeDistributor) {\n      return 0;\n    }\n\n    const revenue = new ProtocolRevenue(this.feeDistributor, this.tokenPrices);\n\n    const { lastWeekBalRevenue, lastWeekBBAUsdRevenue, veBalSupply } =\n      await revenue.data();\n\n    const bptPrice = await this.bptPrice(pool);\n    if (!bptPrice) {\n      throw 'bptPrice for veBal pool missing';\n    }\n\n    const dailyRevenue = (lastWeekBalRevenue + lastWeekBBAUsdRevenue) / 7;\n    const apr = Math.round(\n      (10000 * (365 * dailyRevenue)) / (bptPrice * veBalSupply)\n    );\n\n    return apr;\n  }\n\n  /**\n   * Composes all sources for total pool APR.\n   *\n   * @returns pool APR split [bsp]\n   */\n  async apr(pool: Pool): Promise<AprBreakdown> {\n    if (POOLS_TO_IGNORE.includes(pool.id)) {\n      return {\n        swapFees: 0,\n        tokenAprs: {\n          total: 0,\n          breakdown: {},\n        },\n        stakingApr: {\n          min: 0,\n          max: 0,\n        },\n        rewardAprs: {\n          total: 0,\n          breakdown: {},\n        },\n        protocolApr: 0,\n        min: 0,\n        max: 0,\n      };\n    }\n    const [\n      swapFees,\n      tokenAprs,\n      minStakingApr,\n      maxStakingApr,\n      rewardAprs,\n      protocolApr,\n    ] = await Promise.all([\n      this.swapFees(pool), // pool snapshot for last 24h fees dependency\n      this.tokenAprs(pool),\n      this.stakingApr(pool),\n      this.stakingApr(pool, 2.5),\n      this.rewardAprs(pool),\n      this.protocolApr(pool),\n    ]);\n\n    return {\n      swapFees,\n      tokenAprs,\n      stakingApr: {\n        min: minStakingApr,\n        max: maxStakingApr,\n      },\n      rewardAprs,\n      protocolApr,\n      min: swapFees + tokenAprs.total + rewardAprs.total + minStakingApr,\n      max:\n        swapFees +\n        tokenAprs.total +\n        rewardAprs.total +\n        protocolApr +\n        maxStakingApr,\n    };\n  }\n\n  private async last24hFees(pool: Pool): Promise<number> {\n    const poolFees = new PoolFees(this.yesterdaysPools);\n    return poolFees.last24h(pool);\n  }\n\n  /**\n   * Total Liquidity based on USD token prices taken from external price feed, eg: coingecko.\n   *\n   * @param pool\n   * @returns Pool liquidity in USD\n   */\n  private async totalLiquidity(pool: Pool): Promise<string> {\n    try {\n      const liquidityService = new Liquidity(this.pools, this.tokenPrices);\n      const liquidity = await liquidityService.getLiquidity(pool);\n      return liquidity;\n    } catch (err) {\n      const logger = Logger.getInstance();\n      logger.warn('Liquidity calculcation failed, falling back to subgraph');\n      return pool.totalLiquidity;\n    }\n  }\n\n  /**\n   * BPT price as pool totalLiquidity / pool total Shares\n   * Total Liquidity is calculated based on USD token prices taken from external price feed, eg: coingecko.\n   *\n   * @param pool\n   * @returns BPT price in USD\n   */\n  private async bptPrice(pool: Pool) {\n    return (\n      parseFloat(await this.totalLiquidity(pool)) / parseFloat(pool.totalShares)\n    );\n  }\n\n  private async protocolSwapFeePercentage(pool: Pool) {\n    let fee = 0.5;\n    if (pool.poolType.includes('Gyro') && this.gyroConfigRepository) {\n      fee = await this.gyroConfigRepository.getGyroProtocolFee(pool.address);\n    } else if (pool.protocolSwapFeeCache) {\n      fee = parseFloat(pool.protocolSwapFeeCache);\n    } else {\n      fee = (await this.feeCollector.find('')) || 0.5;\n    }\n    return fee;\n  }\n\n  private async rewardTokenApr(\n    tokenAddress: string,\n    rewardData: { rate: BigNumber; period_finish: BigNumber; decimals?: number }\n  ) {\n    if (rewardData.period_finish.toNumber() < Date.now() / 1000) {\n      return {\n        address: tokenAddress,\n        value: 0,\n      };\n    } else {\n      const yearlyReward = rewardData.rate.mul(86400).mul(365);\n      const price = await this.tokenPrices.find(tokenAddress);\n      if (price && price.usd) {\n        let decimals = 18;\n        if (rewardData.decimals) {\n          decimals = rewardData.decimals;\n        } else {\n          const meta = await this.tokenMeta.find(tokenAddress);\n          decimals = meta?.decimals || 18;\n        }\n        const yearlyRewardUsd =\n          parseFloat(formatUnits(yearlyReward, decimals)) *\n          parseFloat(price.usd);\n        return {\n          address: tokenAddress,\n          value: yearlyRewardUsd,\n        };\n      } else {\n        throw `No USD price for ${tokenAddress}`;\n      }\n    }\n  }\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { _downscaleDown } from '@/lib/utils/solidityMaths';\nimport { Pool, PoolAttribute, PoolType } from '@/types';\n\nimport { Findable } from '../data/types';\nimport { PoolTypeConcerns } from '../pools/pool-type-concerns';\n\ntype SpotPrices = { [tokenIn: string]: string };\n\nconst supportedPoolTypes: string[] = Object.values(PoolType);\nexport interface Node {\n  address: string;\n  id: string;\n  joinAction: JoinAction;\n  exitAction: ExitAction;\n  isProportionalExit: boolean;\n  type: string;\n  children: Node[];\n  marked: boolean;\n  index: string;\n  proportionOfParent: BigNumber;\n  parent: Node | undefined;\n  isLeaf: boolean;\n  spotPrices: SpotPrices;\n  decimals: number;\n  balance: string;\n  priceRate: string;\n}\n\ntype JoinAction = 'input' | 'batchSwap' | 'wrap' | 'joinPool';\nconst joinActions = new Map<PoolType, JoinAction>();\nsupportedPoolTypes.forEach((type) => {\n  if (type.includes('Linear') && supportedPoolTypes.includes(type))\n    joinActions.set(type as PoolType, 'batchSwap');\n});\njoinActions.set(PoolType.Element, 'batchSwap');\njoinActions.set(PoolType.Investment, 'joinPool');\njoinActions.set(PoolType.LiquidityBootstrapping, 'joinPool');\njoinActions.set(PoolType.MetaStable, 'joinPool');\njoinActions.set(PoolType.Stable, 'joinPool');\njoinActions.set(PoolType.StablePhantom, 'batchSwap');\njoinActions.set(PoolType.Weighted, 'joinPool');\njoinActions.set(PoolType.ComposableStable, 'joinPool');\n\ntype ExitAction = 'output' | 'batchSwap' | 'unwrap' | 'exitPool';\nconst exitActions = new Map<PoolType, ExitAction>();\nsupportedPoolTypes.forEach((type) => {\n  if (type.includes('Linear') && supportedPoolTypes.includes(type))\n    exitActions.set(type as PoolType, 'batchSwap');\n});\nexitActions.set(PoolType.Element, 'batchSwap');\nexitActions.set(PoolType.Investment, 'exitPool');\nexitActions.set(PoolType.LiquidityBootstrapping, 'exitPool');\nexitActions.set(PoolType.MetaStable, 'exitPool');\nexitActions.set(PoolType.Stable, 'exitPool');\nexitActions.set(PoolType.StablePhantom, 'batchSwap');\nexitActions.set(PoolType.Weighted, 'exitPool');\nexitActions.set(PoolType.ComposableStable, 'exitPool');\n\nexport class PoolGraph {\n  constructor(private pools: Findable<Pool, PoolAttribute>) {}\n\n  async buildGraphFromRootPool(\n    poolId: string,\n    tokensToUnwrap: string[]\n  ): Promise<Node> {\n    const rootPool = await this.pools.find(poolId);\n    if (!rootPool) throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n    const nodeIndex = 0;\n    const rootNode = await this.buildGraphFromPool(\n      rootPool.address,\n      nodeIndex,\n      undefined,\n      WeiPerEther,\n      tokensToUnwrap\n    );\n    return rootNode[0];\n  }\n\n  getTokenTotal(pool: Pool): BigNumber {\n    const bptIndex = pool.tokensList.indexOf(pool.address);\n    let total = Zero;\n    const { balancesEvm } = parsePoolInfo(pool);\n    balancesEvm.forEach((balance, i) => {\n      // Ignore phantomBpt balance\n      if (bptIndex !== i) {\n        total = total.add(balance);\n      }\n    });\n    return total;\n  }\n\n  async buildGraphFromPool(\n    address: string,\n    nodeIndex: number,\n    parent: Node | undefined,\n    proportionOfParent: BigNumber,\n    tokensToUnwrap: string[]\n  ): Promise<[Node, number]> {\n    const pool = await this.pools.findBy('address', address);\n\n    if (!pool) {\n      if (!parent) {\n        // If pool not found by address and is root pool (without parent), then throw error\n        throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n      } else {\n        // If pool not found by address, but it has parent, assume it's a leaf token and add a leafTokenNode\n        const parentPool = (await this.pools.findBy(\n          'address',\n          parent.address\n        )) as Pool;\n        const tokenIndex = parentPool.tokensList.indexOf(address);\n        const leafTokenDecimals = parentPool.tokens[tokenIndex].decimals ?? 18;\n        const { balancesEvm } = parsePoolInfo(parentPool);\n\n        const nodeInfo = PoolGraph.createInputTokenNode(\n          nodeIndex,\n          address,\n          leafTokenDecimals,\n          parent,\n          proportionOfParent,\n          balancesEvm[tokenIndex].toString()\n        );\n        return nodeInfo;\n      }\n    }\n\n    const joinAction = joinActions.get(pool.poolType);\n    const exitAction = exitActions.get(pool.poolType);\n    if (!joinAction || !exitAction)\n      throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n\n    const tokenTotal = this.getTokenTotal(pool);\n    // Spot price service\n    const { spotPriceCalculator } = PoolTypeConcerns.from(pool.poolType);\n    const spotPrices: SpotPrices = {};\n    let decimals = 18;\n    // Spot price of a path is product of the sp of each pool in path. We calculate the sp for each pool token here to use as required later.\n    pool.tokens.forEach((token) => {\n      if (isSameAddress(token.address, pool.address)) {\n        // Updated node with BPT token decimal\n        decimals = token.decimals ? token.decimals : 18;\n        return;\n      }\n      const sp = spotPriceCalculator.calcPoolSpotPrice(\n        token.address,\n        pool.address,\n        pool\n      );\n      spotPrices[token.address] = sp;\n    });\n\n    let poolNode: Node = {\n      address: pool.address,\n      id: pool.id,\n      type: pool.poolType,\n      joinAction,\n      exitAction,\n      isProportionalExit: false,\n      children: [],\n      marked: false,\n      index: nodeIndex.toString(),\n      parent,\n      proportionOfParent,\n      isLeaf: false,\n      spotPrices,\n      decimals,\n      balance: pool.totalShares,\n      priceRate: WeiPerEther.toString(),\n    };\n    this.updateNodeIfProportionalExit(pool, poolNode);\n    nodeIndex++;\n    if (pool.poolType.toString().includes('Linear')) {\n      [poolNode, nodeIndex] = this.createLinearNodeChildren(\n        poolNode,\n        nodeIndex,\n        pool,\n        tokensToUnwrap\n      );\n    } else {\n      const { balancesEvm } = parsePoolInfo(pool);\n      for (let i = 0; i < pool.tokens.length; i++) {\n        // ignore any phantomBpt tokens\n        if (isSameAddress(pool.tokens[i].address, pool.address)) continue;\n        let proportion: BigNumber;\n        // If the pool is a weighted pool we can use the actual tokenWeight as proportion\n        if (pool.poolType === 'Weighted') {\n          const tokenWeight = pool.tokens[i].weight as string;\n          proportion = parseFixed(tokenWeight, 18);\n        } else {\n          proportion = BigNumber.from(balancesEvm[i])\n            .mul((1e18).toString())\n            .div(tokenTotal);\n        }\n        const finalProportion = proportion\n          .mul(proportionOfParent)\n          .div((1e18).toString());\n        const childNode = await this.buildGraphFromPool(\n          pool.tokens[i].address,\n          nodeIndex,\n          poolNode,\n          finalProportion,\n          tokensToUnwrap\n        );\n        nodeIndex = childNode[1];\n        if (childNode[0]) poolNode.children.push(childNode[0]);\n      }\n    }\n    return [poolNode, nodeIndex];\n  }\n\n  /**\n   * Updates isProportionalExit for Node if the pool supports it\n   * @param pool\n   * @param node\n   */\n  updateNodeIfProportionalExit(pool: Pool, node: Node): void {\n    if (pool.poolType === PoolType.Weighted) node.isProportionalExit = true;\n    else if (\n      pool.poolType === PoolType.ComposableStable &&\n      pool.poolTypeVersion > 2\n    )\n      node.isProportionalExit = true;\n  }\n\n  createLinearNodeChildren(\n    linearPoolNode: Node,\n    nodeIndex: number,\n    linearPool: Pool,\n    tokensToUnwrap: string[]\n  ): [Node, number] {\n    // Main token\n    if (linearPool.mainIndex === undefined)\n      throw new Error('Issue With Linear Pool');\n\n    if (\n      tokensToUnwrap\n        .map((t) => t.toLowerCase())\n        .includes(linearPool.tokensList[linearPool.mainIndex].toLowerCase())\n    ) {\n      // Linear pool will be joined via wrapped token. This will be the child node.\n      const wrappedNodeInfo = this.createWrappedTokenNode(\n        linearPool,\n        nodeIndex,\n        linearPoolNode,\n        linearPoolNode.proportionOfParent\n      );\n      linearPoolNode.children.push(wrappedNodeInfo[0]);\n      return [linearPoolNode, wrappedNodeInfo[1]];\n    } else {\n      const { balancesEvm } = parsePoolInfo(linearPool);\n      const mainTokenDecimals =\n        linearPool.tokens[linearPool.mainIndex].decimals ?? 18;\n\n      const nodeInfo = PoolGraph.createInputTokenNode(\n        nodeIndex,\n        linearPool.tokensList[linearPool.mainIndex],\n        mainTokenDecimals,\n        linearPoolNode,\n        linearPoolNode.proportionOfParent,\n        balancesEvm[linearPool.mainIndex].toString()\n      );\n      linearPoolNode.children.push(nodeInfo[0]);\n      nodeIndex = nodeInfo[1];\n      return [linearPoolNode, nodeIndex];\n    }\n  }\n\n  createWrappedTokenNode(\n    linearPool: Pool,\n    nodeIndex: number,\n    parent: Node | undefined,\n    proportionOfParent: BigNumber\n  ): [Node, number] {\n    if (\n      linearPool.wrappedIndex === undefined ||\n      linearPool.mainIndex === undefined\n    )\n      throw new Error('Issue With Linear Pool');\n\n    const { balancesEvm, upScaledBalances, scalingFactorsRaw, priceRates } =\n      parsePoolInfo(linearPool);\n\n    const wrappedTokenNode: Node = {\n      type: 'WrappedToken',\n      address: linearPool.tokensList[linearPool.wrappedIndex],\n      id: 'N/A',\n      children: [],\n      marked: false,\n      joinAction: 'wrap',\n      exitAction: 'unwrap',\n      isProportionalExit: false,\n      index: nodeIndex.toString(),\n      parent,\n      proportionOfParent,\n      isLeaf: false,\n      spotPrices: {},\n      decimals: 18,\n      balance: balancesEvm[linearPool.wrappedIndex].toString(),\n      priceRate: priceRates[linearPool.wrappedIndex].toString(),\n    };\n    nodeIndex++;\n\n    const mainTokenDecimals =\n      linearPool.tokens[linearPool.mainIndex].decimals ?? 18;\n\n    /**\n     * - upscaledBalances takes price rate into account, which is equivalent to unwrapping tokens\n     * - downscaling with scalingFactorsRaw will downscale the unwrapped balance to the main token decimals\n     */\n    const unwrappedBalance = _downscaleDown(\n      upScaledBalances[linearPool.wrappedIndex],\n      scalingFactorsRaw[linearPool.mainIndex]\n    ).toString();\n\n    const inputNode = PoolGraph.createInputTokenNode(\n      nodeIndex,\n      linearPool.tokensList[linearPool.mainIndex],\n      mainTokenDecimals,\n      wrappedTokenNode,\n      proportionOfParent,\n      unwrappedBalance\n    );\n    wrappedTokenNode.children = [inputNode[0]];\n    nodeIndex = inputNode[1];\n    return [wrappedTokenNode, nodeIndex];\n  }\n\n  static createInputTokenNode(\n    nodeIndex: number,\n    address: string,\n    decimals: number,\n    parent: Node | undefined,\n    proportionOfParent: BigNumber,\n    balance: string\n  ): [Node, number] {\n    return [\n      {\n        address,\n        id: 'N/A',\n        type: 'Input',\n        children: [],\n        marked: false,\n        joinAction: 'input',\n        exitAction: 'output',\n        isProportionalExit: false,\n        index: nodeIndex.toString(), // This will be updated with real amounts in join construction.\n        parent,\n        proportionOfParent,\n        isLeaf: true,\n        spotPrices: {},\n        decimals,\n        balance,\n        priceRate: WeiPerEther.toString(),\n      },\n      nodeIndex + 1,\n    ];\n  }\n\n  static orderByBfs(root: Node): Node[] {\n    // Breadth first traversal of graph\n    const nodes: Node[] = [];\n    const orderedNodes: Node[] = [];\n    root.marked = true;\n    nodes.push(root);\n    while (nodes.length > 0) {\n      const currentNode = nodes.shift(); // removes first\n      if (currentNode) orderedNodes.push(currentNode);\n      currentNode?.children.forEach((c) => {\n        if (!c.marked) {\n          c.marked = true;\n          nodes.push(c);\n        }\n      });\n    }\n    return orderedNodes;\n  }\n\n  // Return a list of leaf token addresses\n  static getLeafAddresses(nodes: Node[]): string[] {\n    return nodes.filter((n) => n.isLeaf).map((n) => n.address);\n  }\n\n  /**\n   * Checks if list of Nodes only contains pools that support proportional exits\n   * @param nodes\n   * @returns\n   */\n  static isProportionalPools(nodes: Node[]): boolean {\n    return nodes.every((node) => {\n      if (node.children.length > 1) return node.isProportionalExit;\n      else return true;\n    });\n  }\n\n  // Get full graph from root pool and return ordered nodes\n  getGraphNodes = async (\n    isJoin: boolean,\n    poolId: string,\n    tokensToUnwrap: string[]\n  ): Promise<Node[]> => {\n    const rootPool = await this.pools.find(poolId);\n    if (!rootPool) throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n\n    const rootNode = await this.buildGraphFromRootPool(poolId, tokensToUnwrap);\n\n    if (rootNode.id !== poolId) throw new Error('Error creating graph nodes');\n\n    if (isJoin) return PoolGraph.orderByBfs(rootNode).reverse();\n    else return PoolGraph.orderByBfs(rootNode);\n  };\n}\n","import { defaultAbiCoder, Result } from '@ethersproject/abi';\n\nexport class WeightedPoolDecoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Decodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param data - encoded data\n   */\n  static joinInit = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256[]'], data);\n\n  /**\n   * Decodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param data - encoded data\n   */\n  static joinExactTokensInForBPTOut = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256[]', 'uint256'], data);\n\n  /**\n   * Decodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param data - encoded data\n   */\n  static joinTokenInForExactBPTOut = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256', 'uint256'], data);\n\n  /**\n   * Decodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param data - encoded data\n   */\n  static joinAllTokensInForExactBPTOut = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256'], data);\n\n  /**\n   * Decodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param data - encoded data\n   */\n  static exitExactBPTInForOneTokenOut = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256', 'uint256'], data);\n\n  /**\n   * Decodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param data - encoded data\n   *\n   */\n  static exitExactBPTInForTokensOut = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256'], data);\n\n  /**\n   * Decodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param data - encoded data\n   */\n  static exitBPTInForExactTokensOut = (data: string): Result =>\n    defaultAbiCoder.decode(['uint256', 'uint256[]', 'uint256'], data);\n}\n","import { parseFixed, BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { Zero } from '@ethersproject/constants';\nimport { bnum } from '@balancer-labs/sor';\n\nimport { PoolDictionary, Pool } from '../poolSource';\nimport { WeightedPoolDecoder } from '@/pool-weighted/decoder';\nimport { WeightedPoolJoinKind } from '@/pool-weighted/encoder';\nimport { isSameAddress } from '@/lib/utils';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { RelayerModel } from '../relayer';\nimport { ActionType } from '../vaultModel.module';\nimport { PoolToken } from '@/types';\n\nexport interface JoinPoolRequest {\n  actionType: ActionType.Join;\n  poolId: string;\n  encodedUserData: string;\n  outputReference: string;\n}\n\nexport class JoinModel {\n  constructor(private relayerModel: RelayerModel) {}\n\n  /**\n   * Finds join kind given encoded user data.\n   * @param encodedUserData\n   * @returns\n   */\n  joinKind(encodedUserData: string): WeightedPoolJoinKind {\n    const decodedUserData = defaultAbiCoder.decode(\n      ['uint256'],\n      encodedUserData\n    );\n    const joinKind = decodedUserData[0] as BigNumber;\n    if (!joinKind) throw new Error('No exit kind.');\n    return joinKind.toNumber() as WeightedPoolJoinKind;\n  }\n\n  /**\n   * Decodes user join data and returns token input amounts\n   * @param encodedUserData\n   * @param joinKind\n   * @returns\n   */\n  decodeJoinData(\n    encodedUserData: string,\n    joinKind: WeightedPoolJoinKind\n  ): string | string[] {\n    // At the moment all pools have same structure so just use WeightedPoolDecoded for all\n    if (joinKind === WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT) {\n      const bptAmountOut =\n        WeightedPoolDecoder.joinAllTokensInForExactBPTOut(encodedUserData);\n      return bptAmountOut.toString();\n    } else if (joinKind === WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\n      const [, amountsIn] =\n        WeightedPoolDecoder.joinExactTokensInForBPTOut(encodedUserData);\n      return amountsIn;\n    } else if (joinKind === WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\n      const [, bptAmountOut, tokenIndex] =\n        WeightedPoolDecoder.joinTokenInForExactBPTOut(encodedUserData);\n      return [bptAmountOut.toString(), tokenIndex];\n    } else throw new Error('Non supported join data');\n  }\n\n  allTokensInForExactBPTOut(): string {\n    throw new Error('joinAllTokensInForExactBPTOut not supported');\n    /*\n          We need maths for _calcAllTokensInGivenExactBptOut\n          From SC:\n          uint256 bptAmountOut = userData.allTokensInForExactBptOut();\n          // Note that there is no maximum amountsIn parameter: this is handled by `IVault.joinPool`.\n    \n          uint256[] memory amountsIn = WeightedMath._calcAllTokensInGivenExactBptOut(balances, bptAmountOut, totalSupply);\n    \n          return (bptAmountOut, amountsIn);\n    \n          const bptAmountOut = this.decodeJoinData(\n          encodedUserData,\n          PoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\n        );\n        */\n  }\n\n  joinExactTokensInForBPTOut(\n    encodedUserData: string,\n    pool: Pool\n  ): [string, string[], string[]] {\n    // This does not include a value for pre-minted BPT\n    const amountsInWithRef = this.decodeJoinData(\n      encodedUserData,\n      WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT\n    ) as string[];\n\n    const amountsIn =\n      this.relayerModel.doChainedRefReplacements(amountsInWithRef);\n    // Calculate amount of BPT out given exact amounts in\n    const bptAmountOut = pool._calcBptOutGivenExactTokensIn(\n      amountsIn.map((a) => BigNumber.from(a))\n    );\n\n    // Updates BPT/totalShares value for pool\n    if (\n      pool.SubgraphType == 'StablePhantom' ||\n      pool.SubgraphType == 'ComposableStable'\n    ) {\n      // Update BPT balance\n      // totalShares will be updated as a side effect within SOR\n      const bptAsPoolToken = pool.tokens.find((t: PoolToken) =>\n        isSameAddress(t.address, pool.address)\n      );\n      if (!bptAsPoolToken)\n        throw new Error('Pool does not contain BPT as a token');\n      const bptBalanceEVM = parseFixed(\n        bptAsPoolToken.balance.toString(),\n        bptAsPoolToken.decimals\n      );\n      // subtract value because joining pool reduces pre-minted BPT being held by the pool\n      pool.updateTokenBalanceForPool(\n        pool.address,\n        bptBalanceEVM.sub(bptAmountOut)\n      );\n    } else {\n      // For pools that do not contain BPT as a token, update totalShares directly\n      pool.updateTokenBalanceForPool(\n        pool.address,\n        pool.totalShares.add(bptAmountOut)\n      );\n    }\n\n    const tokensWithoutBpt = pool.tokens.filter(\n      (t: PoolToken) => !isSameAddress(t.address, pool.address)\n    );\n    // Update each tokens balance\n    amountsIn.forEach((amount, i) => {\n      const balanceEvm = parseFixed(\n        tokensWithoutBpt[i].balance.toString(),\n        tokensWithoutBpt[i].decimals\n      );\n      pool.updateTokenBalanceForPool(\n        tokensWithoutBpt[i].address,\n        balanceEvm.add(amount)\n      );\n    });\n    return [\n      bptAmountOut.toString(),\n      tokensWithoutBpt.map((t: PoolToken) => t.address),\n      amountsIn,\n    ];\n  }\n\n  joinTokenInForExactBPTOut(\n    encodedUserData: string,\n    pool: Pool\n  ): [string, string, string] {\n    const [bptAmountOutWithRef, tokenInIndex] = this.decodeJoinData(\n      encodedUserData,\n      WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT\n    ) as string;\n\n    const bptAmountOut =\n      this.relayerModel.doChainedRefReplacement(bptAmountOutWithRef);\n    // Uses an existing SOR functionality so need to deal with pairData and scaling\n    const pairData = pool.parsePoolPairData(\n      pool.tokensList[Number(tokenInIndex)],\n      pool.address\n    );\n\n    const bptAmountOutHuman = formatFixed(bptAmountOut, 18);\n    // Needs human scale\n    const amountInHuman = pool\n      ._tokenInForExactTokenOut(\n        pairData as never,\n        bnum(bptAmountOutHuman.toString())\n      )\n      .dp(pairData.decimalsIn);\n    const amountInEvm = parseFixed(\n      amountInHuman.toString(),\n      pairData.decimalsIn\n    );\n\n    // Update balances of tokenIn and tokenOut - use EVM scale\n    pool.updateTokenBalanceForPool(\n      pairData.tokenIn,\n      pairData.balanceIn.add(amountInEvm)\n    );\n    // For a join we have to add the extra BPT to the balance as this is equivalent to bptTotalSupply\n    pool.updateTokenBalanceForPool(\n      pairData.tokenOut,\n      pairData.balanceOut.add(bptAmountOut)\n    );\n\n    return [amountInEvm.toString(), pairData.tokenIn, amountInEvm.toString()];\n  }\n\n  /**\n   * Perform the specified exit type.\n   * @param joinPoolRequest\n   * @returns tokens out\n   */\n  async doJoinPool(\n    joinPoolRequest: JoinPoolRequest,\n    pools: PoolDictionary\n  ): Promise<[string[], string[]]> {\n    const pool = pools[joinPoolRequest.poolId];\n    const joinKind = this.joinKind(joinPoolRequest.encodedUserData);\n    let bptOut = '0';\n    let tokens: string[] = [];\n    let amounts: string[] = [];\n    if (joinKind === WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT) {\n      // Returns amount of tokens in - This isn't currently implemented\n      bptOut = this.allTokensInForExactBPTOut();\n    } else if (joinKind === WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\n      // Returns amount of BPT out\n      [bptOut, tokens, amounts] = this.joinExactTokensInForBPTOut(\n        joinPoolRequest.encodedUserData,\n        pool\n      );\n    } else if (joinKind === WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\n      // Returns amount of tokenIn\n      let tokenIn: string, amountIn: string;\n      [bptOut, tokenIn, amountIn] = this.joinTokenInForExactBPTOut(\n        joinPoolRequest.encodedUserData,\n        pool\n      );\n      tokens.push(tokenIn);\n      amounts.push(amountIn);\n    } else throw new Error('Exit type not implemented');\n\n    tokens.push(pool.address);\n    // -ve because coming from Vault\n    amounts.push(Zero.sub(bptOut).toString());\n\n    if (\n      joinPoolRequest.outputReference &&\n      Relayer.isChainedReference(joinPoolRequest.outputReference)\n    ) {\n      this.relayerModel.setChainedReferenceValue(\n        joinPoolRequest.outputReference,\n        bptOut\n      );\n    }\n    return [tokens, amounts];\n  }\n}\n","import { parseFixed, BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { Zero } from '@ethersproject/constants';\nimport { bnum } from '@balancer-labs/sor';\n\nimport { PoolDictionary, Pool } from '../poolSource';\nimport { ComposableStablePoolExitKind } from '@/pool-composable-stable';\nimport { WeightedPoolDecoder } from '@/pool-weighted/decoder';\nimport { WeightedPoolExitKind } from '@/pool-weighted/encoder';\nimport { isSameAddress } from '@/lib/utils';\nimport { RelayerModel } from '../relayer';\nimport { ActionType } from '../vaultModel.module';\nimport { OutputReference } from '@/modules/relayer/types';\nimport { PoolToken } from '@/types';\n\nexport interface ExitPoolRequest {\n  actionType: ActionType.Exit;\n  poolId: string;\n  encodedUserData: string;\n  outputReferences: OutputReference[];\n}\n\nfunction getBalancesForTokens(pool: Pool, tokens: string[]): string[] {\n  const balances: string[] = [];\n  tokens.forEach((t) => {\n    const tokenIndex = pool.tokens.findIndex((pt: PoolToken) =>\n      isSameAddress(pt.address, t)\n    );\n    if (tokenIndex < 0) throw 'Pool does not contain tokenIn';\n    balances.push(\n      parseFixed(\n        pool.tokens[tokenIndex].balance,\n        pool.tokens[tokenIndex].decimals\n      ).toString()\n    );\n  });\n  return balances;\n}\n\nexport class ExitModel {\n  constructor(private relayerModel: RelayerModel) {}\n\n  /**\n   * Finds exit kind given encoded user data and pool type.\n   * @param poolType\n   * @param encodedUserData\n   * @returns\n   */\n  exitKind(poolType: string, encodedUserData: string): WeightedPoolExitKind {\n    const decodedUserData = defaultAbiCoder.decode(\n      ['uint256'],\n      encodedUserData\n    );\n    const exitKind = decodedUserData[0] as BigNumber;\n    if (!exitKind) throw new Error('No exit kind.');\n    if (poolType === 'ComposableStable') {\n      if (\n        exitKind.toNumber() ===\n        ComposableStablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT\n      )\n        return WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT;\n      if (\n        exitKind.toNumber() ===\n        ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT\n      )\n        return WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT;\n      else {\n        return WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT;\n      }\n    } else {\n      return exitKind.toNumber() as WeightedPoolExitKind;\n    }\n  }\n\n  /**\n   * Decodes user exit data and returns token input amounts\n   * @param encodedUserData\n   * @param exitKind\n   * @returns\n   */\n  decodeExitData(\n    encodedUserData: string,\n    exitKind: WeightedPoolExitKind\n  ): string[] {\n    // At the moment all pools have same structure so just use WeightedPoolDecoded for all\n    if (exitKind === WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\n      const [, amountsOut, maxBPTAmountIn] =\n        WeightedPoolDecoder.exitBPTInForExactTokensOut(encodedUserData);\n      return [amountsOut.toString(), maxBPTAmountIn.toString()];\n    } else if (\n      exitKind === WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT\n    ) {\n      const [, bptIn, tokenIndex] =\n        WeightedPoolDecoder.exitExactBPTInForOneTokenOut(encodedUserData);\n      return [bptIn.toString(), tokenIndex.toString()];\n    } else if (exitKind === WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\n      const [, bptIn] =\n        WeightedPoolDecoder.exitExactBPTInForTokensOut(encodedUserData);\n      return [bptIn.toString()];\n    } else throw new Error('Non supported exit data');\n  }\n\n  /**\n   * Exit pool, BPT in to tokens out.\n   * Updates pool balances.\n   * @param encodedUserData\n   * @param pool\n   * @returns tokensOut\n   */\n  exactBptInForTokensOut(\n    encodedUserData: string,\n    pool: Pool\n  ): [string, string[], string[]] {\n    const [bptInWithRef] = this.decodeExitData(\n      encodedUserData,\n      WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT\n    );\n\n    const bptIn = this.relayerModel.doChainedRefReplacement(bptInWithRef);\n    // Calculate amount of tokens out given an exact amount of BPT in\n    const amountsOut = pool\n      ._calcTokensOutGivenExactBptIn(BigNumber.from(bptIn))\n      .map((a: BigNumber) => a.toString());\n\n    // Updates BPT/totalShares value for pool\n    if (\n      pool.SubgraphType == 'StablePhantom' ||\n      pool.SubgraphType == 'ComposableStable'\n    ) {\n      // Update BPT balance\n      // totalShares will be updated as a side effect within SOR\n      const bptAsPoolToken = pool.tokens.find((t: PoolToken) =>\n        isSameAddress(t.address, pool.address)\n      );\n      if (!bptAsPoolToken)\n        throw new Error('Pool does not contain BPT as a token');\n      const bptBalanceEVM = parseFixed(\n        bptAsPoolToken.balance.toString(),\n        bptAsPoolToken.decimals\n      );\n      pool.updateTokenBalanceForPool(\n        pool.address,\n        bptBalanceEVM.add(bptIn) // add value because exiting pool increases pre-minted BPT being held by the pool\n      );\n    } else {\n      // For pools that do not contain BPT as a token, update totalShares directly\n      pool.updateTokenBalanceForPool(pool.address, pool.totalShares.sub(bptIn));\n    }\n\n    const tokensWithoutBpt = pool.tokens.filter(\n      (t: PoolToken) => !isSameAddress(t.address, pool.address)\n    );\n    // Update each tokens balance\n    amountsOut.forEach((amountOut: string, i: number) => {\n      const balanceEvm = parseFixed(\n        tokensWithoutBpt[i].balance.toString(),\n        tokensWithoutBpt[i].decimals\n      );\n      pool.updateTokenBalanceForPool(\n        tokensWithoutBpt[i].address,\n        balanceEvm.sub(amountOut)\n      );\n    });\n    return [\n      bptIn,\n      tokensWithoutBpt.map((t: PoolToken) => t.address),\n      amountsOut,\n    ];\n  }\n\n  /**\n   * Exit pool, BPT in to single token out.\n   * Updates pool balances.\n   * @param encodedUserData\n   * @param pool\n   * @returns tokens out\n   */\n  exactBptInForOneTokenOut(\n    encodedUserData: string,\n    pool: Pool\n  ): [string, string[], string[]] {\n    const [bptInWithRef, tokenIndex] = this.decodeExitData(\n      encodedUserData,\n      WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT\n    );\n    const bptIn = this.relayerModel.doChainedRefReplacement(bptInWithRef);\n    // Uses an existing SOR functionality so need to deal with pairData and scaling\n    const pairData = pool.parsePoolPairData(\n      pool.address,\n      pool.tokensList[Number(tokenIndex)]\n    );\n    // Calculation requires floating point number input\n    const amountInHuman: string = formatFixed(bptIn, pairData.decimalsIn);\n    // Calculate amount of token out given an exact amount of BPT in\n    const amountOutHuman = pool\n      ._exactTokenInForTokenOut(pairData as never, bnum(amountInHuman))\n      .dp(pairData.decimalsOut);\n    const amountOutEvm = parseFixed(\n      amountOutHuman.toString(),\n      pairData.decimalsOut\n    );\n\n    // Update balances use EVM scaled\n    const poolBalances = getBalancesForTokens(pool, [\n      pool.address,\n      pairData.tokenOut,\n    ]);\n    // Subtract token out amount from pool\n    pool.updateTokenBalanceForPool(\n      pairData.tokenOut,\n      BigNumber.from(poolBalances[1]).sub(amountOutEvm)\n    );\n\n    if (\n      pool.SubgraphType == 'StablePhantom' ||\n      pool.SubgraphType == 'ComposableStable'\n    ) {\n      // Add value because exiting pool increases pre-minted BPT being held by the pool\n      // totalShares is updated as a side effect on SOR\n      pool.updateTokenBalanceForPool(\n        pool.address,\n        BigNumber.from(poolBalances[0]).add(bptIn)\n      );\n    } else {\n      // Exiting a pool is equivalent to removing from totalSupply (totalShares) so must sub here\n      pool.updateTokenBalanceForPool(pool.address, pool.totalShares.sub(bptIn));\n    }\n\n    const tokensWithoutBpt = pool.tokensList.filter(\n      (t: string) => !isSameAddress(t, pool.address)\n    );\n    const amountsOut = new Array(tokensWithoutBpt.length).fill('0');\n    amountsOut[Number(tokenIndex)] = amountOutEvm.toString();\n    return [bptIn, tokensWithoutBpt, amountsOut];\n  }\n\n  /**\n   * Perform the specified exit type.\n   * @param exitPoolRequest\n   * @returns tokens out\n   */\n  async doExitPool(\n    exitPoolRequest: ExitPoolRequest,\n    pools: PoolDictionary\n  ): Promise<[string[], string[]]> {\n    const pool = pools[exitPoolRequest.poolId];\n    const exitKind = this.exitKind(\n      pool.SubgraphType,\n      exitPoolRequest.encodedUserData\n    );\n    let amountsOut: string[] = [];\n    let bptIn: string;\n    let tokensOut: string[] = [];\n    const tokens: string[] = [];\n    const deltas: string[] = [];\n    if (exitKind === WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\n      [bptIn, tokensOut, amountsOut] = this.exactBptInForTokensOut(\n        exitPoolRequest.encodedUserData,\n        pool\n      );\n    } else if (\n      exitKind === WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT\n    ) {\n      [bptIn, tokensOut, amountsOut] = this.exactBptInForOneTokenOut(\n        exitPoolRequest.encodedUserData,\n        pool\n      );\n    } else throw new Error('Exit type not implemented');\n\n    // Save any chained references\n    for (let i = 0; i < exitPoolRequest.outputReferences.length; i++) {\n      const tokenOut =\n        pool.tokensList[exitPoolRequest.outputReferences[i].index];\n      const tokenOutIndex = tokensOut.indexOf(tokenOut);\n      if (tokenOutIndex === -1) throw new Error('Token out not found');\n      this.relayerModel.setChainedReferenceValue(\n        exitPoolRequest.outputReferences[i].key.toString(),\n        amountsOut[tokenOutIndex]\n      );\n    }\n    tokens.push(pool.address, ...tokensOut);\n    deltas.push(bptIn, ...amountsOut.map((a) => Zero.sub(a).toString()));\n    return [tokens, deltas];\n  }\n}\n","import { parseFixed, BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { Zero } from '@ethersproject/constants';\nimport { bnum } from '@balancer-labs/sor';\n\nimport { PoolDictionary, Pool } from '../poolSource';\nimport { EncodeBatchSwapInput } from '@/modules/relayer/types';\nimport { Swap, SwapType } from '@/modules/swaps/types';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { RelayerModel } from '../relayer';\nimport { ActionType } from '../vaultModel.module';\n\nexport interface SwapRequest\n  extends Pick<Swap, 'request' | 'funds' | 'outputReference'> {\n  actionType: ActionType.Swap;\n}\n\nexport interface BatchSwapRequest\n  extends Pick<\n    EncodeBatchSwapInput,\n    'swaps' | 'assets' | 'funds' | 'swapType' | 'outputReferences'\n  > {\n  actionType: ActionType.BatchSwap;\n}\n\nexport class SwapModel {\n  constructor(private relayerModel: RelayerModel) {}\n\n  /**\n   * Performs a single swap with one pool.\n   * @param swapRequest\n   * @returns Returns the net Vault asset balance delta. Positive amount represent token (or ETH) sent to the Vault, and negative amount represent token (or ETH) sent by the Vault. Delta corresponds to the asset out.\n   */\n  async doSingleSwap(\n    swapRequest: SwapRequest,\n    pools: PoolDictionary\n  ): Promise<string[]> {\n    const amountIn = this.relayerModel.doChainedRefReplacement(\n      swapRequest.request.amount.toString()\n    );\n\n    const pool = pools[swapRequest.request.poolId];\n    const [, amountOutEvm] = this.doSwap(\n      swapRequest.request.assetIn,\n      swapRequest.request.assetOut,\n      pool,\n      swapRequest.request.kind,\n      amountIn\n    );\n\n    const delta = Zero.sub(amountOutEvm);\n    if (!swapRequest.outputReference)\n      throw new Error('Missing outputReference');\n\n    // Swap return values are signed, as they are Vault deltas (positive values correspond to assets sent\n    // to the Vault, and negative values are assets received from the Vault). To simplify the chained reference\n    // value model, we simply store the absolute value.\n    this.relayerModel.setChainedReferenceValue(\n      swapRequest.outputReference.toString(),\n      delta.abs().toString()\n    );\n    return [delta.toString(), amountIn];\n  }\n\n  /**\n   * Performs a series of swaps with one or multiple Pools.\n   * @param batchSwapRequest\n   * @returns Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array.\n   */\n  async doBatchSwap(\n    batchSwapRequest: BatchSwapRequest,\n    pools: PoolDictionary\n  ): Promise<string[]> {\n    const assets = batchSwapRequest.assets;\n    const deltas = new Array(assets.length).fill(Zero);\n    // Used for multihop swaps where previous swap return is used as input to next swap\n    let previousAmount: string;\n\n    for (let i = 0; i < batchSwapRequest.swaps.length; ++i) {\n      const amount = batchSwapRequest.swaps[i].amount;\n      if (Relayer.isChainedReference(amount)) {\n        batchSwapRequest.swaps[i].amount =\n          this.relayerModel.getChainedReferenceValue(amount);\n      }\n    }\n\n    // Handle each swap in order\n    batchSwapRequest.swaps.forEach((swap) => {\n      const tokenIn = assets[swap.assetInIndex];\n      const tokenOut = assets[swap.assetOutIndex];\n      const pool = pools[swap.poolId];\n      let amount = swap.amount;\n      if (amount === '0') amount = previousAmount;\n      const [amountInEvm, amountOutEvm] = this.doSwap(\n        tokenIn,\n        tokenOut,\n        pool,\n        batchSwapRequest.swapType,\n        amount\n      );\n\n      previousAmount =\n        batchSwapRequest.swapType === SwapType.SwapExactIn\n          ? amountOutEvm.toString()\n          : amountInEvm.toString();\n\n      deltas[swap.assetInIndex] = deltas[swap.assetInIndex].add(amountInEvm);\n      deltas[swap.assetOutIndex] = deltas[swap.assetOutIndex].sub(amountOutEvm);\n    });\n\n    for (let i = 0; i < batchSwapRequest.outputReferences.length; i++) {\n      // Batch swap return values are signed, as they are Vault deltas (positive values correspond to assets sent\n      // to the Vault, and negative values are assets received from the Vault). To simplify the chained reference\n      // value model, we simply store the absolute value.\n      this.relayerModel.setChainedReferenceValue(\n        batchSwapRequest.outputReferences[i].key.toString(),\n        deltas[batchSwapRequest.outputReferences[i].index].abs().toString()\n      );\n    }\n    return deltas.map((d) => d.toString());\n  }\n\n  /**\n   * Perform swap against a pool (and update balances)\n   * @param tokenIn\n   * @param tokenOut\n   * @param pool\n   * @param swapType\n   * @param amount (EVM Scale)\n   * @returns\n   */\n  doSwap(\n    tokenIn: string,\n    tokenOut: string,\n    pool: Pool,\n    swapType: SwapType,\n    amount: string\n  ): BigNumber[] {\n    const pairData = pool.parsePoolPairData(tokenIn, tokenOut);\n    const isExactIn = swapType === SwapType.SwapExactIn;\n    let amountInEvm: string | BigNumber = isExactIn\n      ? BigNumber.from(amount)\n      : Zero;\n    let amountOutEvm: string | BigNumber = isExactIn\n      ? Zero\n      : BigNumber.from(amount);\n    const amountInHuman: string | BigNumber = formatFixed(\n      amountInEvm,\n      pairData.decimalsIn\n    );\n    const amountOutHuman: string | BigNumber = formatFixed(\n      amountOutEvm,\n      pairData.decimalsOut\n    );\n\n    if (isExactIn) {\n      // Needs human scale\n      const amountOutHuman = pool\n        ._exactTokenInForTokenOut(\n          pairData as never,\n          bnum(amountInHuman.toString())\n        )\n        .dp(pairData.decimalsOut);\n      amountOutEvm = parseFixed(\n        amountOutHuman.toString(),\n        pairData.decimalsOut\n      );\n    } else {\n      // Needs human scale\n      const amountInHuman = pool\n        ._tokenInForExactTokenOut(\n          pairData as never,\n          bnum(amountOutHuman.toString())\n        )\n        .dp(pairData.decimalsIn);\n      amountInEvm = parseFixed(amountInHuman.toString(), pairData.decimalsIn);\n    }\n    // Update balances of tokenIn and tokenOut - use EVM scale\n    pool.updateTokenBalanceForPool(\n      pairData.tokenIn,\n      pairData.balanceIn.add(amountInEvm)\n    );\n    pool.updateTokenBalanceForPool(\n      pairData.tokenOut,\n      pairData.balanceOut.sub(amountOutEvm)\n    );\n    return [amountInEvm, amountOutEvm];\n  }\n}\n","import { LinearPool } from '@balancer-labs/sor';\nimport { parseFixed } from '@ethersproject/bignumber';\n\nimport { EncodeUnwrapAaveStaticTokenInput } from '@/modules/relayer/types';\n\nimport { PoolDictionary } from '../poolSource';\nimport { RelayerModel } from '../relayer';\nimport { ActionType } from '../vaultModel.module';\nimport { WeiPerEther, Zero } from '@ethersproject/constants';\nimport { SolidityMaths } from '@/lib/utils/solidityMaths';\n\nexport interface UnwrapRequest\n  extends Pick<EncodeUnwrapAaveStaticTokenInput, 'amount' | 'outputReference'> {\n  poolId: string;\n  actionType: ActionType.Unwrap;\n}\n\nexport class UnwrapModel {\n  constructor(private relayerModel: RelayerModel) {}\n\n  /**\n   * Perform the specified unwrap type.\n   * @param unwrapRequest\n   * @param pools\n   * @returns tokens out and their respective deltas\n   */\n  async doUnwrap(\n    unwrapRequest: UnwrapRequest,\n    pools: PoolDictionary\n  ): Promise<[string[], string[]]> {\n    const pool = pools[unwrapRequest.poolId] as LinearPool;\n    const wrappedToken = pool.tokens[pool.wrappedIndex];\n    const underlyingToken = pool.tokens[pool.mainIndex];\n\n    const amountIn = this.relayerModel.doChainedRefReplacement(\n      unwrapRequest.amount.toString()\n    );\n\n    // must be negative because is leaving the vault\n    const amountOut = SolidityMaths.divDownFixed(\n      SolidityMaths.mulDownFixed(\n        BigInt(amountIn),\n        parseFixed(wrappedToken.priceRate, 18).toBigInt()\n      ),\n      WeiPerEther.toBigInt()\n    ).toString();\n\n    // Save chained references\n    this.relayerModel.setChainedReferenceValue(\n      unwrapRequest.outputReference.toString(),\n      amountOut\n    );\n\n    const tokens = [wrappedToken.address, underlyingToken.address];\n    const deltas = [amountIn, Zero.sub(amountOut).toString()];\n    return [tokens, deltas];\n  }\n}\n","import { PoolDictionary } from '../poolSource';\nimport { RelayerModel } from '../relayer';\nimport { JoinModel, JoinPoolRequest } from './join';\nimport { ExitModel, ExitPoolRequest } from './exit';\nimport { SwapModel, BatchSwapRequest, SwapRequest } from './swap';\nimport { UnwrapModel, UnwrapRequest } from './unwrap';\n\nexport class PoolModel {\n  joinModel: JoinModel;\n  exitModel: ExitModel;\n  swapModel: SwapModel;\n  unwrapModel: UnwrapModel;\n\n  constructor(private relayerModel: RelayerModel) {\n    this.joinModel = new JoinModel(relayerModel);\n    this.exitModel = new ExitModel(relayerModel);\n    this.swapModel = new SwapModel(relayerModel);\n    this.unwrapModel = new UnwrapModel(relayerModel);\n  }\n\n  async doJoin(\n    joinPoolRequest: JoinPoolRequest,\n    pools: PoolDictionary\n  ): Promise<[string[], string[]]> {\n    return this.joinModel.doJoinPool(joinPoolRequest, pools);\n  }\n\n  async doExit(\n    exitPoolRequest: ExitPoolRequest,\n    pools: PoolDictionary\n  ): Promise<[string[], string[]]> {\n    return this.exitModel.doExitPool(exitPoolRequest, pools);\n  }\n\n  async doBatchSwap(\n    batchSwapRequest: BatchSwapRequest,\n    pools: PoolDictionary\n  ): Promise<string[]> {\n    return this.swapModel.doBatchSwap(batchSwapRequest, pools);\n  }\n\n  async doSingleSwap(\n    swapRequest: SwapRequest,\n    pools: PoolDictionary\n  ): Promise<string[]> {\n    return this.swapModel.doSingleSwap(swapRequest, pools);\n  }\n\n  async doUnwrap(\n    unwrapRequest: UnwrapRequest,\n    pools: PoolDictionary\n  ): Promise<[string[], string[]]> {\n    return this.unwrapModel.doUnwrap(unwrapRequest, pools);\n  }\n}\n","import { Relayer } from '@/modules/relayer/relayer.module';\n\nexport class RelayerModel {\n  chainedRefs: Record<string, string> = {};\n\n  /**\n   * Stores `value` as the amount referenced by chained reference `ref`.\n   * @param ref\n   * @param value\n   */\n  setChainedReferenceValue(ref: string, value: string): void {\n    this.chainedRefs[ref] = value;\n  }\n\n  /**\n   * Returns the amount referenced by chained reference `ref`.\n   * @param ref\n   * @returns\n   */\n  getChainedReferenceValue(ref: string): string {\n    return this.chainedRefs[ref];\n  }\n\n  doChainedRefReplacement(amount: string): string {\n    if (Relayer.isChainedReference(amount.toString())) {\n      return this.getChainedReferenceValue(amount.toString());\n    } else return amount;\n  }\n\n  doChainedRefReplacements(amounts: string[]): string[] {\n    return amounts.map((amount) =>\n      this.doChainedRefReplacement(amount).toString()\n    );\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport {\n  SubgraphPoolBase,\n  SubgraphToken,\n  PoolDataService,\n  WeightedPool,\n  StablePool,\n  MetaStablePool,\n  LinearPool,\n  PhantomStablePool,\n  ComposableStablePool,\n} from '@balancer-labs/sor';\nimport { Logger } from '@/lib/utils/logger';\n\nexport interface PoolDictionary {\n  [poolId: string]: Pool;\n}\n\nexport type Pool =\n  | (\n      | WeightedPool\n      | StablePool\n      | LinearPool\n      | MetaStablePool\n      | PhantomStablePool\n      | ComposableStablePool\n    ) & { SubgraphType: string };\n\nexport class PoolsSource {\n  poolsArray: SubgraphPoolBase[] = [];\n  poolsDict: PoolDictionary = {};\n  constructor(\n    private poolDataService: PoolDataService,\n    private wrappedNativeAsset: string\n  ) {}\n  dataSource(): PoolDataService {\n    return this.poolDataService;\n  }\n\n  async all(refresh = false): Promise<SubgraphPoolBase[]> {\n    if (refresh || this.poolsArray.length === 0) {\n      const list = cloneDeep(await this.dataSource().getPools());\n      for (const pool of list) {\n        // For non pre-minted BPT pools we add the BPT to the token list. This makes the SOR functions work for joins/exits\n        if (\n          [\n            'Weighted',\n            'Investment',\n            'Stable',\n            'LiquidityBootstrapping',\n          ].includes(pool.poolType)\n        ) {\n          const BptAsToken: SubgraphToken = {\n            address: pool.address,\n            balance: pool.totalShares,\n            decimals: 18,\n            priceRate: '1',\n            weight: '0',\n          };\n          pool.tokens.push(BptAsToken);\n          pool.tokensList.push(pool.address);\n        }\n      }\n      this.poolsArray = list;\n    }\n    return this.poolsArray;\n  }\n\n  parseToPoolsDict(pools: SubgraphPoolBase[]): PoolDictionary {\n    return Object.fromEntries(\n      cloneDeep(pools)\n        .filter(\n          (pool) => pool.tokensList.length > 0 && pool.tokens[0].balance !== '0'\n        )\n        .map((pool) => [pool.id, this.parseNewPool(pool)])\n        .filter(([, pool]) => pool !== undefined)\n    );\n  }\n\n  parseNewPool(subgraphPool: SubgraphPoolBase): Pool | undefined {\n    // We're not interested in any pools which don't allow swapping\n    if (!subgraphPool.swapEnabled) return undefined;\n\n    let pool: Pool = {} as Pool;\n\n    try {\n      if (\n        ['Weighted', 'Investment', 'LiquidityBootstrapping'].includes(\n          subgraphPool.poolType\n        )\n      ) {\n        const sorPool = WeightedPool.fromPool(subgraphPool, false);\n        pool = sorPool as Pool;\n      } else if (subgraphPool.poolType === 'Stable') {\n        const sorPool = StablePool.fromPool(subgraphPool);\n        pool = sorPool as Pool;\n      } else if (subgraphPool.poolType === 'MetaStable') {\n        const sorPool = MetaStablePool.fromPool(subgraphPool);\n        pool = sorPool as Pool;\n      } else if (subgraphPool.poolType.toString().includes('Linear')) {\n        const sorPool = LinearPool.fromPool(subgraphPool);\n        pool = sorPool as Pool;\n      } else if (subgraphPool.poolType === 'StablePhantom') {\n        const sorPool = PhantomStablePool.fromPool(subgraphPool);\n        pool = sorPool as Pool;\n      } else if (subgraphPool.poolType === 'ComposableStable') {\n        const sorPool = ComposableStablePool.fromPool(subgraphPool);\n        pool = sorPool as Pool;\n      } else {\n        const logger = Logger.getInstance();\n        logger.warn(\n          `Unknown pool type or type field missing: ${subgraphPool.poolType} ${subgraphPool.id}`\n        );\n        return undefined;\n      }\n      if (!pool) throw new Error('Issue with Pool');\n      pool.SubgraphType = subgraphPool.poolType;\n    } catch (err) {\n      console.error(`Error parseNewPool`);\n      return undefined;\n    }\n    return pool;\n  }\n\n  /**\n   * Converts Subgraph array into PoolDictionary\n   * @param refresh\n   * @returns\n   */\n  async poolsDictionary(refresh = false): Promise<PoolDictionary> {\n    if (refresh || Object.keys(this.poolsDict).length === 0) {\n      const poolsArray = await this.all(refresh);\n      this.poolsDict = this.parseToPoolsDict(poolsArray);\n    }\n    return this.poolsDict;\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero } from '@ethersproject/constants';\nimport { PoolDataService } from '@balancer-labs/sor';\n\nimport { PoolModel } from './poolModel/poolModel';\nimport { JoinPoolRequest } from './poolModel/join';\nimport { ExitPoolRequest } from './poolModel/exit';\nimport { BatchSwapRequest, SwapRequest } from './poolModel/swap';\nimport { UnwrapRequest } from './poolModel/unwrap';\nimport { RelayerModel } from './relayer';\nimport { PoolsSource } from './poolSource';\nimport {\n  EncodeBatchSwapInput,\n  EncodeJoinPoolInput,\n  EncodeExitPoolInput,\n} from '../relayer/types';\nimport { Swap } from '../swaps/types';\n\nexport enum ActionType {\n  BatchSwap,\n  Join,\n  Exit,\n  Swap,\n  Unwrap,\n}\n\nexport type Requests =\n  | BatchSwapRequest\n  | JoinPoolRequest\n  | ExitPoolRequest\n  | SwapRequest\n  | UnwrapRequest;\n\n/**\n * Controller / use-case layer for interacting with pools data.\n */\nexport class VaultModel {\n  poolsSource: PoolsSource;\n\n  constructor(poolDataService: PoolDataService, wrappedNativeAsset: string) {\n    this.poolsSource = new PoolsSource(poolDataService, wrappedNativeAsset);\n  }\n\n  updateDeltas(\n    deltas: Record<string, BigNumber>,\n    assets: string[],\n    amounts: string[]\n  ): Record<string, BigNumber> {\n    assets.forEach((t, i) => {\n      if (!deltas[t]) deltas[t] = Zero;\n      deltas[t] = deltas[t].add(amounts[i]);\n    });\n    return deltas;\n  }\n\n  async multicall(\n    rawCalls: Requests[],\n    refresh = false\n  ): Promise<Record<string, BigNumber>> {\n    const relayerModel = new RelayerModel();\n    const poolModel = new PoolModel(relayerModel);\n    const pools = await this.poolsSource.poolsDictionary(refresh);\n    const deltas: Record<string, BigNumber> = {};\n    for (const call of rawCalls) {\n      let tokens: string[] = [];\n      let amounts: string[] = [];\n      switch (call.actionType) {\n        case ActionType.Join: {\n          [tokens, amounts] = await poolModel.doJoin(call, pools);\n          break;\n        }\n        case ActionType.Exit: {\n          [tokens, amounts] = await poolModel.doExit(call, pools);\n          break;\n        }\n        case ActionType.BatchSwap: {\n          tokens = call.assets;\n          amounts = await poolModel.doBatchSwap(call, pools);\n          break;\n        }\n        case ActionType.Swap: {\n          tokens = [call.request.assetOut, call.request.assetIn];\n          amounts = await poolModel.doSingleSwap(call, pools);\n          break;\n        }\n        case ActionType.Unwrap: {\n          [tokens, amounts] = await poolModel.doUnwrap(call, pools);\n          break;\n        }\n        default:\n          break;\n      }\n      this.updateDeltas(deltas, tokens, amounts);\n    }\n    return deltas;\n  }\n\n  static mapSwapRequest(call: Swap): SwapRequest {\n    const swapRequest: SwapRequest = {\n      actionType: ActionType.Swap,\n      request: call.request,\n      funds: call.funds,\n      outputReference: call.outputReference,\n    };\n    return swapRequest;\n  }\n\n  static mapBatchSwapRequest(call: EncodeBatchSwapInput): BatchSwapRequest {\n    const batchSwapRequest: BatchSwapRequest = {\n      actionType: ActionType.BatchSwap,\n      swaps: call.swaps,\n      assets: call.assets,\n      funds: call.funds,\n      swapType: call.swapType,\n      outputReferences: call.outputReferences,\n    };\n    return batchSwapRequest;\n  }\n\n  static mapJoinPoolRequest(call: EncodeJoinPoolInput): JoinPoolRequest {\n    const joinPoolRequest: JoinPoolRequest = {\n      actionType: ActionType.Join,\n      poolId: call.poolId,\n      encodedUserData: call.joinPoolRequest.userData,\n      outputReference: call.outputReference,\n    };\n    return joinPoolRequest;\n  }\n\n  static mapExitPoolRequest(call: EncodeExitPoolInput): ExitPoolRequest {\n    const exitPoolRequest: ExitPoolRequest = {\n      actionType: ActionType.Exit,\n      poolId: call.poolId,\n      encodedUserData: call.exitPoolRequest.userData,\n      outputReferences: call.outputReferences,\n    };\n    return exitPoolRequest;\n  }\n\n  static mapUnwrapRequest(\n    amount: BigNumberish,\n    outputReference: BigNumberish,\n    poolId: string\n  ): UnwrapRequest {\n    const unwrapRequest: UnwrapRequest = {\n      actionType: ActionType.Unwrap,\n      poolId,\n      amount,\n      outputReference,\n    };\n    return unwrapRequest;\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport { BigNumber, BigNumberish, parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero, WeiPerEther, Zero } from '@ethersproject/constants';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { EncodeJoinPoolInput, Relayer } from '@/modules/relayer/relayer.module';\nimport {\n  FundManagement,\n  SingleSwap,\n  Swap,\n  SwapType,\n} from '@/modules/swaps/types';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport { BalancerNetworkConfig, JoinPoolRequest, PoolType } from '@/types';\nimport { PoolGraph, Node } from '../graph/graph';\n\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { AssetHelpers, getEthValue, isSameAddress, replace } from '@/lib/utils';\nimport {\n  SolidityMaths,\n  _computeScalingFactor,\n  _upscale,\n} from '@/lib/utils/solidityMaths';\nimport { calcPriceImpact } from '../pricing/priceImpact';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { getPoolAddress } from '@/pool-utils';\nimport { Simulation, SimulationType } from '../simulation/simulation.module';\nimport { Requests, VaultModel } from '../vaultModel/vaultModel.module';\nimport { SwapRequest } from '../vaultModel/poolModel/swap';\nimport { JoinPoolRequest as JoinPoolModelRequest } from '../vaultModel/poolModel/join';\nimport { JsonRpcSigner } from '@ethersproject/providers';\nimport { BalancerRelayer__factory } from '@/contracts/factories/BalancerRelayer__factory';\nimport { Logger } from '@/lib/utils/logger';\n\nconst balancerRelayerInterface = BalancerRelayer__factory.createInterface();\n\n// Quickly switch useful debug logs on/off\nconst DEBUG = false;\n\nfunction debugLog(log: string) {\n  const logger = Logger.getInstance();\n  if (DEBUG) logger.info(log);\n}\n\nexport class Join {\n  private relayer: string;\n  private wrappedNativeAsset;\n  constructor(\n    private poolGraph: PoolGraph,\n    networkConfig: BalancerNetworkConfig,\n    private simulationService: Simulation\n  ) {\n    const { tokens, contracts } = networkAddresses(networkConfig.chainId);\n    this.relayer = contracts.balancerRelayer;\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n  }\n\n  private checkInputs(tokensIn: string[], amountsIn: string[]) {\n    if (tokensIn.length === 0)\n      throw new BalancerError(BalancerErrorCode.MISSING_TOKENS);\n\n    if (amountsIn.every((a) => a === '0'))\n      throw new BalancerError(BalancerErrorCode.JOIN_WITH_ZERO_AMOUNT);\n\n    if (tokensIn.length != amountsIn.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    if (\n      tokensIn.some((t) => t === AddressZero) &&\n      tokensIn.some(\n        (t) => t.toLowerCase() === this.wrappedNativeAsset.toLowerCase()\n      )\n    )\n      throw new BalancerError(BalancerErrorCode.INPUT_TOKEN_INVALID);\n  }\n\n  async joinPool(\n    poolId: string,\n    tokensIn: string[],\n    amountsIn: string[],\n    userAddress: string,\n    slippage: string,\n    signer: JsonRpcSigner,\n    simulationType: SimulationType,\n    authorisation?: string\n  ): Promise<{\n    to: string;\n    encodedCall: string;\n    expectedOut: string;\n    minOut: string;\n    priceImpact: string;\n    value: BigNumberish;\n  }> {\n    this.checkInputs(tokensIn, amountsIn);\n\n    // Create nodes for each pool/token interaction and order by breadth first\n    const orderedNodes = await this.poolGraph.getGraphNodes(true, poolId, []);\n\n    const nativeAssetIndex = tokensIn.findIndex((t) => t === AddressZero);\n    const isNativeAssetJoin = nativeAssetIndex !== -1;\n    const tokensInWithoutNativeAsset = replace(\n      tokensIn,\n      nativeAssetIndex,\n      this.wrappedNativeAsset.toLowerCase()\n    );\n\n    const joinPaths = Join.getJoinPaths(\n      orderedNodes,\n      tokensInWithoutNativeAsset,\n      amountsIn\n    );\n\n    const totalBptZeroPi = Join.totalBptZeroPriceImpact(joinPaths);\n    /*\n    - Create calls with 0 min bpt for each root join\n    - static call (or V4 special call) to get actual amounts for each root join\n    - Apply slippage to amounts\n    - Recreate calls with minAmounts === actualAmountsWithSlippage\n    - Return minAmoutOut (sum actualAmountsWithSlippage), UI would use this to display to user\n    - Return updatedCalls, UI would use this to execute tx\n    */\n    // Create calls with 0 expected for each root join\n    // Peek is enabled here so we can static call the returned amounts and use these to set limits\n    debugLog(`\\n--- Simulation Calls ---`);\n    const {\n      multiRequests,\n      encodedCall: queryData,\n      outputIndexes,\n    } = await this.createCalls(\n      joinPaths,\n      userAddress,\n      isNativeAssetJoin,\n      undefined,\n      authorisation\n    );\n\n    // TODO: add this back once relayerV6 is released and we're able to peek while joining with ETH\n    // const simulationValue = isNativeAssetJoin\n    //   ? simulationDeltas[this.wrappedNativeAsset.toLowerCase()]\n    //   : Zero;\n\n    // static call (or V4 special call) to get actual amounts for each root join\n    const { amountsOut, totalAmountOut } = await this.amountsOutByJoinPath(\n      userAddress,\n      multiRequests,\n      queryData,\n      tokensInWithoutNativeAsset,\n      outputIndexes,\n      signer,\n      simulationType,\n      '0' // TODO: change to simulationValue.tosString() once relayerV6 is released\n    );\n\n    const { minAmountsOut, totalMinAmountOut } = this.minAmountsOutByJoinPath(\n      slippage,\n      amountsOut,\n      totalAmountOut\n    );\n    const priceImpact = calcPriceImpact(\n      BigInt(totalAmountOut),\n      totalBptZeroPi.toBigInt(),\n      true\n    ).toString();\n\n    // Create calls with minAmountsOut\n    debugLog(`\\n--- Final Calls ---`);\n    const { encodedCall, deltas } = await this.createCalls(\n      joinPaths,\n      userAddress,\n      isNativeAssetJoin,\n      minAmountsOut,\n      authorisation\n    );\n\n    const value = isNativeAssetJoin\n      ? deltas[this.wrappedNativeAsset.toLowerCase()]\n      : Zero;\n    debugLog(`Total value: ${value.toString()}`);\n\n    this.assertDeltas(\n      poolId,\n      deltas,\n      tokensInWithoutNativeAsset,\n      amountsIn,\n      totalMinAmountOut\n    );\n\n    return {\n      to: this.relayer,\n      encodedCall,\n      expectedOut: totalAmountOut,\n      minOut: totalMinAmountOut,\n      priceImpact,\n      value,\n    };\n  }\n\n  private assertDeltas(\n    poolId: string,\n    deltas: Record<string, BigNumber>,\n    tokensIn: string[],\n    amountsIn: string[],\n    minBptOut: string\n  ): void {\n    const poolAddress = getPoolAddress(poolId);\n    const outDiff = deltas[poolAddress.toLowerCase()].add(minBptOut);\n\n    if (outDiff.abs().gt(3)) {\n      console.error(\n        `join assertDeltas, bptOut: `,\n        poolAddress,\n        minBptOut,\n        deltas[poolAddress.toLowerCase()]?.toString()\n      );\n      throw new BalancerError(BalancerErrorCode.JOIN_DELTA_AMOUNTS);\n    }\n    delete deltas[poolAddress.toLowerCase()];\n\n    tokensIn.forEach((token, i) => {\n      if (\n        !BigNumber.from(amountsIn[i]).eq(0) &&\n        deltas[token.toLowerCase()]?.toString() !== amountsIn[i]\n      ) {\n        console.error(\n          `join assertDeltas, tokenIn: `,\n          token,\n          amountsIn[i],\n          deltas[token.toLowerCase()]?.toString()\n        );\n        throw new BalancerError(BalancerErrorCode.JOIN_DELTA_AMOUNTS);\n      }\n      delete deltas[token.toLowerCase()];\n    });\n\n    for (const token in deltas) {\n      if (deltas[token].toString() !== '0') {\n        console.error(\n          `join assertDeltas, non-input token should be 0: `,\n          token,\n          deltas[token].toString()\n        );\n        throw new BalancerError(BalancerErrorCode.JOIN_DELTA_AMOUNTS);\n      }\n    }\n  }\n\n  // Create join paths from tokensIn all the way to the root node.\n  static getJoinPaths = (\n    orderedNodes: Node[],\n    tokensIn: string[],\n    amountsIn: string[]\n  ): Node[][] => {\n    const joinPaths: Node[][] = [];\n\n    // Filter all nodes that contain a token in the tokensIn array\n    const inputNodes = orderedNodes.filter((node) =>\n      tokensIn\n        .filter((t, i) => BigNumber.from(amountsIn[i]).gt(0)) // Remove input tokens with 0 amounts\n        .map((tokenIn) => tokenIn.toLowerCase())\n        .includes(node.address.toLowerCase())\n    );\n\n    // If inputNodes contain at least one leaf token, then add path to join proportionally with all leaf tokens contained in tokensIn\n    const containsLeafNode = inputNodes.some((node) => node.isLeaf);\n    if (containsLeafNode) {\n      joinPaths.push(orderedNodes);\n    }\n\n    // Add a join path for each non-leaf input node\n    const nonLeafInputNodes = inputNodes.filter((node) => !node.isLeaf);\n    nonLeafInputNodes.forEach((nonLeafInputNode) => {\n      // Get amount in for current node\n      const nonLeafAmountIn = amountsIn.find((amountIn, i) =>\n        isSameAddress(tokensIn[i], nonLeafInputNode.address)\n      ) as string;\n      // Split amount in between nodes with same non-leaf input token based on proportionOfParent\n      const totalProportions = nonLeafInputNodes\n        .filter((node) => isSameAddress(node.address, nonLeafInputNode.address))\n        .reduce(\n          (total, node) => total.add(node.proportionOfParent),\n          BigNumber.from(0)\n        );\n      const proportionalNonLeafAmountIn = BigNumber.from(nonLeafAmountIn)\n        .mul(nonLeafInputNode.proportionOfParent)\n        .div(totalProportions)\n        .toString();\n      // Create input node for current non-leaf input token\n      const [inputTokenNode] = PoolGraph.createInputTokenNode(\n        0, // temp value that will be updated after creation\n        nonLeafInputNode.address,\n        nonLeafInputNode.decimals,\n        nonLeafInputNode.parent,\n        WeiPerEther,\n        nonLeafInputNode.balance\n      );\n      // Update index to be actual amount in\n      inputTokenNode.index = proportionalNonLeafAmountIn;\n      inputTokenNode.isLeaf = false;\n      // Start join path with input node\n      const nonLeafJoinPath = [inputTokenNode];\n      // Add each parent to the join path until we reach the root node\n      let parent = inputTokenNode.parent;\n      let currentChild = inputTokenNode;\n      while (parent) {\n        const parentCopy = cloneDeep(parent);\n        parentCopy.children = parentCopy.children.map((child) => {\n          if (child.address === currentChild.address) {\n            // Replace original child with current child that was modified to handle the non-leaf join\n            return currentChild;\n          } else {\n            // Update index of siblings that are not within the join path to be 0\n            return { ...child, index: '0' };\n          }\n        });\n        nonLeafJoinPath.push(parentCopy);\n        currentChild = parentCopy;\n        parent = parentCopy.parent;\n      }\n      // Add join path to list of join paths\n      joinPaths.push(nonLeafJoinPath);\n    });\n\n    // After creating all join paths, update the index of each input node to be the amount in for that node\n    // All other node indexes will be used as a reference to store the amounts out for that node\n    this.updateInputAmounts(joinPaths, tokensIn, amountsIn);\n\n    return joinPaths;\n  };\n\n  /*\n  AmountsIn should be adjusted after being split between tokensIn to fix eventual rounding issues.\n  This prevents the transaction to leave out dust amounts.\n  */\n  private static updateInputAmounts = (\n    joinPaths: Node[][],\n    tokensIn: string[],\n    amountsIn: string[]\n  ): void => {\n    // Helper function to calculate and adjust amount difference for each token in\n    const ajdustAmountInDiff = (\n      tokenInInputNodes: Node[],\n      amountIn: string\n    ): void => {\n      if (tokenInInputNodes.length > 1) {\n        // Sum of amountsIn from each input node with same tokenIn\n        const amountsInSumforTokenIn = tokenInInputNodes.reduce(\n          (sum, currentNode) => sum.add(currentNode.index),\n          BigNumber.from(0)\n        );\n        // Compare total amountIn with sum of amountIn split between each input node with same tokenIn\n        const diff = BigNumber.from(amountIn).sub(amountsInSumforTokenIn);\n        // Apply difference to first input node with same tokenIn\n        tokenInInputNodes[0].index = diff\n          .add(tokenInInputNodes[0].index)\n          .toString();\n      }\n    };\n\n    // Update amountsIn within leaf join path\n    const leafJoinPath = joinPaths.find((joinPath) => joinPath[0].isLeaf);\n    if (leafJoinPath) {\n      // Update input proportions so inputs are shared correctly between leaf nodes with same tokenIn\n      const totalProportions = this.updateTotalProportions(leafJoinPath);\n      // Update input nodes to have correct input amount\n      leafJoinPath.forEach((node) => {\n        if (node.joinAction === 'input')\n          node = this.updateNodeAmount(\n            node,\n            tokensIn,\n            amountsIn,\n            totalProportions\n          );\n      });\n      // Adjust amountIn for each tokenIn to fix eventual rounding issues\n      tokensIn.forEach((tokenIn, i) => {\n        const tokenInInputNodes = leafJoinPath.filter(\n          (inputNode) =>\n            inputNode.isLeaf && isSameAddress(inputNode.address, tokenIn)\n        );\n        ajdustAmountInDiff(tokenInInputNodes, amountsIn[i]);\n      });\n    }\n\n    // Adjust amountsIn shared between non-leaf join paths with same tokenIn\n    const nonLeafJoinPaths = joinPaths.filter(\n      (joinPath) => !joinPath[0].isLeaf\n    );\n    if (nonLeafJoinPaths.length > 1) {\n      tokensIn.forEach((tokenIn, i) => {\n        const tokenInInputNodes = nonLeafJoinPaths\n          .map((path) => path[0])\n          .filter((node) => isSameAddress(node.address, tokenIn));\n        ajdustAmountInDiff(tokenInInputNodes, amountsIn[i]);\n      });\n    }\n  };\n\n  private createCalls = async (\n    joinPaths: Node[][],\n    userAddress: string,\n    isNativeAssetJoin: boolean,\n    minAmountsOut?: string[], // one for each joinPath\n    authorisation?: string\n  ): Promise<{\n    multiRequests: Requests[][];\n    encodedCall: string;\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  }> => {\n    // Create calls for both leaf and non-leaf inputs\n    const { multiRequests, encodedCalls, outputIndexes, deltas } =\n      this.createActionCalls(\n        joinPaths,\n        userAddress,\n        isNativeAssetJoin,\n        minAmountsOut\n      );\n\n    if (authorisation) {\n      encodedCalls.unshift(this.createSetRelayerApproval(authorisation));\n    }\n    const encodedCall = balancerRelayerInterface.encodeFunctionData(\n      'multicall',\n      [encodedCalls]\n    );\n\n    return {\n      multiRequests,\n      encodedCall,\n      outputIndexes: authorisation\n        ? outputIndexes.map((i) => i + 1)\n        : outputIndexes,\n      deltas,\n    };\n  };\n\n  /*\n  1. For each input token:\n    1. recursively find the spot price for each pool in the path of the join\n    2. take the product to get the spot price of the path\n    3. multiply the input amount of that token by the path spot price to get the \"zeroPriceImpact\" amount of BPT for that token\n  2. Sum each tokens zeroPriceImpact BPT amount to get total zeroPriceImpact BPT\n  */\n  static totalBptZeroPriceImpact = (joinPaths: Node[][]): BigNumber => {\n    // Add bptZeroPriceImpact for all inputs\n    let totalBptZeroPi = BigNumber.from('0');\n    joinPaths.forEach((joinPath) => {\n      const isLeafJoin = joinPath[0].isLeaf;\n      if (isLeafJoin) {\n        // Calculate bptZeroPriceImpact for leaf inputs\n        const leafNodes = joinPath.filter((node) => node.isLeaf);\n        leafNodes.forEach((leafNode) => {\n          const bptOut = this.bptOutZeroPiForInputNode(leafNode);\n          totalBptZeroPi = totalBptZeroPi.add(bptOut);\n        });\n      } else {\n        // Calculate bptZeroPriceImpact for non-leaf inputs\n        const bptOut = this.bptOutZeroPiForInputNode(joinPath[0]);\n        totalBptZeroPi = totalBptZeroPi.add(bptOut);\n      }\n    });\n    return totalBptZeroPi;\n  };\n\n  /*\n  1. recursively find the spot price for each pool in the path of the join\n  2. take the product to get the spot price of the path\n  3. multiply the input amount of that token by the path spot price to get the \"zeroPriceImpact\" amount of BPT for that token \n  */\n  static bptOutZeroPiForInputNode = (inputNode: Node): bigint => {\n    if (inputNode.index === '0' || inputNode.joinAction !== 'input')\n      return BigInt(0);\n    let spProduct = 1;\n    let parentNode: Node | undefined = inputNode.parent;\n    let childAddress = inputNode.address;\n    // Traverse up graph until we reach root adding each node\n    while (parentNode !== undefined) {\n      if (\n        parentNode.joinAction === 'batchSwap' ||\n        parentNode.joinAction === 'joinPool'\n      ) {\n        const sp = parentNode.spotPrices[childAddress.toLowerCase()];\n        spProduct = spProduct * parseFloat(sp);\n        childAddress = parentNode.address;\n      }\n      parentNode = parentNode.parent;\n    }\n    const spPriceScaled = parseFixed(spProduct.toFixed(18), 18);\n    const scalingFactor = _computeScalingFactor(BigInt(inputNode.decimals));\n    const inputAmountScaled = _upscale(BigInt(inputNode.index), scalingFactor);\n    const bptOut = SolidityMaths.divDownFixed(\n      inputAmountScaled,\n      spPriceScaled.toBigInt()\n    );\n    return bptOut;\n  };\n\n  /*\n  Simulate transaction and decodes each output of interest.\n  */\n  private amountsOutByJoinPath = async (\n    userAddress: string,\n    multiRequests: Requests[][],\n    callData: string,\n    tokensIn: string[],\n    outputIndexes: number[],\n    signer: JsonRpcSigner,\n    simulationType: SimulationType,\n    value: string\n  ): Promise<{ amountsOut: string[]; totalAmountOut: string }> => {\n    const amountsOut = await this.simulationService.simulateGeneralisedJoin(\n      this.relayer,\n      multiRequests,\n      callData,\n      outputIndexes,\n      userAddress,\n      tokensIn,\n      signer,\n      simulationType,\n      value\n    );\n\n    const totalAmountOut = amountsOut\n      .reduce((sum, amount) => sum.add(BigNumber.from(amount)), Zero)\n      .toString();\n\n    return {\n      amountsOut,\n      totalAmountOut,\n    };\n  };\n\n  /*\n  Apply slippage to amounts\n  */\n  private minAmountsOutByJoinPath = (\n    slippage: string,\n    amounts: string[],\n    totalAmountOut: string\n  ): { minAmountsOut: string[]; totalMinAmountOut: string } => {\n    const minAmountsOut = amounts.map((amount) =>\n      subSlippage(BigNumber.from(amount), BigNumber.from(slippage)).toString()\n    );\n    const totalMinAmountOut = subSlippage(\n      BigNumber.from(totalAmountOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return {\n      minAmountsOut,\n      totalMinAmountOut,\n    };\n  };\n\n  private updateDeltas(\n    deltas: Record<string, BigNumber>,\n    assets: string[],\n    amounts: string[]\n  ): Record<string, BigNumber> {\n    assets.forEach((t, i) => {\n      const asset = t.toLowerCase();\n      if (!deltas[asset]) deltas[asset] = Zero;\n      deltas[asset] = deltas[asset].add(amounts[i]);\n    });\n    return deltas;\n  }\n\n  // Create actions for each Node and return in multicall array\n  // Create calls for each path, use value stored in minBptAmounts if available\n  private createActionCalls = (\n    joinPaths: Node[][],\n    userAddress: string,\n    isNativeAssetJoin: boolean,\n    minAmountsOut?: string[]\n  ): {\n    multiRequests: Requests[][];\n    encodedCalls: string[];\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  } => {\n    const multiRequests: Requests[][] = [];\n    const encodedCalls: string[] = [];\n    const outputIndexes: number[] = [];\n    const isSimulation = !minAmountsOut;\n    const deltas: Record<string, BigNumber> = {};\n\n    joinPaths.forEach((joinPath, j) => {\n      const isLeafJoin = joinPath[0].isLeaf;\n      const modelRequests: Requests[] = [];\n\n      joinPath.forEach((node, i) => {\n        // Prevent adding action calls with input amounts equal 0\n        if (\n          node.children.length > 0 &&\n          node.children.filter((c) => this.shouldBeConsidered(c)).length === 0\n        ) {\n          node.index = '0';\n          return;\n        }\n\n        // Sender's rule\n        // 1. If any child node is an input node, tokens are coming from the user\n        const hasChildInput = node.children\n          .filter((c) => this.shouldBeConsidered(c))\n          .some((c) => c.joinAction === 'input');\n        const sender = hasChildInput ? userAddress : this.relayer;\n\n        // Recipient's rule\n        // 1. Transactions with sibling input node must be sent to user because it will be the sender of the following transaction (per sender's rule above)\n        // e.g. boostedMetaAlt - MAI/bbausd - joining with MAI from user and bbausd from earlier actions. MAI needs to come from user.\n        // 2. Last transaction must be sent to the user\n        // 3. Otherwise relayer\n        // Note: scenario 1 usually happens with joinPool transactions that have both BPT and undelying tokens as tokensIn\n        const isLastChainedCall = i === joinPath.length - 1;\n        const hasSiblingInput =\n          (isLeafJoin && // non-leaf joins don't have siblings that should be considered\n            node.parent?.children\n              .filter((s) => this.shouldBeConsidered(s))\n              .some((s) => s.joinAction === 'input')) ??\n          false;\n        const recipient =\n          isLastChainedCall || hasSiblingInput ? userAddress : this.relayer;\n\n        // Last action will use minBptOut to protect user. Middle calls can safely have 0 minimum as tx will revert if last fails.\n        const minOut =\n          isLastChainedCall && minAmountsOut ? minAmountsOut[j] : '0';\n\n        switch (node.joinAction) {\n          case 'batchSwap':\n            {\n              const { modelRequest, encodedCall, assets, amounts } =\n                this.createSwap(\n                  node,\n                  j,\n                  minOut,\n                  sender,\n                  recipient,\n                  isNativeAssetJoin,\n                  isSimulation\n                );\n              modelRequests.push(modelRequest);\n              encodedCalls.push(encodedCall);\n              this.updateDeltas(deltas, assets, amounts);\n            }\n            break;\n          case 'joinPool':\n            {\n              const { modelRequest, encodedCall, assets, amounts, minBptOut } =\n                this.createJoinPool(\n                  node,\n                  j,\n                  minOut,\n                  sender,\n                  recipient,\n                  isNativeAssetJoin,\n                  isSimulation\n                );\n              modelRequests.push(modelRequest);\n              encodedCalls.push(encodedCall);\n              this.updateDeltas(\n                deltas,\n                [node.address, ...assets],\n                [minBptOut, ...amounts]\n              );\n            }\n            break;\n          default:\n            return;\n        }\n      });\n      if (isSimulation) {\n        const outputRef = 100 * j;\n        const encodedPeekCall = Relayer.encodePeekChainedReferenceValue(\n          Relayer.toChainedReference(outputRef, false)\n        );\n        encodedCalls.push(encodedPeekCall);\n        outputIndexes.push(encodedCalls.indexOf(encodedPeekCall));\n      }\n      multiRequests.push(modelRequests);\n    });\n\n    return { multiRequests, encodedCalls, outputIndexes, deltas };\n  };\n\n  /**\n   * Creates a map of node address and total proportion. Used for the case where there may be multiple inputs using same token, e.g. DAI input to 2 pools.\n   * @param nodes nodes to consider.\n   */\n  static updateTotalProportions = (\n    nodes: Node[]\n  ): Record<string, BigNumber> => {\n    const totalProportions: Record<string, BigNumber> = {};\n    nodes.forEach((node) => {\n      if (!totalProportions[node.address])\n        totalProportions[node.address] = node.proportionOfParent;\n      else {\n        totalProportions[node.address] = totalProportions[node.address].add(\n          node.proportionOfParent\n        );\n      }\n    });\n    return totalProportions;\n  };\n\n  /**\n   * Uses relayer to approve itself to act in behalf of the user\n   *\n   * @param authorisation Encoded authorisation call.\n   * @returns relayer approval call\n   */\n  private createSetRelayerApproval = (authorisation: string): string => {\n    return Relayer.encodeSetRelayerApproval(this.relayer, true, authorisation);\n  };\n\n  static updateNodeAmount = (\n    node: Node,\n    tokensIn: string[],\n    amountsIn: string[],\n    totalProportions: Record<string, BigNumber>\n  ): Node => {\n    /*\n    An input node requires a real amount (not an outputRef) as it is first node in chain.\n    This amount will be used when chaining to parent.\n    Amounts are split proportionally between all inputs with same token.\n    */\n    const tokenIndex = tokensIn\n      .map((t) => t.toLowerCase())\n      .indexOf(node.address.toLowerCase());\n    if (tokenIndex === -1) {\n      node.index = '0';\n      return node;\n    }\n\n    // Calculate proportional split\n    const totalProportion = totalProportions[node.address];\n    const inputProportion = node.proportionOfParent\n      .mul((1e18).toString())\n      .div(totalProportion);\n    const inputAmount = inputProportion\n      .mul(amountsIn[tokenIndex])\n      .div((1e18).toString());\n    // Update index with actual value\n    node.index = inputAmount.toString();\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${node.proportionOfParent.toString()}\n    //   ${node.joinAction} (\n    //     Inputs: ${inputAmount.toString()}\n    //     OutputRef: ${node.index}\n    //   )`\n    // );\n    return node;\n  };\n\n  private createSwap = (\n    node: Node,\n    joinPathIndex: number,\n    expectedOut: string,\n    sender: string,\n    recipient: string,\n    isNativeAssetJoin: boolean,\n    isSimulation: boolean\n  ): {\n    modelRequest: SwapRequest;\n    encodedCall: string;\n    assets: string[];\n    amounts: string[];\n  } => {\n    // We only need swaps for main > linearBpt so shouldn't be more than token > token\n    if (node.children.length !== 1) throw new Error('Unsupported swap');\n    const tokenIn = node.children[0].address;\n    const amountIn = this.getOutputRefValue(joinPathIndex, node.children[0]);\n\n    // Single swap limits are always positive\n    // Swap within generalisedJoin is always exactIn, so use minAmountOut to set limit\n    const limit: string = expectedOut;\n\n    const assetIn =\n      isNativeAssetJoin && !isSimulation\n        ? this.replaceWrappedNativeAsset([tokenIn])[0]\n        : tokenIn;\n\n    const request: SingleSwap = {\n      poolId: node.id,\n      kind: SwapType.SwapExactIn,\n      assetIn,\n      assetOut: node.address,\n      amount: amountIn.value,\n      userData: '0x',\n    };\n\n    const fromInternalBalance = this.allImmediateChildrenSendToInternal(node);\n    const toInternalBalance = this.allSiblingsSendToInternal(node);\n\n    const funds: FundManagement = {\n      sender,\n      recipient,\n      fromInternalBalance,\n      toInternalBalance,\n    };\n\n    const outputReference = BigNumber.from(\n      this.getOutputRefValue(joinPathIndex, node).value\n    );\n\n    const value =\n      isNativeAssetJoin && !isSimulation\n        ? getEthValue([assetIn], [amountIn.value])\n        : Zero;\n\n    const call: Swap = {\n      request,\n      funds,\n      limit,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value,\n      outputReference,\n    };\n\n    const encodedCall = Relayer.encodeSwap(call);\n\n    debugLog(`\\nSwap:`);\n    debugLog(`${JSON.stringify(call)}`);\n    debugLog(`Partial value: ${JSON.stringify(call.value?.toString())}`);\n\n    const modelRequest = VaultModel.mapSwapRequest(call);\n\n    const hasChildInput = node.children.some((c) => c.joinAction === 'input');\n    // If node has no child input the swap is part of a chain and token in shouldn't be considered for user deltas\n    const userTokenIn = !hasChildInput ? '0' : amountIn.value;\n    // If node has parent the swap is part of a chain and BPT out shouldn't be considered for user deltas\n    const userBptOut =\n      node.parent != undefined\n        ? '0'\n        : BigNumber.from(expectedOut).mul(-1).toString(); // needs to be negative because it's handled by the vault model as an amount going out of the vault\n\n    const assets = [node.address, tokenIn];\n    const amounts = [userBptOut, userTokenIn];\n\n    return { modelRequest, encodedCall, assets, amounts };\n  };\n\n  private createJoinPool = (\n    node: Node,\n    joinPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string,\n    isNativeAssetJoin: boolean,\n    isSimulation: boolean\n  ): {\n    modelRequest: JoinPoolModelRequest;\n    encodedCall: string;\n    assets: string[];\n    amounts: string[];\n    minBptOut: string;\n  } => {\n    const inputTokens: string[] = [];\n    const inputAmts: string[] = [];\n\n    // inputTokens needs to include each asset even if it has 0 amount\n    node.children.forEach((child) => {\n      inputTokens.push(child.address);\n      // non-leaf joins should set input amounts only for children that are in their joinPath\n      if (this.shouldBeConsidered(child)) {\n        inputAmts.push(this.getOutputRefValue(joinPathIndex, child).value);\n      } else {\n        inputAmts.push('0');\n      }\n    });\n\n    if (node.type === PoolType.ComposableStable) {\n      // assets need to include the phantomPoolToken\n      inputTokens.push(node.address);\n      // need to add a placeholder so sorting works\n      inputAmts.push('0');\n    }\n\n    // sort inputs\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      inputTokens,\n      inputAmts\n    ) as [string[], string[]];\n\n    // userData amounts should not include the BPT of the pool being joined\n    let userDataAmounts = [];\n    const bptIndex = sortedTokens\n      .map((t) => t.toLowerCase())\n      .indexOf(node.address.toLowerCase());\n    if (bptIndex === -1) {\n      userDataAmounts = sortedAmounts;\n    } else {\n      userDataAmounts = [\n        ...sortedAmounts.slice(0, bptIndex),\n        ...sortedAmounts.slice(bptIndex + 1),\n      ];\n    }\n\n    let userData: string;\n    if (node.type === PoolType.Weighted) {\n      userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n        userDataAmounts,\n        minAmountOut\n      );\n    } else {\n      userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n        userDataAmounts,\n        minAmountOut\n      );\n    }\n\n    const value =\n      isNativeAssetJoin && !isSimulation\n        ? getEthValue(\n            this.replaceWrappedNativeAsset(sortedTokens),\n            sortedAmounts\n          )\n        : Zero;\n\n    const fromInternalBalance = this.allImmediateChildrenSendToInternal(node);\n\n    const call: EncodeJoinPoolInput = Relayer.formatJoinPoolInput({\n      poolId: node.id,\n      kind: 0,\n      sender,\n      recipient,\n      value,\n      outputReference: this.getOutputRefValue(joinPathIndex, node).value,\n      joinPoolRequest: {} as JoinPoolRequest,\n      assets:\n        isNativeAssetJoin && !isSimulation\n          ? this.replaceWrappedNativeAsset(sortedTokens)\n          : sortedTokens, // Must include BPT token\n      maxAmountsIn: sortedAmounts,\n      userData,\n      fromInternalBalance,\n    });\n    const encodedCall = Relayer.encodeJoinPool(call);\n\n    debugLog(`\\nJoin:`);\n    debugLog(JSON.stringify(call));\n    debugLog(`Partial value: ${JSON.stringify(call.value?.toString())}`);\n    const modelRequest = VaultModel.mapJoinPoolRequest(call);\n\n    const userAmountsTokenIn = sortedAmounts.map((a) =>\n      Relayer.isChainedReference(a) ? '0' : a\n    );\n    const userAmountOut = Relayer.isChainedReference(minAmountOut)\n      ? '0'\n      : minAmountOut;\n\n    const hasChildInput = node.children\n      .filter((c) => this.shouldBeConsidered(c))\n      .some((c) => c.joinAction === 'input');\n    // If node has no child input the join is part of a chain and amounts in shouldn't be considered for user deltas\n    const assets = !hasChildInput ? [] : sortedTokens;\n    const amounts = !hasChildInput ? [] : userAmountsTokenIn;\n    // If node has parent the join is part of a chain and shouldn't be considered for user deltas\n    const minBptOut =\n      node.parent != undefined\n        ? Zero.toString()\n        : Zero.sub(userAmountOut).toString(); // -ve because coming from Vault\n\n    return { modelRequest, encodedCall, assets, amounts, minBptOut };\n  };\n\n  private getOutputRefValue = (\n    joinPathIndex: number,\n    node: Node\n  ): { value: string; isRef: boolean } => {\n    if (node.joinAction === 'input') {\n      // Input nodes have their indexes set as the actual input amount, instead of a chained reference\n      return { value: node.index, isRef: false };\n    } else if (node.index !== '0' || !node.parent) {\n      // Root node (parent === undefined) has index zero, but should still pass chained reference as outputRef value\n      return {\n        value: Relayer.toChainedReference(\n          BigNumber.from(node.index).add(joinPathIndex * 100)\n        ).toString(),\n        isRef: true,\n      };\n    } else {\n      return {\n        value: '0',\n        isRef: true,\n      };\n    }\n  };\n\n  // Nodes with index 0 won't affect transactions so they shouldn't be considered\n  private shouldBeConsidered = (node: Node): boolean => {\n    return node.index !== '0';\n  };\n\n  // joinPool transaction always sends to non-internal balance\n  // input always behave as sending to non-internal balance\n  private sendsToInternalBalance = (node: Node): boolean => {\n    return node.joinAction !== 'input' && node.joinAction !== 'joinPool';\n  };\n\n  private allImmediateChildrenSendToInternal = (node: Node): boolean => {\n    const children = node.children.filter((c) => this.shouldBeConsidered(c));\n    if (children.length === 0) return false;\n    return (\n      children.filter((c) => this.sendsToInternalBalance(c)).length ===\n      children.length\n    );\n  };\n\n  private allSiblingsSendToInternal = (node: Node): boolean => {\n    if (!node.parent) return false;\n    const siblings = node.parent.children.filter((s) =>\n      this.shouldBeConsidered(s)\n    );\n    return (\n      siblings.filter((s) => this.sendsToInternalBalance(s)).length ===\n      siblings.length\n    );\n  };\n\n  private replaceWrappedNativeAsset = (tokens: string[]): string[] => {\n    const wrappedNativeAssetIndex = tokens.findIndex(\n      (t) => t.toLowerCase() === this.wrappedNativeAsset.toLowerCase()\n    );\n    return replace(tokens, wrappedNativeAssetIndex, AddressZero);\n  };\n}\n","import axios from 'axios';\nimport { AddressZero, MaxInt256 } from '@ethersproject/constants';\nimport { parseFixed } from '@ethersproject/bignumber';\n\nimport { networkAddresses } from '@/lib/constants/config';\nimport { BalancerTenderlyConfig } from '@/types';\n\ntype StateOverrides = {\n  [address: string]: { value: { [key: string]: string } };\n};\n\nexport default class TenderlyHelper {\n  private vaultAddress;\n  private tenderlyUrl;\n  private opts?;\n  private blockNumber: number | undefined;\n\n  constructor(private chainId: number, tenderlyConfig: BalancerTenderlyConfig) {\n    const { contracts } = networkAddresses(this.chainId);\n    this.vaultAddress = contracts.vault as string;\n    this.tenderlyUrl = `https://api.tenderly.co/api/v1/account/${tenderlyConfig.user}/project/${tenderlyConfig.project}/`;\n    this.opts = {\n      headers: {\n        'X-Access-Key': tenderlyConfig.accessKey,\n      },\n    };\n\n    this.blockNumber = tenderlyConfig.blockNumber;\n  }\n\n  simulateMulticall = async (\n    to: string,\n    data: string,\n    userAddress: string,\n    tokens: string[],\n    value = '0'\n  ): Promise<string> => {\n    const tokensOverrides = await this.encodeBalanceAndAllowanceOverrides(\n      userAddress,\n      tokens\n    );\n    const relayerApprovalOverride = await this.encodeRelayerApprovalOverride(\n      userAddress,\n      to\n    );\n    const encodedStateOverrides = {\n      ...tokensOverrides,\n      ...relayerApprovalOverride,\n    };\n    return this.simulateTransaction(\n      to,\n      data,\n      userAddress,\n      encodedStateOverrides,\n      value\n    );\n  };\n\n  simulateTransaction = async (\n    to: string,\n    data: string,\n    userAddress: string,\n    encodedStateOverrides: StateOverrides,\n    value: string\n  ): Promise<string> => {\n    // Map encoded-state response into simulate request body by replacing property names\n    const stateOverrides = Object.fromEntries(\n      Object.keys(encodedStateOverrides).map((address) => {\n        // Object.fromEntries require format [key, value] instead of {key: value}\n        return [address, { storage: encodedStateOverrides[address].value }];\n      })\n    );\n\n    // Set user balance to 1000 ETH to make sure the simulation doesn't fail due to insufficient balance\n    const state_objects = {\n      ...stateOverrides,\n      [userAddress]: {\n        balance: parseFixed('100', 18).toHexString(),\n      },\n    };\n\n    const body = {\n      // -- Standard TX fields --\n      network_id: this.chainId.toString(),\n      block_number: this.blockNumber,\n      from: userAddress,\n      to,\n      input: data,\n      // gas: 8000000,\n      // gas_price: '0',\n      value,\n      // -- Simulation config (tenderly specific) --\n      save_if_fails: true,\n      // save: true,\n      simulation_type: 'quick', // remove this while developing/debugging\n      state_objects,\n    };\n\n    const SIMULATE_URL = this.tenderlyUrl + 'simulate';\n\n    const resp = await axios.post(SIMULATE_URL, body, this.opts);\n\n    const simulatedTransactionOutput =\n      resp.data.transaction.transaction_info.call_trace.output;\n\n    return simulatedTransactionOutput;\n  };\n\n  // Encode relayer approval state override\n  encodeRelayerApprovalOverride = async (\n    userAddress: string,\n    relayerAddress: string\n  ): Promise<StateOverrides> => {\n    const stateOverrides: StateOverrides = {\n      [`${this.vaultAddress}`]: {\n        value: {\n          [`_approvedRelayers[${userAddress}][${relayerAddress}]`]:\n            true.toString(),\n        },\n      },\n    };\n\n    const encodedStateOverrides = await this.requestStateOverrides(\n      stateOverrides\n    );\n\n    return encodedStateOverrides;\n  };\n\n  // Encode token balances and allowances overrides to max value\n  encodeBalanceAndAllowanceOverrides = async (\n    userAddress: string,\n    tokens: string[]\n  ): Promise<StateOverrides> => {\n    const tokensWithoutNativeAsset = tokens.filter(\n      (token) => token !== AddressZero\n    );\n\n    if (tokensWithoutNativeAsset.length === 0) return {};\n\n    // Create balances and allowances overrides for each token address provided\n    let stateOverrides: StateOverrides = {};\n    tokensWithoutNativeAsset.forEach(\n      (token) =>\n        (stateOverrides = {\n          ...stateOverrides,\n          [`${token}`]: {\n            value: {\n              [`_balances[${userAddress}]`]: MaxInt256.toString(),\n              [`_allowances[${userAddress}][${this.vaultAddress}]`]:\n                MaxInt256.toString(),\n              [`balanceOf[${userAddress}]`]: MaxInt256.toString(),\n              [`allowance[${userAddress}][${this.vaultAddress}]`]:\n                MaxInt256.toString(),\n              [`balances[${userAddress}]`]: MaxInt256.toString(),\n              [`allowed[${userAddress}][${this.vaultAddress}]`]:\n                MaxInt256.toString(),\n            },\n          },\n        })\n    );\n\n    const encodedStateOverrides = await this.requestStateOverrides(\n      stateOverrides\n    );\n\n    if (\n      Object.keys(encodedStateOverrides).some((k) => {\n        return Object.keys(encodedStateOverrides[k].value).length !== 2;\n      })\n    )\n      throw new Error(\n        \"Couldn't encode state overrides - states should match the ones in the contracts\"\n      );\n\n    return encodedStateOverrides;\n  };\n\n  private requestStateOverrides = async (\n    stateOverrides: StateOverrides\n  ): Promise<StateOverrides> => {\n    const ENCODE_STATES_URL = this.tenderlyUrl + 'contracts/encode-states';\n    const body = {\n      networkID: this.chainId.toString(),\n      stateOverrides,\n    };\n\n    const encodedStatesResponse = await axios.post(\n      ENCODE_STATES_URL,\n      body,\n      this.opts\n    );\n    const encodedStateOverrides = encodedStatesResponse.data\n      .stateOverrides as StateOverrides;\n\n    if (\n      !encodedStateOverrides ||\n      Object.keys(encodedStateOverrides).length !==\n        Object.keys(stateOverrides).length\n    )\n      throw new Error(\n        \"Couldn't encode state overrides - contracts should be verified and whitelisted on Tenderly\"\n      );\n\n    return encodedStateOverrides;\n  };\n}\n","import { PoolDataService } from '@balancer-labs/sor';\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { JsonRpcSigner } from '@ethersproject/providers';\n\nimport TenderlyHelper from '@/lib/utils/tenderlyHelper';\nimport { BalancerNetworkConfig } from '@/types';\n\nimport { VaultModel, Requests } from '../vaultModel/vaultModel.module';\n\nexport enum SimulationType {\n  Tenderly,\n  VaultModel,\n  Static,\n}\n\n/**\n * Simulation module is responsible for simulating the results of a generalised\n * join or exit using different types of simulation, such as:\n * - Tenderly: uses Tenderly Simulation API (third party service)\n * - VaultModel: uses TS math, which may be less accurate (min. 99% accuracy)\n * - Static: uses staticCall, which is 100% accurate but requires vault approval\n *\n * This module allows a user to perform a simulation and check for expected\n * amounts out in order to make an informed decision on whether to proceed with\n * the transaction. These expected amounts out can be used as limits to prevent\n * frontrunning and ensure that the transaction will return minimum amounts out.\n */\n\nexport class Simulation {\n  private tenderlyHelper?: TenderlyHelper;\n  private vaultModel: VaultModel | undefined;\n  constructor(\n    networkConfig: BalancerNetworkConfig,\n    poolDataService?: PoolDataService\n  ) {\n    if (networkConfig.tenderly) {\n      this.tenderlyHelper = new TenderlyHelper(\n        networkConfig.chainId,\n        networkConfig.tenderly\n      );\n    }\n    if (!poolDataService) {\n      this.vaultModel = undefined;\n    } else {\n      this.vaultModel = new VaultModel(\n        poolDataService,\n        networkConfig.addresses.tokens.wrappedNativeAsset\n      );\n    }\n  }\n\n  simulateGeneralisedJoin = async (\n    to: string,\n    multiRequests: Requests[][],\n    encodedCall: string,\n    outputIndexes: number[],\n    userAddress: string,\n    tokensIn: string[],\n    signer: JsonRpcSigner,\n    simulationType: SimulationType,\n    value: string\n  ): Promise<string[]> => {\n    const amountsOut: string[] = [];\n    switch (simulationType) {\n      case SimulationType.Tenderly: {\n        if (!this.tenderlyHelper) {\n          throw new Error('Missing Tenderly config');\n        }\n        const simulationResult = await this.tenderlyHelper.simulateMulticall(\n          to,\n          encodedCall,\n          userAddress,\n          tokensIn,\n          value\n        );\n        amountsOut.push(...this.decodeResult(simulationResult, outputIndexes));\n        break;\n      }\n\n      case SimulationType.VaultModel: {\n        const requestResult = await this.simulateRequests(multiRequests);\n        amountsOut.push(...requestResult);\n        break;\n      }\n      case SimulationType.Static: {\n        const staticResult = await signer.call({\n          to,\n          data: encodedCall,\n          value,\n        });\n\n        try {\n          amountsOut.push(...this.decodeResult(staticResult, outputIndexes));\n        } catch (_) {\n          // decoding output failed, so we assume the response contains an error message and try to decode it instead\n          const decodedResponse = Buffer.from(\n            staticResult.split('x')[1],\n            'hex'\n          ).toString('utf8');\n          throw new Error(\n            `Transaction reverted with error: ${decodedResponse}`\n          );\n        }\n        break;\n      }\n      default:\n        throw new Error('Simulation type not supported');\n    }\n    return amountsOut;\n  };\n\n  simulateGeneralisedExit = async (\n    to: string,\n    multiRequests: Requests[][],\n    encodedCall: string,\n    outputIndexes: number[],\n    userAddress: string,\n    tokenIn: string,\n    signer: JsonRpcSigner,\n    simulationType: SimulationType\n  ): Promise<string[]> => {\n    const amountsOut: string[] = [];\n    switch (simulationType) {\n      case SimulationType.Tenderly: {\n        if (!this.tenderlyHelper) {\n          throw new Error('Missing Tenderly config');\n        }\n        const simulationResult = await this.tenderlyHelper.simulateMulticall(\n          to,\n          encodedCall,\n          userAddress,\n          [tokenIn]\n        );\n        amountsOut.push(...this.decodeResult(simulationResult, outputIndexes));\n        break;\n      }\n\n      case SimulationType.VaultModel: {\n        const requestResult = await this.simulateRequests(multiRequests);\n        amountsOut.push(...requestResult);\n        break;\n      }\n      case SimulationType.Static: {\n        const staticResult = await signer.call({\n          to,\n          data: encodedCall,\n        });\n        try {\n          amountsOut.push(...this.decodeResult(staticResult, outputIndexes));\n        } catch (_) {\n          // decoding output failed, so we assume the response contains an error message and try to decode it instead\n          const decodedResponse = Buffer.from(\n            staticResult.split('x')[1],\n            'hex'\n          ).toString('utf8');\n          throw new Error(\n            `Transaction reverted with error: ${decodedResponse}`\n          );\n        }\n        break;\n      }\n      default:\n        throw new Error('Simulation type not supported');\n    }\n    return amountsOut;\n  };\n\n  private decodeResult = (result: string, outputIndexes: number[]) => {\n    const multicallResult = defaultAbiCoder.decode(\n      ['bytes[]'],\n      result\n    )[0] as string[];\n\n    // Decode each root output\n    const amountsOut = outputIndexes.map((outputIndex) => {\n      const result = defaultAbiCoder.decode(\n        ['uint256'],\n        multicallResult[outputIndex]\n      );\n      return result.toString();\n    });\n\n    return amountsOut;\n  };\n\n  private simulateRequests = async (multiRequests: Requests[][]) => {\n    if (this.vaultModel === undefined)\n      throw new Error('Missing Vault Model Config.');\n    // make one multicall for each exitPath\n    // take only bptOut/tokenOut delta into account\n    const amountsOut: string[] = [];\n    for (const [i, requests] of multiRequests.entries()) {\n      const deltas = await this.vaultModel.multicall(requests, i === 0);\n      const tokenOutDeltas = Object.values(deltas).filter((d) => d.lt(0));\n      if (tokenOutDeltas.length === 0)\n        throw new Error('No delta found for token out.');\n      amountsOut.push(...tokenOutDeltas.map((d) => d.mul(-1).toString()));\n    }\n    return amountsOut;\n  };\n}\n","import { cloneDeep } from 'lodash';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { WeiPerEther, Zero } from '@ethersproject/constants';\nimport { JsonRpcSigner } from '@ethersproject/providers';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { BalancerRelayer__factory } from '@/contracts/factories/BalancerRelayer__factory';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { AssetHelpers, subSlippage } from '@/lib/utils';\nimport { PoolGraph, Node } from '@/modules/graph/graph';\nimport { Join } from '@/modules/joins/joins.module';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport {\n  EncodeUnwrapInput,\n  OutputReference,\n  Relayer,\n  EncodeBatchSwapInput,\n} from '@/modules/relayer/relayer.module';\nimport {\n  Simulation,\n  SimulationType,\n} from '@/modules/simulation/simulation.module';\nimport {\n  FundManagement,\n  SingleSwap,\n  Swap,\n  SwapType,\n  BatchSwapStep,\n} from '@/modules/swaps/types';\nimport { ExitPoolRequest as ExitPoolModelRequest } from '@/modules/vaultModel/poolModel/exit';\nimport {\n  BatchSwapRequest,\n  SwapRequest,\n} from '@/modules/vaultModel/poolModel/swap';\nimport { UnwrapRequest } from '@/modules/vaultModel/poolModel/unwrap';\nimport { Requests, VaultModel } from '@/modules/vaultModel/vaultModel.module';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport { getPoolAddress } from '@/pool-utils';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { BalancerNetworkConfig, ExitPoolRequest, PoolType } from '@/types';\nimport { Logger } from '@/lib/utils/logger';\n\nconst balancerRelayerInterface = BalancerRelayer__factory.createInterface();\n\nexport interface GeneralisedExitOutput {\n  to: string;\n  encodedCall: string;\n  tokensOut: string[];\n  expectedAmountsOut: string[];\n  minAmountsOut: string[];\n  priceImpact: string;\n}\n\nexport interface ExitInfo {\n  tokensOut: string[];\n  estimatedAmountsOut: string[];\n  priceImpact: string;\n  tokensToUnwrap: string[];\n}\n\n// Quickly switch useful debug logs on/off\nconst DEBUG = false;\n\nfunction debugLog(log: string) {\n  const logger = Logger.getInstance();\n  if (DEBUG) logger.info(log);\n}\n\nexport class Exit {\n  private wrappedNativeAsset: string;\n  private relayer: string;\n\n  constructor(\n    private poolGraph: PoolGraph,\n    networkConfig: BalancerNetworkConfig,\n    private simulationService: Simulation\n  ) {\n    const { tokens, contracts } = networkAddresses(networkConfig.chainId);\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n    this.relayer = contracts.balancerRelayer;\n  }\n\n  async getExitInfo(\n    poolId: string,\n    amountBptIn: string,\n    userAddress: string,\n    signer: JsonRpcSigner\n  ): Promise<{\n    tokensOut: string[];\n    estimatedAmountsOut: string[];\n    priceImpact: string;\n    tokensToUnwrap: string[];\n  }> {\n    debugLog(`\\n--- getExitInfo()`);\n    /*\n    Overall exit flow description:\n    - Create calls with 0 expected min amount for each token out\n    - static call (or V4 special call) to get actual amounts for each token out\n    - Apply slippage to amountsOut\n    - Recreate calls with minAmounts === actualAmountsWithSlippage\n    - Return minAmoutsOut, UI would use this to display to user\n    - Return updatedCalls, UI would use this to execute tx\n    */\n    const exit = await this.getExit(\n      poolId,\n      amountBptIn,\n      userAddress,\n      signer,\n      [],\n      SimulationType.VaultModel\n    );\n\n    return {\n      tokensOut: exit.tokensOut,\n      estimatedAmountsOut: exit.expectedAmountsOut,\n      priceImpact: exit.priceImpact,\n      tokensToUnwrap: exit.tokensToUnwrap,\n    };\n  }\n\n  async buildExitCall(\n    poolId: string,\n    amountBptIn: string,\n    userAddress: string,\n    slippage: string,\n    signer: JsonRpcSigner,\n    simulationType: SimulationType.Static | SimulationType.Tenderly,\n    authorisation?: string,\n    tokensToUnwrap?: string[]\n  ): Promise<{\n    to: string;\n    encodedCall: string;\n    tokensOut: string[];\n    expectedAmountsOut: string[];\n    minAmountsOut: string[];\n    priceImpact: string;\n  }> {\n    debugLog(\n      `\\n--- exitPool(): simulationType: ${simulationType} - tokensToUnwrap: ${tokensToUnwrap}`\n    );\n    /*\n    Overall exit flow description:\n    - Create calls with 0 expected min amount for each token out\n    - static call (or V4 special call) to get actual amounts for each token out\n    - Apply slippage to amountsOut\n    - Recreate calls with minAmounts === actualAmountsWithSlippage\n    - Return minAmoutsOut, UI would use this to display to user\n    - Return updatedCalls, UI would use this to execute tx\n    */\n\n    const exit = await this.getExit(\n      poolId,\n      amountBptIn,\n      userAddress,\n      signer,\n      tokensToUnwrap ?? [],\n      simulationType,\n      authorisation\n    );\n\n    const { minAmountsOutByExitPath, minAmountsOutByTokenOut } =\n      this.minAmountsOut(\n        exit.expectedAmountsOutByExitPath,\n        exit.expectedAmountsOut,\n        slippage\n      );\n\n    debugLog(`------------ Updating limits...`);\n    // Create calls with minimum expected amount out for each exit path\n    const { encodedCall, deltas } = await this.createCalls(\n      exit.exitPaths,\n      userAddress,\n      exit.isProportional,\n      minAmountsOutByExitPath,\n      authorisation\n    );\n\n    this.assertDeltas(\n      poolId,\n      deltas,\n      amountBptIn,\n      exit.tokensOut,\n      minAmountsOutByTokenOut\n    );\n\n    return {\n      to: this.relayer,\n      encodedCall,\n      tokensOut: exit.tokensOut,\n      expectedAmountsOut: exit.expectedAmountsOut,\n      minAmountsOut: minAmountsOutByTokenOut,\n      priceImpact: exit.priceImpact,\n    };\n  }\n\n  private async getExit(\n    poolId: string,\n    amountBptIn: string,\n    userAddress: string,\n    signer: JsonRpcSigner,\n    tokensToUnwrap: string[],\n    simulationType: SimulationType,\n    authorisation?: string\n  ): Promise<{\n    tokensToUnwrap: string[];\n    tokensOut: string[];\n    exitPaths: Node[][];\n    isProportional: boolean;\n    expectedAmountsOut: string[];\n    expectedAmountsOutByExitPath: string[];\n    priceImpact: string;\n  }> {\n    // Create nodes and order by breadth first - initially trys with no unwrapping\n    const orderedNodes = await this.poolGraph.getGraphNodes(\n      false,\n      poolId,\n      tokensToUnwrap\n    );\n\n    const isProportional = PoolGraph.isProportionalPools(orderedNodes);\n    debugLog(`\\nisProportional = ${isProportional}`);\n\n    let exitPaths: Node[][] = [];\n    let tokensOutByExitPath: string[] = [];\n    let tokensOut: string[] = [];\n\n    const outputNodes = orderedNodes.filter((n) => n.exitAction === 'output');\n    tokensOutByExitPath = outputNodes.map((n) => n.address.toLowerCase());\n\n    tokensOut = [...new Set(tokensOutByExitPath)].sort();\n\n    if (isProportional) {\n      // All proportional will have single path from root node, exiting proportionally by ref all the way to leafs\n      const path = orderedNodes.map((node, i) => {\n        // First node should exit with full BPT amount in\n        if (i === 0) node.index = amountBptIn;\n        return node;\n      });\n      exitPaths[0] = path;\n    } else {\n      // Create exit paths for each output node and splits amount in proportionally between them\n      exitPaths = this.getExitPaths(outputNodes, amountBptIn);\n    }\n\n    // Create calls with minimum expected amount out for each exit path\n    const {\n      multiRequests,\n      encodedCall: queryData,\n      outputIndexes,\n    } = await this.createCalls(\n      exitPaths,\n      userAddress,\n      isProportional,\n      undefined,\n      authorisation\n    );\n\n    const expectedAmountsOutByExitPath = await this.amountsOutByExitPath(\n      userAddress,\n      multiRequests,\n      queryData,\n      orderedNodes[0].address,\n      outputIndexes,\n      signer,\n      simulationType\n    );\n\n    const tokensWithInsufficientBalance = outputNodes\n      .filter((outputNode, i) =>\n        BigNumber.from(expectedAmountsOutByExitPath[i]).gt(outputNode.balance)\n      )\n      .map((node) => node.address.toLowerCase());\n\n    if (\n      tokensToUnwrap.some((t) =>\n        tokensWithInsufficientBalance.includes(t.toLowerCase())\n      )\n    ) {\n      /**\n       * This means there is not enough balance to exit to main or wrapped tokens only\n       */\n      throw new Error(\n        'Insufficient pool balance to perform generalised exit - try exitting with smaller amounts'\n      );\n    } else if (tokensWithInsufficientBalance.length > 0) {\n      return await this.getExit(\n        poolId,\n        amountBptIn,\n        userAddress,\n        signer,\n        [...new Set(tokensWithInsufficientBalance)].sort(),\n        simulationType,\n        authorisation\n      );\n    } else {\n      const expectedAmountsOut = this.amountsOutByTokenOut(\n        tokensOut,\n        tokensOutByExitPath,\n        expectedAmountsOutByExitPath\n      );\n\n      const priceImpact = await this.calculatePriceImpact(\n        poolId,\n        this.poolGraph,\n        tokensOut,\n        expectedAmountsOut,\n        amountBptIn\n      );\n\n      return {\n        tokensToUnwrap,\n        tokensOut,\n        exitPaths,\n        isProportional,\n        expectedAmountsOut,\n        expectedAmountsOutByExitPath,\n        priceImpact,\n      };\n    }\n  }\n\n  /*\n  (From Fernando)\n  1. Given a bpt amount in find the expect token amounts out (proportionally)\n  2. Uses bptZeroPi = _bptForTokensZeroPriceImpact (the same is used for joins too)\n  3. PI = bptAmountIn / bptZeroPi - 1\n  */\n  private async calculatePriceImpact(\n    poolId: string,\n    poolGraph: PoolGraph,\n    tokensOut: string[],\n    amountsOut: string[],\n    amountBptIn: string\n  ): Promise<string> {\n    // Create nodes for each pool/token interaction and order by breadth first\n    const orderedNodesForJoin = await poolGraph.getGraphNodes(true, poolId, []);\n    const joinPaths = Join.getJoinPaths(\n      orderedNodesForJoin,\n      tokensOut,\n      amountsOut\n    );\n    const totalBptZeroPi = Join.totalBptZeroPriceImpact(joinPaths);\n    const priceImpact = calcPriceImpact(\n      BigInt(amountBptIn),\n      totalBptZeroPi.toBigInt(),\n      false\n    ).toString();\n    return priceImpact;\n  }\n\n  private assertDeltas(\n    poolId: string,\n    deltas: Record<string, BigNumber>,\n    bptIn: string,\n    tokensOut: string[],\n    amountsOut: string[]\n  ): void {\n    const poolAddress = getPoolAddress(poolId);\n    const outDiff = deltas[poolAddress.toLowerCase()].sub(bptIn);\n\n    if (outDiff.abs().gt(3)) {\n      console.error(\n        `exit assertDeltas, bptIn: `,\n        poolAddress,\n        bptIn,\n        deltas[poolAddress.toLowerCase()]?.toString()\n      );\n      throw new BalancerError(BalancerErrorCode.EXIT_DELTA_AMOUNTS);\n    }\n    delete deltas[poolAddress.toLowerCase()];\n\n    tokensOut.forEach((token, i) => {\n      const diff = deltas[token.toLowerCase()].add(amountsOut[i]);\n      if (diff.abs().gt(1)) {\n        console.error(\n          `exit assertDeltas, tokenOut: `,\n          token,\n          amountsOut[i],\n          deltas[token.toLowerCase()]?.toString()\n        );\n        throw new BalancerError(BalancerErrorCode.EXIT_DELTA_AMOUNTS);\n      }\n      delete deltas[token.toLowerCase()];\n    });\n\n    for (const token in deltas) {\n      if (deltas[token].toString() !== '0') {\n        console.error(\n          `exit assertDeltas, non-input token should be 0: `,\n          token,\n          deltas[token].toString()\n        );\n        throw new BalancerError(BalancerErrorCode.EXIT_DELTA_AMOUNTS);\n      }\n    }\n  }\n\n  // Query amounts out through static call and return decoded result\n  private amountsOutByExitPath = async (\n    userAddress: string,\n    multiRequests: Requests[][],\n    callData: string,\n    tokenIn: string,\n    outputIndexes: number[],\n    signer: JsonRpcSigner,\n    simulationType: SimulationType\n  ): Promise<string[]> => {\n    const amountsOutByExitPath =\n      await this.simulationService.simulateGeneralisedExit(\n        this.relayer,\n        multiRequests,\n        callData,\n        outputIndexes,\n        userAddress,\n        tokenIn,\n        signer,\n        simulationType\n      );\n\n    return amountsOutByExitPath;\n  };\n\n  // Aggregate amounts out by exit path into amounts out by token out\n  private amountsOutByTokenOut = (\n    tokensOut: string[],\n    tokensOutByExitPath: string[],\n    expectedAmountsOutByExitPath: string[]\n  ) => {\n    // Aggregate amountsOutByExitPath into expectedAmountsOut\n    const expectedAmountsOutMap: Record<string, BigNumber> = {};\n    tokensOutByExitPath.forEach(\n      (tokenOut, i) =>\n        (expectedAmountsOutMap[tokenOut] = (\n          expectedAmountsOutMap[tokenOut] ?? Zero\n        ).add(expectedAmountsOutByExitPath[i]))\n    );\n    const expectedAmountsOut = tokensOut.map((tokenOut) =>\n      expectedAmountsOutMap[tokenOut].toString()\n    );\n\n    return expectedAmountsOut;\n  };\n\n  // Apply slippage tolerance to expected amounts out\n  private minAmountsOut = (\n    expectedAmountsOutByExitPath: string[],\n    expectedAmountsOutByTokenOut: string[],\n    slippage: string\n  ) => {\n    // Apply slippage tolerance on expected amount out for each exit path\n    const minAmountsOutByExitPath = expectedAmountsOutByExitPath.map(\n      (expectedAmountOut) =>\n        subSlippage(\n          BigNumber.from(expectedAmountOut),\n          BigNumber.from(slippage)\n        ).toString()\n    );\n\n    // Apply slippage tolerance on expected amount out for each token out\n    const minAmountsOutByTokenOut = expectedAmountsOutByTokenOut.map(\n      (expectedAmountOut) =>\n        subSlippage(\n          BigNumber.from(expectedAmountOut),\n          BigNumber.from(slippage)\n        ).toString()\n    );\n\n    return { minAmountsOutByExitPath, minAmountsOutByTokenOut };\n  };\n\n  // Create one exit path for each output node\n  private getExitPaths = (outputNodes: Node[], amountIn: string): Node[][] => {\n    const exitPaths = outputNodes.map((outputNode) => {\n      const exitPath = [outputNode];\n      while (exitPath[0].parent) {\n        exitPath.unshift(cloneDeep(exitPath[0].parent));\n      }\n      /*\n      The input/root node requires a real amount (not a reference/index) as it is first node in chain.\n      This amount will be used when chaining to children.\n      */\n      exitPath[0].index = exitPath[exitPath.length - 1].proportionOfParent\n        .mul(amountIn)\n        .div(WeiPerEther)\n        .toString();\n      return exitPath;\n    });\n\n    /*\n    Amounts in for exit paths should be adjusted after caculated to fix eventual rounding issues\n    */\n    // Sum amountIn for each exit path\n    const amountsInSum = exitPaths.reduce((accumulator, currentExitPath) => {\n      const amountInForCurrentExitPath = currentExitPath[0].index;\n      return BigNumber.from(amountInForCurrentExitPath).add(accumulator);\n    }, Zero);\n    // Compare total amountIn with sum of calculated amountIn for each exit path\n    const amountsInDiff = BigNumber.from(amountIn).sub(amountsInSum);\n    // Add diff to last exit path amountIn\n    exitPaths[exitPaths.length - 1][0].index = amountsInDiff\n      .add(exitPaths[exitPaths.length - 1][0].index)\n      .toString();\n\n    return exitPaths;\n  };\n\n  private async createCalls(\n    exitPaths: Node[][],\n    userAddress: string,\n    isProportional: boolean,\n    minAmountsOut?: string[],\n    authorisation?: string\n  ): Promise<{\n    multiRequests: Requests[][];\n    encodedCall: string;\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  }> {\n    const { multiRequests, calls, outputIndexes, deltas } =\n      this.createActionCalls(\n        cloneDeep(exitPaths),\n        userAddress,\n        isProportional,\n        minAmountsOut\n      );\n\n    if (authorisation) {\n      calls.unshift(\n        Relayer.encodeSetRelayerApproval(this.relayer, true, authorisation)\n      );\n    }\n\n    const encodedCall = balancerRelayerInterface.encodeFunctionData(\n      'multicall',\n      [calls]\n    );\n\n    return {\n      multiRequests,\n      encodedCall,\n      outputIndexes: authorisation\n        ? outputIndexes.map((i) => i + 1)\n        : outputIndexes,\n      deltas,\n    };\n  }\n\n  private updateDeltas(\n    deltas: Record<string, BigNumber>,\n    assets: string[],\n    amounts: string[]\n  ): Record<string, BigNumber> {\n    assets.forEach((t, i) => {\n      const asset = t.toLowerCase();\n      if (!deltas[asset]) deltas[asset] = Zero;\n      deltas[asset] = deltas[asset].add(amounts[i]);\n    });\n    return deltas;\n  }\n\n  private createActionCalls(\n    exitPaths: Node[][],\n    userAddress: string,\n    isProportional: boolean,\n    minAmountsOut?: string[]\n  ): {\n    multiRequests: Requests[][];\n    calls: string[];\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  } {\n    const multiRequests: Requests[][] = [];\n    const calls: string[] = [];\n    const outputIndexes: number[] = [];\n    const isPeek = !minAmountsOut;\n    const deltas: Record<string, BigNumber> = {};\n\n    const getSenderAddress = (exitPath: Node[], node: Node) => {\n      // Calls from root node are sent by the user\n      if (!node.parent) return userAddress;\n      // Otherwise sent by the parent's recipient\n      return getRecipientAddress(exitPath, node.parent);\n    };\n\n    const getRecipientAddress = (exitPath: Node[], node: Node) => {\n      // Always send to user on calls that contain outputs, otherwise send to relayer\n      const exitChildren = node.children.filter((child) =>\n        exitPath.map((n) => n.index).includes(child.index)\n      );\n      const hasOutputChild = exitChildren.some(\n        (c) => c.exitAction === 'output'\n      );\n      return hasOutputChild ? userAddress : this.relayer;\n    };\n\n    // Create actions for each Node and return in multicall array\n\n    exitPaths.forEach((exitPath, i) => {\n      const modelRequests: Requests[] = [];\n      const outputNodes = exitPath.filter(\n        (node) => node.exitAction === 'output'\n      );\n      exitPath.forEach((node) => {\n        // Find the exit child node\n        const exitChild = node.children.find((child) =>\n          exitPath.map((n) => n.index).includes(child.index)\n        );\n\n        const sender = getSenderAddress(exitPath, node);\n        const recipient = getRecipientAddress(exitPath, node);\n\n        const exitChildren = node.children.filter((child) =>\n          exitPath.map((n) => n.index).includes(child.index)\n        );\n        // An action that has either outputs or unwraps as child actions is the last action where we're able to set limits on expected output amounts\n        const isLastActionWithLimits = exitChildren.some(\n          (c) => c.exitAction === 'output' || c.exitAction === 'unwrap'\n        );\n\n        // Last calls will use minAmountsOut to protect user. Middle calls can safely have 0 minimum as tx will revert if last fails.\n        let minAmountOut = '0';\n        const minAmountsOutProportional = Array(node.children.length).fill('0');\n        if (minAmountsOut && isLastActionWithLimits) {\n          if (isProportional) {\n            // Proportional exits have a minAmountOut for each output node within a single exit path\n\n            /**\n             * minAmountsOut is related to the whole multicall transaction, while\n             * minAmountsOutProportional is related only to the current node/transaction\n             * This section is responsible for mapping each minAmountOut to their\n             * respective position on the minAmountsOutProportional array\n             * TODO: extract to a function so it's easier to understand\n             */\n            node.children.forEach((child, i) => {\n              let outputChildIndex: number;\n              if (child.exitAction === 'unwrap') {\n                outputChildIndex = outputNodes.indexOf(child.children[0]);\n                minAmountOut = WeiPerEther.mul(minAmountsOut[outputChildIndex])\n                  .div(child.priceRate)\n                  .toString();\n              } else if (child.exitAction === 'output') {\n                outputChildIndex = outputNodes.indexOf(child);\n                minAmountOut = minAmountsOut[outputChildIndex];\n              } else {\n                minAmountOut = '0'; // clears minAmountOut if it's not an output or unwrap\n              }\n              minAmountsOutProportional[i] = minAmountOut;\n            });\n          } else {\n            // Non-proportional exits have a minAmountOut for each exit path\n            if (exitChild?.exitAction === 'unwrap') {\n              minAmountOut = WeiPerEther.mul(minAmountsOut[i])\n                .div(exitChild.priceRate)\n                .toString();\n            } else {\n              minAmountOut = minAmountsOut[i];\n            }\n          }\n        }\n\n        switch (node.exitAction) {\n          case 'unwrap': {\n            const { modelRequest, encodedCall, assets, amounts } =\n              this.createUnwrap(\n                node,\n                exitChild as Node,\n                i,\n                minAmountOut,\n                sender,\n                recipient\n              );\n            modelRequests.push(modelRequest);\n            calls.push(encodedCall);\n            this.updateDeltas(deltas, assets, amounts);\n            break;\n          }\n          case 'batchSwap': {\n            const { modelRequest, encodedCall, assets, amounts } =\n              this.createSwap(\n                node,\n                exitChild as Node,\n                i,\n                minAmountOut,\n                sender,\n                recipient\n              );\n            modelRequests.push(modelRequest);\n            calls.push(encodedCall);\n            this.updateDeltas(deltas, assets, amounts);\n            break;\n          }\n          case 'exitPool': {\n            let exit;\n            if (isProportional) {\n              exit = this.createExitPoolProportional(\n                node,\n                minAmountsOutProportional,\n                sender,\n                recipient\n              );\n            } else {\n              exit = this.createExitPool(\n                node,\n                exitChild as Node,\n                i,\n                minAmountOut,\n                sender,\n                recipient\n              );\n            }\n            const { modelRequest, encodedCall, bptIn, tokensOut, amountsOut } =\n              exit;\n            modelRequests.push(modelRequest);\n            calls.push(encodedCall);\n            this.updateDeltas(\n              deltas,\n              [node.address, ...tokensOut],\n              [bptIn, ...amountsOut]\n            );\n            break;\n          }\n          case 'output':\n            if (isPeek) {\n              calls.push(\n                Relayer.encodePeekChainedReferenceValue(\n                  Relayer.toChainedReference(\n                    this.getOutputRef(i, node.index),\n                    false\n                  )\n                )\n              );\n              outputIndexes.push(calls.length - 1);\n            }\n            break;\n          default:\n            return;\n        }\n      });\n      multiRequests.push(modelRequests);\n    });\n\n    return { multiRequests, calls, outputIndexes, deltas };\n  }\n\n  private createUnwrap = (\n    node: Node,\n    exitChild: Node,\n    exitPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string\n  ): {\n    modelRequest: UnwrapRequest;\n    encodedCall: string;\n    assets: string[];\n    amounts: string[];\n  } => {\n    const amount = Relayer.toChainedReference(\n      this.getOutputRef(exitPathIndex, node.index)\n    ).toString();\n    const outputReference = Relayer.toChainedReference(\n      this.getOutputRef(exitPathIndex, exitChild.index)\n    );\n\n    const linearPoolType = node.parent?.type as string;\n\n    const call: EncodeUnwrapInput = {\n      wrappedToken: node.address,\n      sender,\n      recipient,\n      amount,\n      outputReference,\n    };\n\n    const encodedCall = Relayer.encodeUnwrap(call, linearPoolType);\n\n    debugLog(`linear type: , ${linearPoolType}`);\n    debugLog('\\nUwrap:');\n    debugLog(JSON.stringify(call));\n\n    const modelRequest = VaultModel.mapUnwrapRequest(\n      amount,\n      outputReference,\n      node.parent?.id as string // linear pool id\n    );\n\n    const assets = [exitChild.address];\n    const amounts = [Zero.sub(minAmountOut).toString()]; // needs to be negative because it's handled by the vault model as an amount going out of the vault\n    return { modelRequest, encodedCall, assets, amounts };\n  };\n\n  private createSwap(\n    node: Node,\n    exitChild: Node,\n    exitPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string\n  ): {\n    modelRequest: SwapRequest;\n    encodedCall: string;\n    assets: string[];\n    amounts: string[];\n  } {\n    const isRootNode = !node.parent;\n    const amountIn = isRootNode\n      ? node.index\n      : Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, node.index)\n        ).toString();\n\n    const tokenOut = exitChild.address;\n    const assets = [tokenOut, node.address];\n\n    // Single swap limits are always positive\n    // Swap within generalisedExit is always exactIn, so use minAmountOut to set limit\n    const limit: string = minAmountOut;\n\n    const request: SingleSwap = {\n      poolId: node.id,\n      kind: SwapType.SwapExactIn,\n      assetIn: node.address,\n      assetOut: tokenOut,\n      amount: amountIn,\n      userData: '0x',\n    };\n\n    const fromInternalBalance = this.receivesFromInternal(node);\n    const toInternalBalance = this.receivesFromInternal(exitChild);\n\n    const funds: FundManagement = {\n      sender,\n      recipient,\n      fromInternalBalance,\n      toInternalBalance,\n    };\n\n    const outputReference = Relayer.toChainedReference(\n      this.getOutputRef(exitPathIndex, exitChild.index)\n    );\n\n    const call: Swap = {\n      request,\n      funds,\n      limit,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0', // TODO: check if swap with ETH is possible in this case and handle it\n      outputReference,\n    };\n    debugLog('\\nSwap:');\n    debugLog(JSON.stringify(call));\n\n    const encodedCall = Relayer.encodeSwap(call);\n\n    const modelRequest = VaultModel.mapSwapRequest(call);\n\n    // If node isn't rootNode, the swap is part of a chain and shouldn't be considered for user deltas\n    const bptIn = !isRootNode ? '0' : amountIn;\n    // If child exit action is not output, the swap is part of a chain and shouldn't be considered for user deltas\n    const userTokenOutAmount =\n      exitChild.exitAction !== 'output'\n        ? '0'\n        : BigNumber.from(minAmountOut).mul(-1).toString(); // needs to be negative because it's handled by the vault model as an amount going out of the vault\n    const amounts = [userTokenOutAmount, bptIn];\n\n    return { modelRequest, encodedCall, assets, amounts };\n  }\n\n  private createBatchSwap(\n    node: Node,\n    exitChildren: Node[],\n    exitPathIndex: number,\n    minAmountsOut: string[],\n    sender: string,\n    recipient: string\n  ): {\n    modelRequest: BatchSwapRequest;\n    encodedCall: string;\n    assets: string[];\n    amounts: string[];\n  } {\n    const isRootNode = !node.parent;\n    const amountIn = isRootNode\n      ? node.index\n      : Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, node.index)\n        ).toString();\n\n    const tokensOut = exitChildren.map((n) => n.address);\n    const assets = [...tokensOut, node.address];\n    // TODO - setting these right?\n    const limits = [...minAmountsOut];\n    limits.push(amountIn);\n    const batchSwapSteps: BatchSwapStep[] = [];\n    const outputReferences: OutputReference[] = [];\n    exitChildren.forEach((child, i) => {\n      // TODO - Is this correct?\n      const amount = child.proportionOfParent\n        .mul(amountIn)\n        .div(WeiPerEther)\n        .toString();\n      const swapStep: BatchSwapStep = {\n        poolId: node.id,\n        assetInIndex: assets.length - 1,\n        assetOutIndex: i,\n        amount,\n        userData: '0x',\n      };\n      batchSwapSteps.push(swapStep);\n      // TODO - Is this right?\n      outputReferences.push({\n        index: i,\n        key: Relayer.toChainedReference(this.getOutputRef(0, child.index)),\n      });\n    });\n\n    const total = batchSwapSteps.reduce((acc, swap) => {\n      return acc.add(swap.amount);\n    }, BigNumber.from(0));\n    const dust = BigNumber.from(amountIn).sub(total);\n    batchSwapSteps[0].amount = dust.add(batchSwapSteps[0].amount).toString();\n\n    const fromInternalBalance = this.receivesFromInternal(node);\n    // TODO - This is assuming that all exit to same, is this right?\n    const toInternalBalance = this.receivesFromInternal(exitChildren[0]);\n\n    const funds: FundManagement = {\n      sender,\n      recipient,\n      fromInternalBalance,\n      toInternalBalance,\n    };\n\n    const call: EncodeBatchSwapInput = {\n      swapType: SwapType.SwapExactIn,\n      swaps: batchSwapSteps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0', // TODO: check if swap with ETH is possible in this case and handle it\n      outputReferences,\n    };\n    debugLog('\\nBatchSwap:');\n    debugLog(JSON.stringify(call));\n\n    const encodedCall = Relayer.encodeBatchSwap(call);\n\n    const modelRequest = VaultModel.mapBatchSwapRequest(call);\n\n    // If node isn't rootNode, the swap is part of a chain and shouldn't be considered for user deltas\n    const bptIn = !isRootNode ? '0' : amountIn;\n    // If child exit action is not output, the swap is part of a chain and shouldn't be considered for user deltas\n    const userTokensOut = exitChildren.map((child, i) => {\n      const userTokenOutAmount =\n        child.exitAction !== 'output'\n          ? '0'\n          : BigNumber.from(minAmountsOut[i]).mul(-1).toString(); // needs to be negative because it's handled by the vault model as an amount going out of the vault\n      return userTokenOutAmount;\n    });\n\n    const amounts = [...userTokensOut, bptIn];\n\n    return { modelRequest, encodedCall, assets, amounts };\n  }\n\n  private createExitPool(\n    node: Node,\n    exitChild: Node,\n    exitPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string\n  ): {\n    modelRequest: ExitPoolModelRequest;\n    encodedCall: string;\n    bptIn: string;\n    tokensOut: string[];\n    amountsOut: string[];\n  } {\n    const tokenOut = exitChild.address;\n    const isRootNode = !node.parent;\n    const amountIn = isRootNode\n      ? node.index\n      : Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, node.index)\n        ).toString();\n\n    const tokensOut: string[] = [];\n    const amountsOut: string[] = [];\n\n    // tokensOut needs to include each asset even if it has 0 amount\n    node.children.forEach((child) => {\n      tokensOut.push(child.address);\n      amountsOut.push(child.address === tokenOut ? minAmountOut : '0');\n    });\n\n    if (node.type === PoolType.ComposableStable) {\n      // assets need to include the phantomPoolToken\n      tokensOut.push(node.address);\n      // need to add a placeholder so sorting works\n      amountsOut.push('0');\n    }\n\n    // sort inputs\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // userData amounts should not include the BPT of the pool being joined\n    let userDataTokens = [];\n    const bptIndex = sortedTokens\n      .map((t) => t.toLowerCase())\n      .indexOf(node.address.toLowerCase());\n    if (bptIndex === -1) {\n      userDataTokens = sortedTokens;\n    } else {\n      userDataTokens = [\n        ...sortedTokens.slice(0, bptIndex),\n        ...sortedTokens.slice(bptIndex + 1),\n      ];\n    }\n\n    let userData: string;\n    if (node.type === PoolType.Weighted) {\n      userData = WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n        amountIn,\n        userDataTokens.indexOf(tokenOut)\n      );\n    } else {\n      userData = StablePoolEncoder.exitExactBPTInForOneTokenOut(\n        amountIn,\n        userDataTokens.indexOf(tokenOut)\n      );\n    }\n\n    const outputReferences = [\n      {\n        index: sortedTokens\n          .map((t) => t.toLowerCase())\n          .indexOf(tokenOut.toLowerCase()),\n        key: Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, exitChild.index)\n        ),\n      },\n    ];\n\n    const toInternalBalance = this.receivesFromInternal(exitChild);\n\n    const call = Relayer.formatExitPoolInput({\n      poolId: node.id,\n      poolKind: 0,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n      assets: sortedTokens,\n      minAmountsOut: sortedAmounts,\n      userData,\n      toInternalBalance,\n    });\n    debugLog('\\nExit:');\n    debugLog(JSON.stringify(call));\n\n    const encodedCall = Relayer.encodeExitPool(call);\n    const modelRequest = VaultModel.mapExitPoolRequest(call);\n\n    const userAmountTokensOut = sortedAmounts.map((a) =>\n      Relayer.isChainedReference(a) ? '0' : Zero.sub(a).toString()\n    );\n    const userBptIn = Relayer.isChainedReference(amountIn) ? '0' : amountIn;\n    // If node isn't rootNode, the exit is part of a chain and shouldn't be considered for user deltas\n    const deltaBptIn = !isRootNode ? Zero.toString() : userBptIn;\n    // // If child exit action is not output, the exit is part of a chain and shouldn't be considered for user deltas\n    const deltaTokensOut =\n      exitChild.exitAction !== 'output' ? [] : sortedTokens;\n    const deltaAmountsOut =\n      exitChild.exitAction !== 'output' ? [] : userAmountTokensOut;\n\n    return {\n      modelRequest,\n      encodedCall,\n      bptIn: deltaBptIn,\n      tokensOut: deltaTokensOut,\n      amountsOut: deltaAmountsOut,\n    };\n  }\n\n  private createExitPoolProportional(\n    node: Node,\n    minAmountsOut: string[],\n    sender: string,\n    recipient: string\n  ): {\n    modelRequest: ExitPoolModelRequest;\n    encodedCall: string;\n    bptIn: string;\n    tokensOut: string[];\n    amountsOut: string[];\n  } {\n    const isRootNode = !node.parent;\n    const amountIn = isRootNode\n      ? node.index\n      : Relayer.toChainedReference(this.getOutputRef(0, node.index)).toString();\n\n    const tokensOut = node.children.map((child) => child.address);\n    const amountsOut = [...minAmountsOut];\n\n    if (node.type === PoolType.ComposableStable) {\n      // assets need to include the phantomPoolToken\n      tokensOut.push(node.address);\n      // need to add a placeholder so sorting works\n      amountsOut.push('0');\n    }\n\n    // TODO: we shoule consider let the graph handle sorting instead of manipulating\n    // token order within actions - specially now that we have different sorting\n    // cases and that the subgraph is already handling them properly\n\n    // sort inputs\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    let userData: string;\n    if (node.type === PoolType.Weighted) {\n      userData = WeightedPoolEncoder.exitExactBPTInForTokensOut(amountIn);\n    } else if (node.type === PoolType.ComposableStable) {\n      userData =\n        ComposableStablePoolEncoder.exitExactBPTInForAllTokensOut(amountIn);\n    } else {\n      // TODO: double check if it's ok to set the Stable Pool Encoder as the default/else case\n      userData = StablePoolEncoder.exitExactBPTInForTokensOut(amountIn);\n    }\n\n    const outputReferences = node.children.map((child) => {\n      return {\n        index: sortedTokens\n          .map((t) => t.toLowerCase())\n          .indexOf(child.address.toLowerCase()),\n        key: Relayer.toChainedReference(this.getOutputRef(0, child.index)),\n      };\n    });\n    // We have to use correct pool type based off following from Relayer:\n    // enum PoolKind { WEIGHTED, LEGACY_STABLE, COMPOSABLE_STABLE, COMPOSABLE_STABLE_V2 }\n    // (note only Weighted and COMPOSABLE_STABLE_V2 will support proportional exits)\n    let kind = 0;\n    if (node.type === PoolType.ComposableStable) {\n      kind = 3;\n    }\n\n    const allChildrenReceiveFromInternal = node.children.every((child) =>\n      this.receivesFromInternal(child)\n    );\n\n    const call = Relayer.formatExitPoolInput({\n      poolId: node.id,\n      poolKind: kind,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n      assets: sortedTokens,\n      minAmountsOut: sortedAmounts,\n      userData,\n      toInternalBalance: allChildrenReceiveFromInternal,\n    });\n    debugLog('\\nExitProportional:');\n    debugLog(JSON.stringify(call));\n    const encodedCall = Relayer.encodeExitPool(call);\n    const modelRequest = VaultModel.mapExitPoolRequest(call);\n\n    const userAmountTokensOut = sortedAmounts.map((a) =>\n      Relayer.isChainedReference(a) ? '0' : Zero.sub(a).toString()\n    );\n    const userBptIn = Relayer.isChainedReference(amountIn) ? '0' : amountIn;\n    // If current node is the root node the exit the delta BPT in should be considered for user deltas\n    const deltaBptIn = isRootNode ? userBptIn : Zero.toString();\n    // If the respective child node is an output, it should be considered for user deltas\n    const deltaTokensOut = sortedTokens.filter((t) =>\n      node.children\n        .filter((c) => c.exitAction === 'output')\n        .map((c) => c.address)\n        .includes(t)\n    );\n    const deltaAmountsOut = userAmountTokensOut.filter((_, i) =>\n      deltaTokensOut.includes(sortedTokens[i])\n    );\n\n    return {\n      modelRequest,\n      encodedCall,\n      bptIn: deltaBptIn,\n      tokensOut: deltaTokensOut,\n      amountsOut: deltaAmountsOut,\n    };\n  }\n\n  private getOutputRef = (exitPathIndex: number, nodeIndex: string): number => {\n    return exitPathIndex * 100 + parseInt(nodeIndex);\n  };\n\n  // node without parent is the root node and it receives from non-internal balance\n  // exitPool always expects amounts from non-internal balance\n  // output always behave as receiving from non-internal balance\n  // others should always receive from internal balance\n  private receivesFromInternal = (node: Node): boolean => {\n    if (!node.parent) return false;\n    return (\n      node.exitAction !== 'output' &&\n      node.exitAction !== 'unwrap' &&\n      node.exitAction !== 'exitPool'\n    );\n  };\n}\n","/**\n * Calculates pool fees\n *\n * 1. Pool fees in last 24hrs\n */\nimport { isLessThan24Hours } from '@/lib/utils/time';\nimport { Pool, Findable, PoolAttribute } from '@/types';\n\nexport class PoolVolume {\n  constructor(\n    private yesterdaysPools: Findable<Pool, PoolAttribute> | undefined\n  ) {}\n\n  // 🚨 this is adding 1 call to get yesterday's block height and 2nd call to fetch yesterday's pools data from subgraph\n  // TODO: find a better data source for that eg. add blocks to graph, replace with a database, or dune\n  async last24h(pool: Pool): Promise<number> {\n    let yesterdaysPool;\n    if (this.yesterdaysPools) {\n      yesterdaysPool = await this.yesterdaysPools.find(pool.id);\n    }\n\n    if (!pool.totalSwapVolume) {\n      return 0;\n    }\n\n    if (!yesterdaysPool?.totalSwapVolume) {\n      // Process edge case when pool creation time is less that 24h\n      if (pool.createTime && isLessThan24Hours(pool.createTime)) {\n        return parseFloat(pool.totalSwapVolume);\n      }\n      return 0;\n    }\n\n    return (\n      parseFloat(pool.totalSwapVolume) -\n      parseFloat(yesterdaysPool.totalSwapVolume)\n    );\n  }\n}\n","import { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport {\n  ComposableStableCreatePoolParameters,\n  InitJoinPoolAttributes,\n  InitJoinPoolParameters,\n  JoinPoolDecodedAttributes,\n  JoinPoolRequestDecodedAttributes,\n} from '@/modules/pools/factory/types';\nimport { balancerVault, networkAddresses } from '@/lib/constants/config';\nimport { AssetHelpers, getRandomBytes32 } from '@/lib/utils';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { BalancerNetworkConfig } from '@/types';\nimport {\n  ComposableStablePool__factory,\n  ComposableStablePoolFactory__factory,\n} from '@/contracts';\nimport { JsonRpcProvider, TransactionReceipt } from '@ethersproject/providers';\nimport { LogDescription } from '@ethersproject/abi';\nimport { findEventInReceiptLogs } from '@/lib/utils';\nimport { Contract } from '@ethersproject/contracts';\nimport { ContractInstances } from '@/modules/contracts/contracts.module';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { ComposableStablePoolInterface } from '@/contracts/ComposableStablePool';\n\nexport class ComposableStableFactory implements PoolFactory {\n  private wrappedNativeAsset: string;\n  private contracts: ContractInstances;\n\n  constructor(\n    networkConfig: BalancerNetworkConfig,\n    contracts: ContractInstances\n  ) {\n    const { tokens } = networkAddresses(networkConfig.chainId);\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n    this.contracts = contracts;\n  }\n\n  /**\n   * Builds a transaction for a composable pool create operation.\n   * @param name The name of the pool\n   * @param symbol The symbol of the pool\n   * @param tokenAddresses The token's addresses\n   * @param amplificationParameter The amplification parameter(must be greater than 1)\n   * @param rateProviders The addresses of the rate providers for each token, ordered\n   * @param tokenRateCacheDurations the Token Rate Cache Duration of each token\n   * @param exemptFromYieldProtocolFeeFlags Array containing boolean for each token exemption from yield protocol fee flags\n   * @param swapFeeEvm The swapFee for the owner of the pool in string format parsed to evm(100% is 1e18, 10% is 1e17, 1% is 1e16)\n   * @param owner The address of the owner of the pool\n   * @returns A TransactionRequest object, which can be directly inserted in the transaction to create a composable stable pool\n   */\n  create({\n    name,\n    symbol,\n    tokenAddresses,\n    amplificationParameter,\n    rateProviders,\n    tokenRateCacheDurations,\n    exemptFromYieldProtocolFeeFlags,\n    swapFeeEvm,\n    owner,\n    salt,\n  }: ComposableStableCreatePoolParameters): { to?: string; data: BytesLike } {\n    this.checkCreateInputs({\n      rateProviders,\n      tokenAddresses,\n      tokenRateCacheDurations,\n      exemptFromYieldProtocolFeeFlags,\n      swapFeeEvm,\n    });\n    const params = this.parseCreateParamsForEncoding({\n      name,\n      symbol,\n      tokenAddresses,\n      amplificationParameter,\n      rateProviders,\n      tokenRateCacheDurations,\n      exemptFromYieldProtocolFeeFlags,\n      swapFeeEvm,\n      owner,\n      salt,\n    });\n    const encodedFunctionData = this.encodeCreateFunctionData(params);\n    return {\n      to: this.contracts.composableStablePoolFactory?.address,\n      data: encodedFunctionData,\n    };\n  }\n\n  checkCreateInputs = ({\n    tokenAddresses,\n    tokenRateCacheDurations,\n    exemptFromYieldProtocolFeeFlags,\n    rateProviders,\n    swapFeeEvm,\n  }: Pick<\n    ComposableStableCreatePoolParameters,\n    | 'rateProviders'\n    | 'tokenRateCacheDurations'\n    | 'tokenAddresses'\n    | 'exemptFromYieldProtocolFeeFlags'\n    | 'swapFeeEvm'\n  >): void => {\n    if (\n      tokenAddresses.length !== tokenRateCacheDurations.length ||\n      tokenRateCacheDurations.length !==\n        exemptFromYieldProtocolFeeFlags.length ||\n      exemptFromYieldProtocolFeeFlags.length !== rateProviders.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n    if (BigInt(swapFeeEvm) <= BigInt(0) || BigInt(swapFeeEvm) > BigInt(1e17)) {\n      throw new BalancerError(BalancerErrorCode.INVALID_SWAP_FEE_PERCENTAGE);\n    }\n  };\n  parseCreateParamsForEncoding = ({\n    name,\n    symbol,\n    tokenAddresses,\n    amplificationParameter,\n    rateProviders,\n    tokenRateCacheDurations,\n    exemptFromYieldProtocolFeeFlags,\n    swapFeeEvm,\n    owner,\n    salt,\n  }: ComposableStableCreatePoolParameters): [\n    string,\n    string,\n    string[],\n    string,\n    string[],\n    string[],\n    boolean[],\n    string,\n    string,\n    BytesLike\n  ] => {\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [\n      sortedTokens,\n      sortedRateProviders,\n      sortedTokenRateCacheDurations,\n      sortedExemptFromYieldProtocols,\n    ] = assetHelpers.sortTokens(\n      tokenAddresses,\n      rateProviders,\n      tokenRateCacheDurations,\n      exemptFromYieldProtocolFeeFlags\n    ) as [string[], string[], string[], boolean[]];\n    const params = [\n      name,\n      symbol,\n      sortedTokens,\n      amplificationParameter,\n      sortedRateProviders,\n      sortedTokenRateCacheDurations,\n      sortedExemptFromYieldProtocols,\n      swapFeeEvm.toString(),\n      owner,\n      salt || getRandomBytes32(),\n    ] as [\n      string,\n      string,\n      string[],\n      string,\n      string[],\n      string[],\n      boolean[],\n      string,\n      string,\n      BytesLike\n    ];\n    return params;\n  };\n\n  encodeCreateFunctionData = (\n    params: [\n      string,\n      string,\n      string[],\n      string,\n      string[],\n      string[],\n      boolean[],\n      string,\n      string,\n      BytesLike\n    ]\n  ): string => {\n    const composablePoolFactoryInterface =\n      ComposableStablePoolFactory__factory.createInterface();\n    return composablePoolFactoryInterface.encodeFunctionData('create', params);\n  };\n\n  /**\n   * Builds a transaction for a composable pool init join operation.\n   * @param joiner The address of the joiner of the pool\n   * @param poolId The id of the pool\n   * @param poolAddress The address of the pool\n   * @param tokensIn Array with the address of the tokens\n   * @param amountsIn Array with the amount of each token\n   * @returns A InitJoinPoolAttributes object, which can be directly inserted in the transaction to init join a composable stable pool\n   */\n  buildInitJoin({\n    joiner,\n    poolId,\n    poolAddress,\n    tokensIn,\n    amountsIn,\n  }: InitJoinPoolParameters): InitJoinPoolAttributes {\n    this.checkInitJoinInputs({\n      tokensIn,\n      amountsIn,\n      poolId,\n      poolAddress,\n    });\n    const { attributes, params } = this.parseParamsForInitJoin({\n      joiner,\n      poolId,\n      poolAddress,\n      tokensIn,\n      amountsIn,\n    });\n    const { functionName, data } = this.encodeInitJoinFunctionData(params);\n\n    return {\n      to: balancerVault,\n      functionName,\n      data,\n      attributes,\n    };\n  }\n\n  checkInitJoinInputs = ({\n    poolId,\n    poolAddress,\n    tokensIn,\n    amountsIn,\n  }: Pick<\n    InitJoinPoolParameters,\n    'tokensIn' | 'amountsIn' | 'poolId' | 'poolAddress'\n  >): void => {\n    if (!poolId || !poolAddress) {\n      throw new BalancerError(BalancerErrorCode.NO_POOL_DATA);\n    }\n    if (tokensIn.length !== amountsIn.length) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n  };\n\n  parseParamsForInitJoin = ({\n    joiner,\n    poolId,\n    poolAddress,\n    tokensIn,\n    amountsIn,\n  }: InitJoinPoolParameters): {\n    attributes: JoinPoolDecodedAttributes;\n    params: [string, string, string, JoinPoolRequestDecodedAttributes];\n  } => {\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    // sort inputs\n    const tokensWithBpt = [...tokensIn, poolAddress];\n    const amountsWithBpt = [...amountsIn, '0'];\n    const maxAmountsWithBpt = [\n      ...amountsIn,\n      // this max amount needs to be >= PREMINT - bptAmountOut,\n      // The vault returns BAL#506 if it's not,\n      // PREMINT is around 2^111, but here we set the max amount of BPT as MAX_UINT_256-1 for safety\n      BigInt.asUintN(256, BigInt(-1)).toString(),\n    ];\n    const [sortedTokens, sortedAmounts, sortedMaxAmounts] =\n      assetHelpers.sortTokens(\n        tokensWithBpt,\n        amountsWithBpt,\n        maxAmountsWithBpt\n      ) as [string[], string[], string[]];\n\n    const userData = ComposableStablePoolEncoder.joinInit(sortedAmounts);\n\n    const attributes: JoinPoolDecodedAttributes = {\n      poolId: poolId,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedMaxAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    return {\n      attributes,\n      params: [\n        attributes.poolId,\n        attributes.sender,\n        attributes.recipient,\n        attributes.joinPoolRequest,\n      ],\n    };\n  };\n  encodeInitJoinFunctionData = (\n    params: [string, string, string, JoinPoolRequestDecodedAttributes]\n  ): {\n    functionName: string;\n    data: string;\n  } => {\n    const functionName = 'joinPool';\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, params);\n\n    return { functionName, data };\n  };\n\n  getPoolAddressAndIdWithReceipt = async (\n    provider: JsonRpcProvider,\n    receipt: TransactionReceipt\n  ): Promise<{\n    poolId: string;\n    poolAddress: string;\n  }> => {\n    const poolCreationEvent: LogDescription = findEventInReceiptLogs({\n      receipt,\n      to: this.contracts.composableStablePoolFactory?.address || '',\n      contractInterface: ComposableStablePoolFactory__factory.createInterface(),\n      logName: 'PoolCreated',\n    });\n\n    const poolAddress = poolCreationEvent.args.pool;\n    const composableStablePoolInterface = this.getPoolInterface();\n    const pool = new Contract(\n      poolAddress,\n      composableStablePoolInterface,\n      provider\n    );\n    const poolId = await pool.getPoolId();\n    return {\n      poolAddress,\n      poolId,\n    };\n  };\n\n  getPoolInterface(): ComposableStablePoolInterface {\n    return ComposableStablePool__factory.createInterface();\n  }\n}\n","import { LogDescription } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { JsonRpcProvider, TransactionReceipt } from '@ethersproject/providers';\n\nimport { Vault__factory } from '@/contracts/factories/Vault__factory';\nimport { WeightedPoolFactory__factory } from '@/contracts/factories/WeightedPoolFactory__factory';\nimport { balancerVault, networkAddresses } from '@/lib/constants/config';\nimport {\n  AssetHelpers,\n  findEventInReceiptLogs,\n  getRandomBytes32,\n} from '@/lib/utils';\nimport { ContractInstances } from '@/modules/contracts/contracts.module';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport {\n  InitJoinPoolAttributes,\n  InitJoinPoolParameters,\n  JoinPoolDecodedAttributes,\n  JoinPoolRequestDecodedAttributes,\n  WeightedCreatePoolParameters,\n} from '@/modules/pools/factory/types';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { BalancerNetworkConfig } from '@/types';\nimport { WeightedPool__factory } from '@/contracts';\nimport { SolidityMaths } from '@/lib/utils/solidityMaths';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { WeightedPoolInterface } from '@/contracts/WeightedPool';\n\nexport class WeightedFactory implements PoolFactory {\n  private wrappedNativeAsset: string;\n  private contracts: ContractInstances;\n\n  constructor(\n    networkConfig: BalancerNetworkConfig,\n    contracts: ContractInstances\n  ) {\n    const { tokens } = networkAddresses(networkConfig.chainId);\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n    this.contracts = contracts;\n  }\n\n  /**\n   * Builds a transaction for a weighted pool create operation.\n   * @param factoryAddress The address of the factory for weighted pool (contract address)\n   * @param name The name of the pool\n   * @param symbol The symbol of the pool\n   * @param tokenAddresses The token's addresses\n   * @param normalizedWeights The weights for each token, ordered\n   * @param rateProviders The rate providers for each token, ordered\n   * @param swapFeeEvm The swapFee for the owner of the pool in string or bigint formatted to evm(100% is 1e18, 10% is 1e17, 1% is 1e16)\n   * @param owner The address of the owner of the pool\n   * @param salt The salt of the pool (bytes32)\n   * @returns TransactionRequest object, which can be directly inserted in the transaction to create a weighted pool\n   */\n  create({\n    name,\n    symbol,\n    tokenAddresses,\n    normalizedWeights,\n    rateProviders,\n    swapFeeEvm,\n    owner,\n    salt,\n  }: WeightedCreatePoolParameters): {\n    to?: string;\n    data: BytesLike;\n  } {\n    this.checkCreateInputs({\n      tokenAddresses,\n      normalizedWeights,\n      swapFeeEvm,\n      rateProviders,\n    });\n    const params = this.parseCreateParamsForEncoding({\n      name,\n      symbol,\n      tokenAddresses,\n      normalizedWeights,\n      rateProviders,\n      swapFeeEvm,\n      owner,\n      salt,\n    });\n    const encodedFunctionData = this.encodeCreateFunctionData(params);\n    return {\n      to: this.contracts.weightedPoolFactory?.address,\n      data: encodedFunctionData,\n    };\n  }\n\n  checkCreateInputs({\n    tokenAddresses,\n    normalizedWeights,\n    swapFeeEvm,\n    rateProviders,\n  }: Pick<\n    WeightedCreatePoolParameters,\n    'tokenAddresses' | 'normalizedWeights' | 'swapFeeEvm' | 'rateProviders'\n  >): void {\n    if (\n      tokenAddresses.length !== normalizedWeights.length ||\n      normalizedWeights.length !== rateProviders.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n    if (tokenAddresses.length < 2) {\n      throw new BalancerError(BalancerErrorCode.BELOW_MIN_TOKENS);\n    }\n    if (tokenAddresses.length > 8) {\n      throw new BalancerError(BalancerErrorCode.ABOVE_MAX_TOKENS);\n    }\n    if (BigInt(swapFeeEvm) <= BigInt(0) || BigInt(swapFeeEvm) > BigInt(1e17)) {\n      throw new BalancerError(BalancerErrorCode.INVALID_SWAP_FEE_PERCENTAGE);\n    }\n    const normalizedWeightsSum = (normalizedWeights as string[]).reduce(\n      (acc, cur) => SolidityMaths.add(acc, BigInt(cur)),\n      BigInt(0)\n    );\n    if (normalizedWeightsSum !== BigInt(1e18)) {\n      throw new BalancerError(BalancerErrorCode.INVALID_WEIGHTS);\n    }\n  }\n\n  parseCreateParamsForEncoding = ({\n    name,\n    symbol,\n    tokenAddresses,\n    normalizedWeights,\n    rateProviders,\n    swapFeeEvm,\n    owner,\n    salt,\n  }: WeightedCreatePoolParameters): [\n    string,\n    string,\n    string[],\n    BigNumberish[],\n    string[],\n    string,\n    string,\n    BytesLike\n  ] => {\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedNormalizedWeights, sortedRateProviders] =\n      assetHelpers.sortTokens(\n        tokenAddresses,\n        normalizedWeights,\n        rateProviders\n      ) as [string[], BigNumberish[], string[]];\n    return [\n      name,\n      symbol,\n      sortedTokens,\n      sortedNormalizedWeights,\n      sortedRateProviders,\n      swapFeeEvm.toString(),\n      owner,\n      salt || getRandomBytes32(),\n    ];\n  };\n\n  encodeCreateFunctionData = (\n    params: [\n      string,\n      string,\n      string[],\n      BigNumberish[],\n      string[],\n      string,\n      string,\n      BytesLike\n    ]\n  ): string => {\n    const weightedPoolInterface =\n      WeightedPoolFactory__factory.createInterface();\n\n    return weightedPoolInterface.encodeFunctionData('create', params);\n  };\n\n  /**\n   * Returns a InitJoinPoolAttributes to make a init join transaction\n   * @param joiner The address of the joiner of the pool\n   * @param poolId The id of the pool\n   * @param tokensIn Array with the address of the tokens\n   * @param amountsIn Array with the amount of each token\n   * @returns InitJoinPoolAttributes object, which can be directly inserted in the transaction to init join a weighted pool\n   */\n  buildInitJoin({\n    joiner,\n    poolId,\n    tokensIn,\n    amountsIn,\n  }: InitJoinPoolParameters): InitJoinPoolAttributes {\n    this.checkInitJoinInputs({\n      poolId,\n      tokensIn,\n      amountsIn,\n    });\n    const { attributes, params } = this.parseParamsForInitJoin({\n      joiner,\n      poolId,\n      tokensIn,\n      amountsIn,\n    });\n    const { functionName, data } = this.encodeInitJoinFunctionData(params);\n\n    return {\n      to: balancerVault,\n      functionName,\n      data,\n      attributes,\n    };\n  }\n\n  parseParamsForInitJoin = ({\n    joiner,\n    poolId,\n    tokensIn,\n    amountsIn,\n  }: Omit<InitJoinPoolParameters, 'poolAddress'>): {\n    attributes: JoinPoolDecodedAttributes;\n    params: [string, string, string, JoinPoolRequestDecodedAttributes];\n  } => {\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n\n    const userData = WeightedPoolEncoder.joinInit(sortedAmounts);\n\n    const attributes = {\n      poolId: poolId,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n\n    return {\n      attributes,\n      params: [\n        attributes.poolId,\n        attributes.sender,\n        attributes.recipient,\n        attributes.joinPoolRequest,\n      ],\n    };\n  };\n\n  encodeInitJoinFunctionData = (\n    params: [string, string, string, JoinPoolRequestDecodedAttributes]\n  ): {\n    functionName: string;\n    data: string;\n  } => {\n    const functionName = 'joinPool';\n\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, params);\n    return { functionName, data };\n  };\n  checkInitJoinInputs = ({\n    poolId,\n    tokensIn,\n    amountsIn,\n  }: Pick<\n    InitJoinPoolParameters,\n    'tokensIn' | 'amountsIn' | 'poolId'\n  >): void => {\n    if (!poolId) {\n      throw new BalancerError(BalancerErrorCode.NO_POOL_DATA);\n    }\n    if (tokensIn.length !== amountsIn.length) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n  };\n\n  async getPoolAddressAndIdWithReceipt(\n    provider: JsonRpcProvider,\n    receipt: TransactionReceipt\n  ): Promise<{ poolId: string; poolAddress: string }> {\n    const poolCreationEvent: LogDescription = findEventInReceiptLogs({\n      receipt,\n      to: this.contracts.weightedPoolFactory?.address || '',\n      contractInterface: WeightedPoolFactory__factory.createInterface(),\n      logName: 'PoolCreated',\n    });\n\n    const poolAddress = poolCreationEvent.args.pool;\n    const weightedPoolInterface = this.getPoolInterface();\n    const pool = new Contract(poolAddress, weightedPoolInterface, provider);\n    const poolId = await pool.getPoolId();\n    return {\n      poolAddress,\n      poolId,\n    };\n  }\n\n  getPoolInterface(): WeightedPoolInterface {\n    return WeightedPool__factory.createInterface();\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { JoinPool } from '@/modules/pools/pool-types/concerns/types';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { ERC4626LinearPoolInterface } from '@/contracts/ERC4626LinearPool';\nimport { GearboxLinearPoolInterface } from '@/contracts/GearboxLinearPool';\nimport { EulerLinearPoolInterface } from '@/contracts/EulerLinearPool';\nimport { AaveLinearPoolInterface } from '@/contracts/AaveLinearPool';\nimport { YearnLinearPoolInterface } from '@/contracts/YearnLinearPool';\nimport { AaveLinearPoolFactoryInterface } from '@/contracts/AaveLinearPoolFactory';\nimport { ERC4626LinearPoolFactoryInterface } from '@/contracts/ERC4626LinearPoolFactory';\nimport { EulerLinearPoolFactoryInterface } from '@/contracts/EulerLinearPoolFactory';\nimport { GearboxLinearPoolFactoryInterface } from '@/contracts/GearboxLinearPoolFactory';\nimport { YearnLinearPoolFactoryInterface } from '@/contracts/YearnLinearPoolFactory';\n\nexport type CreatePoolParameters = {\n  name: string;\n  symbol: string;\n  tokenAddresses: string[];\n  swapFeeEvm: string;\n  owner: string;\n  salt?: BytesLike;\n};\n\nexport interface ComposableStableCreatePoolParameters\n  extends CreatePoolParameters {\n  amplificationParameter: string;\n  rateProviders: string[];\n  tokenRateCacheDurations: string[];\n  exemptFromYieldProtocolFeeFlags: boolean[];\n\n  salt?: BytesLike;\n}\n\nexport interface WeightedCreatePoolParameters extends CreatePoolParameters {\n  rateProviders: string[];\n  normalizedWeights: BigNumberish[];\n}\n\nexport type LinearCreatePoolParameters = Pick<\n  CreatePoolParameters,\n  'name' | 'symbol' | 'swapFeeEvm' | 'owner' | 'salt'\n> & {\n  mainToken: string;\n  wrappedToken: string;\n  upperTargetEvm: string;\n  protocolId: ProtocolId;\n};\n\nexport interface InitJoinPoolParameters {\n  joiner: string;\n  poolId: string;\n  poolAddress: string;\n  tokensIn: string[];\n  amountsIn: string[];\n}\n\nexport interface InitJoinPoolAttributes {\n  to: string;\n  functionName: string;\n  attributes: JoinPool;\n  data: string;\n  value?: BigNumber;\n}\n\n// Source of the protocolId's: https://github.com/balancer/balancer-v2-monorepo/blob/647320a4a375c724276af8e1ae26948de8fa411b/pkg/interfaces/contracts/standalone-utils/IProtocolIdRegistry.sol#L54-L72\nexport enum ProtocolId {\n  AAVE_V1 = 0,\n  AAVE_V2 = 1,\n  AAVE_V3 = 2,\n  AMPLEFORTH = 3,\n  BEEFY = 4,\n  EULER = 5,\n  GEARBOX = 6,\n  IDLE = 7,\n  MORPHO = 8,\n  RADIANT = 9,\n  REAPER = 10,\n  SILO = 11,\n  STARGATE = 12,\n  STURDY = 13,\n  TESSERA = 14,\n  TETU = 15,\n  YEARN = 16,\n  MIDAS = 17,\n  AGAVE = 18,\n}\n\nexport type JoinPoolDecodedAttributes = {\n  poolId: string;\n  sender: string;\n  recipient: string;\n  joinPoolRequest: JoinPoolRequestDecodedAttributes;\n};\n\nexport type JoinPoolRequestDecodedAttributes = {\n  assets: string[];\n  maxAmountsIn: string[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\nexport type LinearPoolInterface =\n  | ERC4626LinearPoolInterface\n  | EulerLinearPoolInterface\n  | AaveLinearPoolInterface\n  | YearnLinearPoolInterface\n  | GearboxLinearPoolInterface;\n\nexport type LinearPoolFactoryInterface =\n  | AaveLinearPoolFactoryInterface\n  | ERC4626LinearPoolFactoryInterface\n  | EulerLinearPoolFactoryInterface\n  | GearboxLinearPoolFactoryInterface\n  | YearnLinearPoolFactoryInterface;\n","import { LogDescription } from '@ethersproject/abi';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { Contract } from '@ethersproject/contracts';\nimport { JsonRpcProvider, TransactionReceipt } from '@ethersproject/providers';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport {\n  AaveLinearPool__factory,\n  AaveLinearPoolFactory__factory,\n  ERC4626LinearPool__factory,\n  ERC4626LinearPoolFactory__factory,\n  EulerLinearPool__factory,\n  EulerLinearPoolFactory__factory,\n  GearboxLinearPool__factory,\n  GearboxLinearPoolFactory__factory,\n  YearnLinearPool__factory,\n  YearnLinearPoolFactory__factory,\n} from '@/contracts';\nimport { AaveLinearPoolInterface } from '@/contracts/AaveLinearPool';\nimport { ERC4626LinearPoolInterface } from '@/contracts/ERC4626LinearPool';\nimport { EulerLinearPoolInterface } from '@/contracts/EulerLinearPool';\nimport { EulerLinearPoolFactoryInterface } from '@/contracts/EulerLinearPoolFactory';\nimport { GearboxLinearPoolInterface } from '@/contracts/GearboxLinearPool';\nimport { YearnLinearPoolInterface } from '@/contracts/YearnLinearPool';\nimport { ContractInstances } from '@/modules/contracts/contracts.module';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport {\n  InitJoinPoolAttributes,\n  LinearCreatePoolParameters,\n  LinearPoolFactoryInterface,\n  ProtocolId,\n} from '@/modules/pools/factory/types';\nimport { PoolType } from '@/types';\nimport { findEventInReceiptLogs, getRandomBytes32 } from '@/lib/utils';\n\ntype LinearPoolParamsToEncode = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  BytesLike\n];\n\ntype EulerLinearPoolParamsToEncode = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n];\n\nexport class LinearFactory implements PoolFactory {\n  private contracts: ContractInstances;\n  private readonly poolType: PoolType;\n\n  constructor(contracts: ContractInstances, poolType: PoolType) {\n    this.contracts = contracts;\n    this.poolType = poolType;\n  }\n\n  getPoolFactoryInterface = (): LinearPoolFactoryInterface => {\n    switch (this.poolType) {\n      case PoolType.AaveLinear:\n        return AaveLinearPoolFactory__factory.createInterface();\n      case PoolType.Linear:\n      case PoolType.ERC4626Linear:\n        return ERC4626LinearPoolFactory__factory.createInterface();\n      case PoolType.EulerLinear:\n        return EulerLinearPoolFactory__factory.createInterface();\n      case PoolType.GearboxLinear:\n        return GearboxLinearPoolFactory__factory.createInterface();\n      case PoolType.YearnLinear:\n        return YearnLinearPoolFactory__factory.createInterface();\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  };\n\n  getPoolInterface = ():\n    | AaveLinearPoolInterface\n    | ERC4626LinearPoolInterface\n    | EulerLinearPoolInterface\n    | GearboxLinearPoolInterface\n    | YearnLinearPoolInterface => {\n    switch (this.poolType) {\n      case PoolType.AaveLinear:\n        return AaveLinearPool__factory.createInterface();\n      case PoolType.Linear:\n      case PoolType.ERC4626Linear:\n        return ERC4626LinearPool__factory.createInterface();\n      case PoolType.EulerLinear:\n        return EulerLinearPool__factory.createInterface();\n      case PoolType.GearboxLinear:\n        return GearboxLinearPool__factory.createInterface();\n      case PoolType.YearnLinear:\n        return YearnLinearPool__factory.createInterface();\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  };\n\n  buildInitJoin(): InitJoinPoolAttributes {\n    // Linear Pools doesn't need to be initialized, they are initialized on deploy\n    throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n  }\n\n  /**\n   *\n   * @param name The name of the pool\n   * @param symbol The symbol of the pool (BPT name)\n   * @param mainToken The main token\n   * @param wrappedToken The wrapped token\n   * @param upperTargetEvm The maximum balance of the main token\n   * @param swapFeeEvm The swap fee of the pool\n   * @param owner The address of the owner of the pool\n   * @param protocolId The protocolId, to check the available value\n   */\n  create({\n    name,\n    symbol,\n    mainToken,\n    wrappedToken,\n    upperTargetEvm,\n    swapFeeEvm,\n    owner,\n    protocolId,\n    salt,\n  }: LinearCreatePoolParameters): {\n    to?: string;\n    data: BytesLike;\n  } {\n    this.checkCreateInputs({ swapFeeEvm, protocolId });\n    const params = this.parseCreateParamsForEncoding({\n      name,\n      symbol,\n      mainToken,\n      wrappedToken,\n      upperTargetEvm,\n      swapFeeEvm,\n      owner,\n      protocolId,\n      salt,\n    });\n    const data = this.encodeCreateFunctionData(params);\n    return {\n      to: this.getFactoryAddress(),\n      data,\n    };\n  }\n\n  checkCreateInputs = ({\n    swapFeeEvm,\n    protocolId,\n  }: {\n    swapFeeEvm: string;\n    protocolId: ProtocolId;\n  }): void => {\n    if (!ProtocolId[protocolId]) {\n      throw new BalancerError(BalancerErrorCode.INVALID_PROTOCOL_ID);\n    }\n    if (BigInt(swapFeeEvm) <= BigInt(0) || BigInt(swapFeeEvm) > BigInt(1e17)) {\n      throw new BalancerError(BalancerErrorCode.INVALID_SWAP_FEE_PERCENTAGE);\n    }\n    this.getFactoryAddress();\n  };\n\n  parseCreateParamsForEncoding = ({\n    name,\n    symbol,\n    mainToken,\n    wrappedToken,\n    upperTargetEvm,\n    swapFeeEvm,\n    owner,\n    protocolId,\n    salt,\n  }: Omit<LinearCreatePoolParameters, 'poolType'>):\n    | LinearPoolParamsToEncode\n    | EulerLinearPoolParamsToEncode => {\n    if (this.poolType === PoolType.EulerLinear) {\n      return [\n        name,\n        symbol,\n        mainToken,\n        wrappedToken,\n        upperTargetEvm,\n        swapFeeEvm,\n        owner,\n        protocolId.toString(),\n      ] as [string, string, string, string, string, string, string, string];\n    }\n    return [\n      name,\n      symbol,\n      mainToken,\n      wrappedToken,\n      upperTargetEvm,\n      swapFeeEvm,\n      owner,\n      protocolId.toString(),\n      salt || getRandomBytes32(),\n    ] as [\n      string,\n      string,\n      string,\n      string,\n      string,\n      string,\n      string,\n      string,\n      BytesLike\n    ];\n  };\n\n  encodeCreateFunctionData = (\n    params: LinearPoolParamsToEncode | EulerLinearPoolParamsToEncode\n  ): string => {\n    const linearPoolInterface: LinearPoolFactoryInterface =\n      this.getPoolFactoryInterface();\n    const encodedData =\n      // YearnLinearPools doesn't have protocolId, the encoding of the params is different\n      this.poolType === PoolType.EulerLinear\n        ? (\n            linearPoolInterface as EulerLinearPoolFactoryInterface\n          ).encodeFunctionData(\n            'create',\n            params as EulerLinearPoolParamsToEncode\n          )\n        : (\n            linearPoolInterface as Exclude<\n              LinearPoolFactoryInterface,\n              EulerLinearPoolFactoryInterface\n            >\n          ).encodeFunctionData('create', params as LinearPoolParamsToEncode);\n    return encodedData;\n  };\n\n  getFactoryAddress = (): string => {\n    switch (this.poolType) {\n      case PoolType.AaveLinear:\n        if (this.contracts.aaveLinearPoolFactory) {\n          return this.contracts.aaveLinearPoolFactory.address;\n        } else throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      case PoolType.Linear:\n      case PoolType.ERC4626Linear:\n        if (this.contracts.erc4626LinearPoolFactory) {\n          return this.contracts.erc4626LinearPoolFactory.address;\n        } else throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      case PoolType.EulerLinear:\n        if (this.contracts.eulerLinearPoolFactory) {\n          return this.contracts.eulerLinearPoolFactory.address;\n        } else throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      case PoolType.GearboxLinear:\n        if (this.contracts.gearboxLinearPoolFactory) {\n          return this.contracts.gearboxLinearPoolFactory.address;\n        } else throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      case PoolType.YearnLinear:\n        if (this.contracts.yearnLinearPoolFactory) {\n          return this.contracts.yearnLinearPoolFactory.address;\n        } else throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  };\n\n  getPoolAddressAndIdWithReceipt = async (\n    provider: JsonRpcProvider,\n    receipt: TransactionReceipt\n  ): Promise<{ poolId: string; poolAddress: string }> => {\n    const poolCreationEvent: LogDescription = findEventInReceiptLogs({\n      receipt,\n      to: this.getFactoryAddress() || '',\n      contractInterface: this.getPoolFactoryInterface(),\n      logName: 'PoolCreated',\n    });\n\n    const poolAddress = poolCreationEvent.args.pool;\n    const linearPoolInterface = this.getPoolInterface();\n    const pool = new Contract(poolAddress, linearPoolInterface, provider);\n    const poolId = await pool.getPoolId();\n    return {\n      poolAddress,\n      poolId,\n    };\n  };\n}\n","import { BalancerNetworkConfig, PoolType } from '@/types';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport { ComposableStableFactory } from '@/modules/pools/factory/composable-stable/composable-stable.factory';\nimport { WeightedFactory } from '@/modules/pools/factory/weighted/weighted.factory';\nimport {\n  ContractInstances,\n  Contracts,\n} from '@/modules/contracts/contracts.module';\nimport { LinearFactory } from '@/modules/pools/factory/linear/linear.factory';\n\n/**\n * Wrapper around pool type specific methods.\n *\n * Returns a class instance of a type specific factory.\n */\nexport class PoolFactory__factory {\n  networkConfig: BalancerNetworkConfig;\n  contracts: ContractInstances;\n\n  constructor(\n    networkConfig: BalancerNetworkConfig,\n    balancerContracts: Contracts\n  ) {\n    this.networkConfig = networkConfig;\n    this.contracts = balancerContracts.contracts;\n  }\n\n  of(poolType: PoolType): PoolFactory {\n    switch (poolType) {\n      case 'Weighted':\n        return new WeightedFactory(this.networkConfig, this.contracts);\n      case 'Investment':\n      case 'LiquidityBootstrapping': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'Stable': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'ComposableStable': {\n        return new ComposableStableFactory(this.networkConfig, this.contracts);\n      }\n      case 'MetaStable': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'StablePhantom': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'Linear':\n      case 'AaveLinear':\n      case 'ERC4626Linear':\n      case 'EulerLinear':\n      case 'GearboxLinear':\n      case 'YearnLinear': {\n        return new LinearFactory(this.contracts, poolType);\n      }\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  }\n}\n","import * as PoolQueries from './types';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero, Zero, MaxUint256 } from '@ethersproject/constants';\nimport { getEncoder } from './get_encoder';\nimport { removeItem } from '@/lib/utils';\n\n/**\n * Builds parameters quering join / exit liquidity functions in the Balancer Helpers contract.\n */\nexport class ParamsBuilder implements PoolQueries.ParamsBuilder {\n  private encoder: PoolQueries.Encoder;\n\n  constructor(private pool: PoolQueries.Pool) {\n    const encoder = getEncoder(pool.poolType);\n    if (encoder) {\n      this.encoder = encoder;\n    } else {\n      throw 'Pool type not supported';\n    }\n  }\n\n  /**\n   * Encodes the query to get expected amount of BPT when joining a Pool with exact token inputs\n   * @param maxAmountsInByToken - The amounts each of token, mapped by token address, to deposit in the pool as liquidity,\n   *                       doesn't need to have all tokens, only the ones that will be deposited\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens (optional)\n   */\n  buildQueryJoinExactIn({\n    maxAmountsInByToken,\n    minimumBPT = Zero,\n  }: PoolQueries.JoinExactInParams): PoolQueries.queryJoinParams {\n    const bptIndex = this.pool.tokensList.findIndex((token) =>\n      this.pool.id.includes(token)\n    );\n\n    const assets = [...this.pool.tokensList];\n\n    const maxAmountsIn = this.pool.tokensList.map(\n      (tokenAddress) =>\n        maxAmountsInByToken.get(tokenAddress) ?? BigNumber.from('0')\n    );\n\n    let maxInWithoutBpt;\n\n    // Remove BPT token from amounts for user data\n    if (bptIndex > -1) {\n      maxInWithoutBpt = removeItem(maxAmountsIn, bptIndex);\n    } else {\n      maxInWithoutBpt = maxAmountsIn;\n    }\n\n    const userData = this.encoder.joinExactTokensInForBPTOut(\n      maxInWithoutBpt,\n      minimumBPT\n    );\n\n    const params = [\n      this.pool.id,\n      AddressZero, // sender is ignored on query join, so it can be just address zero\n      AddressZero, // same as sender\n      {\n        assets,\n        maxAmountsIn,\n        userData,\n        fromInternalBalance: false, // from internal balance is ignored on query join, can be just false\n      },\n    ] as PoolQueries.queryJoinParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes the query to get expected token amount when joining a Pool specifying fixed BPT out.\n   *\n   * @param maxAmountIn - The max expected amount for tokenIn (optional)\n   * @param bptOut - the expected BPT for providing liquidity\n   * @param tokenIn - address of a token joining the pool\n   */\n  buildQueryJoinExactOut({\n    maxAmountIn,\n    bptOut,\n    tokenIn,\n  }: PoolQueries.JoinExactOutParams): PoolQueries.queryJoinParams {\n    const bptIndex = this.pool.tokensList.findIndex((token) =>\n      this.pool.id.includes(token)\n    );\n    let tokensWithoutBpt = [...this.pool.tokensList];\n    if (bptIndex > -1) {\n      tokensWithoutBpt = removeItem(this.pool.tokensList, bptIndex);\n    }\n    const tokenIndex = tokensWithoutBpt.indexOf(tokenIn);\n\n    const userData = this.encoder.joinTokenInForExactBPTOut(bptOut, tokenIndex);\n    const maxAmountsIn = maxAmountIn\n      ? this.pool.tokensList.map((tokenAddress) =>\n          tokenAddress === tokenIn ? maxAmountIn : '0'\n        )\n      : [];\n    const params = [\n      this.pool.id,\n      AddressZero, // sender is ignored on query join, so it can be just address zero\n      AddressZero, // same as sender\n      {\n        assets: this.pool.tokensList,\n        maxAmountsIn,\n        userData,\n        fromInternalBalance: false, // from internal balance is ignored on query join, can be just false\n      },\n    ] as PoolQueries.queryJoinParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes the query for exiting the pool to a single token\n   *\n   * @param minAmountOut - minimum expected amount for token out\n   * @param bptIn - BPT, shares of the pool liquidity\n   * @param tokenOut - address of an exit liquidity token\n   */\n  buildQueryExitToSingleToken({\n    minAmountOut,\n    bptIn,\n    tokenOut,\n  }: PoolQueries.ExitToSingleTokenParams): PoolQueries.queryExitParams {\n    const bptIndex = this.pool.tokensList.findIndex((token) =>\n      this.pool.id.includes(token)\n    );\n    let tokensWithoutBpt = [...this.pool.tokensList];\n    if (bptIndex > -1) {\n      tokensWithoutBpt = removeItem(this.pool.tokensList, bptIndex);\n    }\n    const tokenIndex = tokensWithoutBpt.indexOf(tokenOut);\n\n    const userData = this.encoder.exitExactBPTInForOneTokenOut(\n      bptIn,\n      tokenIndex\n    );\n    const minAmountsOut = minAmountOut\n      ? this.pool.tokensList.map((tokenAddress) =>\n          tokenAddress === tokenOut ? minAmountOut : '0'\n        )\n      : [];\n    const params = [\n      this.pool.id,\n      AddressZero, // sender is ignored on query join, so it can be just address zero\n      AddressZero, // same as sender\n      {\n        assets: this.pool.tokensList,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false, // to internal balance is ignored on query join, can be just false\n      },\n    ] as PoolQueries.queryExitParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes the query for exiting the pool with all underlying tokens proportionally.\n   * Not supported by ComposableStable\n   *\n   * @param minAmountsOut - minimum expected amounts, can be set to zero for a query, ordered same as pool.tokensList\n   * @param bptIn - BPT, shares of the pool liquidity\n   */\n  buildQueryExitProportionally({\n    minAmountsOut = [],\n    bptIn,\n  }: PoolQueries.ExitProportionallyParams): PoolQueries.queryExitParams {\n    if (!this.encoder.exitExactBPTInForTokensOut) {\n      throw 'Proportional exit not implemented';\n    }\n\n    const userData = this.encoder.exitExactBPTInForTokensOut(bptIn);\n\n    const params = [\n      this.pool.id,\n      AddressZero, // sender is ignored on query join, so it can be just address zero\n      AddressZero, // same as sender\n      {\n        assets: this.pool.tokensList,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    ] as PoolQueries.queryExitParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes calldata to query expected BPT for known amounts out.\n   *\n   * @param minAmountsOut - minimum expected amounts, ordered same as pool.tokensList\n   * @param maxBptIn - BPT, shares of the pool liquidity, can be set to zero for a query\n   */\n  buildQueryExitExactOut({\n    minAmountsOut,\n    maxBptIn = MaxUint256,\n  }: PoolQueries.ExitExactOutParams): PoolQueries.queryExitParams {\n    const bptIndex = this.pool.tokensList.findIndex((token) =>\n      this.pool.id.includes(token)\n    );\n\n    let minAmountsOutWithoutBpt = [...minAmountsOut];\n    // Remove BPT token from amounts\n    if (bptIndex > -1) {\n      minAmountsOutWithoutBpt = removeItem(minAmountsOut, bptIndex);\n    }\n\n    const userData = this.encoder.exitBPTInForExactTokensOut(\n      minAmountsOutWithoutBpt,\n      maxBptIn\n    );\n\n    const params = [\n      this.pool.id,\n      AddressZero, // sender is ignored on query join, so it can be just address zero\n      AddressZero, // same as sender\n      {\n        assets: this.pool.tokensList,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false, // to internal balance is ignored on query join, can be just false\n      },\n    ] as PoolQueries.queryExitParams;\n\n    return params;\n  }\n}\n","import { WeightedPoolEncoder } from '@/pool-weighted/encoder';\nimport { StablePoolEncoder } from '@/pool-stable/encoder';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { PoolType } from '@/types';\nimport { isLinearish } from '@/lib/utils';\n\nexport const getEncoder = (\n  poolType: PoolType\n):\n  | typeof WeightedPoolEncoder\n  | typeof StablePoolEncoder\n  | typeof ComposableStablePoolEncoder\n  | undefined => {\n  switch (poolType) {\n    case PoolType.Weighted:\n      return WeightedPoolEncoder;\n\n    case PoolType.Stable:\n    case PoolType.MetaStable:\n    case PoolType.StablePhantom:\n    case PoolType.Element:\n    case PoolType.Gyro2:\n    case PoolType.Gyro3:\n      return StablePoolEncoder;\n\n    case PoolType.ComposableStable:\n      return ComposableStablePoolEncoder;\n\n    default: {\n      if (isLinearish(poolType)) return StablePoolEncoder;\n      break;\n    }\n  }\n};\n","import * as emissions from '@/modules/data/bal/emissions';\nimport { Findable, LiquidityGauge } from '@/types';\n\n/**\n * Returns BAL emissions per pool\n */\nexport class EmissionsService {\n  constructor(private liquidityGaugesRepository: Findable<LiquidityGauge>) {}\n\n  async relativeWeight(poolId: string): Promise<number> {\n    const gauge = await this.liquidityGaugesRepository.findBy('poolId', poolId);\n\n    if (gauge) {\n      return gauge.relativeWeight;\n    }\n\n    return 0;\n  }\n\n  async weekly(poolId: string): Promise<number> {\n    const perWeek = emissions.weekly();\n    const relativeWeight = await this.relativeWeight(poolId);\n\n    return perWeek * relativeWeight;\n  }\n}\n","import { parseUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Calculates the proportional amounts of tokens in relation to a given token and amount.\n * Useful for calculating the amounts of tokens to be sent to a pool when joining or swapping.\n * When using proportional amounts to join a pool the price impact will be minimal.\n *\n * @param pool - Pool object\n * @param token - Token address in relation to which the amounts are calculated\n * @param amount - Amount of token\n * @returns Object with tokens and amounts\n * @example\n * const pool = {\n *   id: '0x0000',\n *   tokens: [\n *     { address: '0x1234', balance: '10' },\n *     { address: '0x5678', balance: '20' }\n *   ]\n * }\n *\n * const { tokens, amounts } = proportionalAmounts(pool, '0x1234', '1000000000000000000')\n */\nexport const proportionalAmounts = (\n  pool: {\n    id: string;\n    tokens: { address: string; balance: string; decimals?: number }[];\n  },\n  token: string,\n  amount: string\n): {\n  tokens: string[];\n  amounts: string[];\n} => {\n  const tokensWithoutBpt = pool.tokens.filter(\n    (t) => !pool.id.toLowerCase().includes(t.address.toLowerCase())\n  );\n  const referenceTokenIndex = tokensWithoutBpt.findIndex(\n    (t) => t.address.toLowerCase() === token.toLowerCase()\n  );\n\n  if (referenceTokenIndex == -1) {\n    throw new Error('Token not found in pool');\n  }\n\n  const balances = tokensWithoutBpt.map((t) =>\n    parseUnits(t.balance, t.decimals)\n  );\n  const amountBn = BigNumber.from(amount);\n  const proportionalAmounts = balances.map((b) =>\n    b.mul(amountBn).div(balances[referenceTokenIndex])\n  );\n\n  return {\n    tokens: tokensWithoutBpt.map((t) => t.address),\n    amounts: proportionalAmounts.map((a) => a.toString()),\n  };\n};\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { JsonRpcSigner } from '@ethersproject/providers';\n\nimport { BalancerError } from '@/balancerErrors';\nimport { Contracts } from '@/modules/contracts/contracts.module';\nimport { ImpermanentLossService } from '@/modules/pools/impermanentLoss/impermanentLossService';\nimport type {\n  BalancerNetworkConfig,\n  BalancerDataRepositories,\n  Findable,\n  Searchable,\n  Pool,\n  PoolWithMethods,\n  AprBreakdown,\n  PoolAttribute,\n} from '@/types';\nimport { Logger } from '@/lib/utils/logger';\n\nimport {\n  ExitExactBPTInAttributes,\n  JoinPoolAttributes,\n} from './pool-types/concerns/types';\nimport { PoolTypeConcerns } from './pool-type-concerns';\nimport { PoolApr } from './apr/apr';\nimport { Liquidity } from '../liquidity/liquidity.module';\nimport { Join } from '../joins/joins.module';\nimport { Exit, GeneralisedExitOutput, ExitInfo } from '../exits/exits.module';\nimport { PoolVolume } from './volume/volume';\nimport { PoolFees } from './fees/fees';\nimport { Simulation, SimulationType } from '../simulation/simulation.module';\nimport { PoolGraph } from '../graph/graph';\nimport { PoolFactory__factory } from './pool-factory__factory';\nimport * as Queries from './queries';\nimport { EmissionsService } from './emissions';\nimport { proportionalAmounts } from './proportional-amounts';\n\nconst notImplemented = (poolType: string, name: string) => () => {\n  throw `${name} for poolType ${poolType} not implemented`;\n};\n\n/**\n * Controller / use-case layer for interacting with pools data.\n */\nexport class Pools implements Findable<PoolWithMethods> {\n  aprService;\n  liquidityService;\n  joinService;\n  exitService;\n  feesService;\n  volumeService;\n  simulationService;\n  poolFactory;\n  impermanentLossService;\n  graphService;\n  emissionsService;\n  proportionalAmounts;\n\n  constructor(\n    private networkConfig: BalancerNetworkConfig,\n    private repositories: BalancerDataRepositories,\n    private balancerContracts: Contracts\n  ) {\n    this.aprService = new PoolApr(\n      this.repositories.pools,\n      this.repositories.tokenPrices,\n      this.repositories.tokenMeta,\n      this.repositories.tokenYields,\n      this.repositories.feeCollector,\n      this.repositories.yesterdaysPools,\n      this.repositories.liquidityGauges,\n      this.repositories.feeDistributor,\n      this.repositories.gyroConfigRepository\n    );\n    this.liquidityService = new Liquidity(\n      repositories.pools,\n      repositories.tokenPrices\n    );\n    this.simulationService = new Simulation(\n      networkConfig,\n      this.repositories.poolsForSimulations\n    );\n    this.graphService = new PoolGraph(this.repositories.poolsOnChain);\n    this.joinService = new Join(\n      this.graphService,\n      networkConfig,\n      this.simulationService\n    );\n    this.exitService = new Exit(\n      this.graphService,\n      networkConfig,\n      this.simulationService\n    );\n    this.feesService = new PoolFees(repositories.yesterdaysPools);\n    this.volumeService = new PoolVolume(repositories.yesterdaysPools);\n    this.poolFactory = new PoolFactory__factory(\n      networkConfig,\n      balancerContracts\n    );\n    this.impermanentLossService = new ImpermanentLossService(\n      repositories.tokenPrices,\n      repositories.tokenHistoricalPrices\n    );\n    if (repositories.liquidityGauges) {\n      this.emissionsService = new EmissionsService(\n        repositories.liquidityGauges\n      );\n    }\n    this.proportionalAmounts = proportionalAmounts;\n  }\n\n  static wrap(\n    pool: Pool,\n    networkConfig: BalancerNetworkConfig\n  ): PoolWithMethods {\n    let concerns: ReturnType<typeof PoolTypeConcerns.from>;\n    let queries: Queries.ParamsBuilder;\n    let methods;\n    try {\n      concerns = PoolTypeConcerns.from(pool.poolType);\n      methods = {\n        buildJoin: (\n          joiner: string,\n          tokensIn: string[],\n          amountsIn: string[],\n          slippage: string\n        ): JoinPoolAttributes => {\n          return concerns.join.buildJoin({\n            joiner,\n            pool,\n            tokensIn,\n            amountsIn,\n            slippage,\n            wrappedNativeAsset,\n          });\n        },\n        calcPriceImpact: async (\n          tokenAmounts: string[],\n          bptAmount: string,\n          isJoin: boolean\n        ) =>\n          concerns.priceImpactCalculator.calcPriceImpact(\n            pool,\n            tokenAmounts.map(BigInt),\n            BigInt(bptAmount),\n            isJoin\n          ),\n        buildExitExactBPTIn: (\n          exiter: string,\n          bptIn: string,\n          slippage: string,\n          shouldUnwrapNativeAsset = false,\n          singleTokenOut?: string,\n          toInternalBalance = false\n        ) => {\n          if (concerns.exit.buildExitExactBPTIn) {\n            return concerns.exit.buildExitExactBPTIn({\n              exiter,\n              pool,\n              bptIn,\n              slippage,\n              shouldUnwrapNativeAsset,\n              wrappedNativeAsset,\n              singleTokenOut,\n              toInternalBalance,\n            });\n          } else {\n            throw 'ExitExactBPTIn not supported';\n          }\n        },\n        buildExitExactTokensOut: (\n          exiter: string,\n          tokensOut: string[],\n          amountsOut: string[],\n          slippage: string,\n          toInternalBalance = false\n        ) =>\n          concerns.exit.buildExitExactTokensOut({\n            exiter,\n            pool,\n            tokensOut,\n            amountsOut,\n            slippage,\n            wrappedNativeAsset,\n            toInternalBalance,\n          }),\n        buildRecoveryExit: (\n          exiter: string,\n          bptIn: string,\n          slippage: string,\n          toInternalBalance = false\n        ) =>\n          concerns.exit.buildRecoveryExit({\n            exiter,\n            pool,\n            bptIn,\n            slippage,\n            toInternalBalance,\n          }),\n\n        // TODO: spotPrice fails, because it needs a subgraphType,\n        // either we refetch or it needs a type transformation from SDK internal to SOR (subgraph)\n        // spotPrice: async (tokenIn: string, tokenOut: string) =>\n        //   methods.spotPriceCalculator.calcPoolSpotPrice(tokenIn, tokenOut, data),\n        calcSpotPrice: (tokenIn: string, tokenOut: string) =>\n          concerns.spotPriceCalculator.calcPoolSpotPrice(\n            tokenIn,\n            tokenOut,\n            pool\n          ),\n        calcProportionalAmounts: (token: string, amount: string) => {\n          return proportionalAmounts(pool, token, amount);\n        },\n      };\n    } catch (error) {\n      if ((error as BalancerError).code != 'UNSUPPORTED_POOL_TYPE') {\n        const logger = Logger.getInstance();\n        logger.warn(error as string);\n      }\n\n      methods = {\n        buildJoin: notImplemented(pool.poolType, 'buildJoin'),\n        calcPriceImpact: notImplemented(pool.poolType, 'calcPriceImpact'),\n        buildExitExactBPTIn: notImplemented(\n          pool.poolType,\n          'buildExitExactBPTIn'\n        ),\n        buildExitExactTokensOut: notImplemented(\n          pool.poolType,\n          'buildExitExactTokensOut'\n        ),\n        calcSpotPrice: notImplemented(pool.poolType, 'calcSpotPrice'),\n        buildRecoveryExit: notImplemented(pool.poolType, 'buildRecoveryExit'),\n      };\n    }\n\n    try {\n      queries = new Queries.ParamsBuilder(pool);\n      methods = {\n        ...methods,\n        buildQueryJoinExactIn: queries.buildQueryJoinExactIn.bind(queries),\n        buildQueryJoinExactOut: queries.buildQueryJoinExactOut.bind(queries),\n        buildQueryExitExactOut: queries.buildQueryExitExactOut.bind(queries),\n        buildQueryExitToSingleToken:\n          queries.buildQueryExitToSingleToken.bind(queries),\n        buildQueryExitProportionally:\n          queries.buildQueryExitProportionally.bind(queries),\n      };\n    } catch (error) {\n      methods = {\n        ...methods,\n        buildQueryJoinExactIn: notImplemented(\n          pool.poolType,\n          'buildQueryJoinExactIn'\n        ),\n        buildQueryJoinExactOut: notImplemented(\n          pool.poolType,\n          'buildQueryJoinExactOut'\n        ),\n        buildQueryExitExactOut: notImplemented(\n          pool.poolType,\n          'buildQueryExitExactOut'\n        ),\n        buildQueryExitToSingleToken: notImplemented(\n          pool.poolType,\n          'buildQueryExitToSingleToken'\n        ),\n        buildQueryExitProportionally: notImplemented(\n          pool.poolType,\n          'buildQueryExitProportionally'\n        ),\n      };\n    }\n    const wrappedNativeAsset =\n      networkConfig.addresses.tokens.wrappedNativeAsset.toLowerCase();\n    const bptIndex = pool.tokensList.indexOf(pool.address);\n    return {\n      ...pool,\n      ...methods,\n      bptIndex,\n    };\n  }\n\n  dataSource(): Findable<Pool, PoolAttribute> & Searchable<Pool> {\n    // TODO: Add API data repository to data and use liveModelProvider as fallback\n    return this.repositories.pools;\n  }\n\n  /**\n   * Calculates APR on any pool data\n   *\n   * @param pool\n   * @returns\n   */\n  async apr(pool: Pool): Promise<AprBreakdown> {\n    return this.aprService.apr(pool);\n  }\n\n  /**\n   * Calculates Impermanent Loss on any pool data\n   *\n   * @param timestamp\n   * @param pool\n   * @returns\n   */\n  async impermanentLoss(timestamp: number, pool: Pool): Promise<number> {\n    return this.impermanentLossService.calcImpLoss(timestamp, pool);\n  }\n\n  /**\n   * Calculates total pool liquidity in USD\n   *\n   * @param pool\n   * @returns total pool liquidity in USD\n   */\n  async liquidity(pool: Pool): Promise<string> {\n    return this.liquidityService.getLiquidity(pool);\n  }\n\n  /**\n   * Calculates pool's BPT price in USD\n   *\n   * @param pool\n   * @returns pool's BPT price in USD\n   */\n  async bptPrice(pool: Pool): Promise<string> {\n    return this.liquidityService.getBptPrice(pool);\n  }\n\n  /**\n   * Builds join transaction\n   *\n   * @param pool            Pool\n   * @param tokensIn        Token addresses\n   * @param amountsIn       Token amounts in EVM scale\n   * @param userAddress     User address\n   * @param slippage        Maximum slippage tolerance in bps i.e. 50 = 0.5%.\n   * @returns               Transaction object\n   * @throws                Error if pool type is not implemented\n   */\n  buildJoin({\n    pool,\n    tokensIn,\n    amountsIn,\n    userAddress,\n    slippage,\n  }: {\n    pool: Pool;\n    tokensIn: string[];\n    amountsIn: string[];\n    userAddress: string;\n    slippage: string;\n  }): JoinPoolAttributes {\n    const concerns = PoolTypeConcerns.from(pool.poolType);\n\n    if (!concerns)\n      throw `buildJoin for poolType ${pool.poolType} not implemented`;\n\n    return concerns.join.buildJoin({\n      joiner: userAddress,\n      pool,\n      tokensIn,\n      amountsIn,\n      slippage,\n      wrappedNativeAsset:\n        this.networkConfig.addresses.tokens.wrappedNativeAsset.toLowerCase(),\n    });\n  }\n\n  buildExitExactBPTIn({\n    pool,\n    bptAmount,\n    userAddress,\n    slippage,\n    shouldUnwrapNativeAsset,\n    singleTokenOut,\n  }: {\n    pool: Pool;\n    bptAmount: string;\n    userAddress: string;\n    slippage: string;\n    shouldUnwrapNativeAsset?: boolean;\n    singleTokenOut?: string;\n  }): ExitExactBPTInAttributes {\n    const concerns = PoolTypeConcerns.from(pool.poolType);\n    if (!concerns || !concerns.exit.buildExitExactBPTIn)\n      throw `buildExit for poolType ${pool.poolType} not implemented`;\n\n    return concerns.exit.buildExitExactBPTIn({\n      pool,\n      exiter: userAddress,\n      bptIn: bptAmount,\n      slippage,\n      wrappedNativeAsset:\n        this.networkConfig.addresses.tokens.wrappedNativeAsset.toLowerCase(),\n      shouldUnwrapNativeAsset: shouldUnwrapNativeAsset ?? false,\n      singleTokenOut: singleTokenOut ?? undefined,\n      toInternalBalance: false,\n    });\n  }\n\n  buildRecoveryExit({\n    pool,\n    bptAmount,\n    userAddress,\n    slippage,\n    toInternalBalance,\n  }: {\n    pool: Pool;\n    bptAmount: string;\n    userAddress: string;\n    slippage: string;\n    toInternalBalance?: boolean;\n  }): ExitExactBPTInAttributes {\n    const concerns = PoolTypeConcerns.from(pool.poolType);\n    if (!concerns || !concerns.exit.buildRecoveryExit)\n      throw `buildRecoveryExit for poolType ${pool.poolType} not implemented`;\n\n    return concerns.exit.buildRecoveryExit({\n      exiter: userAddress,\n      pool,\n      bptIn: bptAmount,\n      slippage,\n      toInternalBalance: !!toInternalBalance,\n    });\n  }\n\n  /**\n   * Builds generalised join transaction\n   *\n   * @param poolId          Pool id\n   * @param tokens          Token addresses\n   * @param amounts         Token amounts in EVM scale\n   * @param userAddress     User address\n   * @param slippage        Maximum slippage tolerance in bps i.e. 50 = 0.5%.\n   * @param signer          JsonRpcSigner that will sign the staticCall transaction if Static simulation chosen\n   * @param simulationType  Simulation type (VaultModel, Tenderly or Static)\n   * @param authorisation   Optional auhtorisation call to be added to the chained transaction\n   * @returns transaction data ready to be sent to the network along with min and expected BPT amounts out.\n   */\n  async generalisedJoin(\n    poolId: string,\n    tokens: string[],\n    amounts: string[],\n    userAddress: string,\n    slippage: string,\n    signer: JsonRpcSigner,\n    simulationType: SimulationType,\n    authorisation?: string\n  ): Promise<{\n    to: string;\n    encodedCall: string;\n    minOut: string;\n    expectedOut: string;\n    priceImpact: string;\n    value: BigNumberish;\n  }> {\n    return this.joinService.joinPool(\n      poolId,\n      tokens,\n      amounts,\n      userAddress,\n      slippage,\n      signer,\n      simulationType,\n      authorisation\n    );\n  }\n\n  /**\n   * Builds generalised exit transaction\n   *\n   * @param poolId          Pool id\n   * @param amount          Token amount in EVM scale\n   * @param userAddress     User address\n   * @param slippage        Maximum slippage tolerance in bps i.e. 50 = 0.5%.\n   * @param signer          JsonRpcSigner that will sign the staticCall transaction if Static simulation chosen\n   * @param simulationType  Simulation type (Tenderly or Static) - VaultModel should not be used to build exit transaction\n   * @param authorisation   Optional auhtorisation call to be added to the chained transaction\n   * @param tokensToUnwrap  List all tokens that requires exit by unwrapping - info provided by getExitInfo\n   * @returns transaction data ready to be sent to the network along with tokens, min and expected amounts out.\n   */\n  async generalisedExit(\n    poolId: string,\n    amount: string,\n    userAddress: string,\n    slippage: string,\n    signer: JsonRpcSigner,\n    simulationType: SimulationType.Static | SimulationType.Tenderly,\n    authorisation?: string,\n    tokensToUnwrap?: string[]\n  ): Promise<GeneralisedExitOutput> {\n    return this.exitService.buildExitCall(\n      poolId,\n      amount,\n      userAddress,\n      slippage,\n      signer,\n      simulationType,\n      authorisation,\n      tokensToUnwrap\n    );\n  }\n\n  /**\n   * Calculates price impact for an action on a pool\n   *\n   * @param pool\n   * @returns percentage as a string in EVM scale\n   */\n  calcPriceImpact({\n    pool,\n    tokenAmounts,\n    bptAmount,\n    isJoin,\n  }: {\n    pool: Pool;\n    tokenAmounts: string[];\n    bptAmount: string;\n    isJoin: boolean;\n  }): string {\n    const concerns = PoolTypeConcerns.from(pool.poolType);\n    return concerns.priceImpactCalculator.calcPriceImpact(\n      pool,\n      tokenAmounts.map(BigInt),\n      BigInt(bptAmount),\n      isJoin\n    );\n  }\n\n  /**\n   * Gets info required to build generalised exit transaction\n   *\n   * @param poolId          Pool id\n   * @param amountBptIn     BPT amount in EVM scale\n   * @param userAddress     User address\n   * @param signer          JsonRpcSigner that will sign the staticCall transaction if Static simulation chosen\n   * @returns info required to build a generalised exit transaction including whether tokens need to be unwrapped\n   */\n  async getExitInfo(\n    poolId: string,\n    amountBptIn: string,\n    userAddress: string,\n    signer: JsonRpcSigner\n  ): Promise<ExitInfo> {\n    return this.exitService.getExitInfo(\n      poolId,\n      amountBptIn,\n      userAddress,\n      signer\n    );\n  }\n\n  /**\n   * Calculates total fees for the pool in the last 24 hours\n   *\n   * @param pool\n   * @returns\n   */\n  async fees(pool: Pool): Promise<number> {\n    return this.feesService.last24h(pool);\n  }\n\n  /**\n   * Calculates total volume of the pool in the last 24 hours\n   *\n   * @param pool\n   * @returns\n   */\n  async volume(pool: Pool): Promise<number> {\n    return this.volumeService.last24h(pool);\n  }\n\n  async find(id: string): Promise<PoolWithMethods | undefined> {\n    const data = await this.dataSource().find(id);\n    if (!data) return;\n\n    return Pools.wrap(data, this.networkConfig);\n  }\n\n  async findBy(\n    param: string,\n    value: string\n  ): Promise<PoolWithMethods | undefined> {\n    if (param == 'id') {\n      return this.find(value);\n    } else if (param == 'address') {\n      const data = await this.dataSource().findBy('address', value);\n      if (!data) return;\n\n      return Pools.wrap(data, this.networkConfig);\n    } else {\n      throw `search by ${param} not implemented`;\n    }\n  }\n\n  async all(): Promise<PoolWithMethods[]> {\n    const list = await this.dataSource().all();\n    if (!list) return [];\n\n    return list\n      .map((data: Pool) => Pools.wrap(data, this.networkConfig))\n      .filter((p) => p) as PoolWithMethods[];\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<PoolWithMethods[]> {\n    const list = await this.dataSource().where(filter);\n    if (!list) return [];\n\n    const wrapped = list.map((data: Pool) =>\n      Pools.wrap(data, this.networkConfig)\n    );\n\n    return wrapped.filter((p) => p) as PoolWithMethods[];\n  }\n}\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"strings/5.6.1\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = arrayify(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            }\n            else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8: return \"\\\\b\";\n                case 9: return \"\\\\t\";\n                case 10: return \"\\\\n\";\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map","\"use strict\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\nexport function formatBytes32String(text) {\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    // Zero-pad (implicitly null-terminates)\n    return hexlify(concat([bytes, HashZero]).slice(0, 32));\n}\nexport function parseBytes32String(bytes) {\n    const data = arrayify(bytes);\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) {\n        length--;\n    }\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n//# sourceMappingURL=bytes32.js.map","/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","export const version = \"solidity/5.6.1\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = BigNumber.from(value).toTwos(size);\n        return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n    return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n    return hashSha256(pack(types, values));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport sha3 from \"js-sha3\";\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function keccak256(data) {\n    return '0x' + sha3.keccak_256(arrayify(data));\n}\n//# sourceMappingURL=index.js.map","import { formatBytes32String } from '@ethersproject/strings';\nimport { keccak256 } from '@ethersproject/solidity';\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { Provider } from '@ethersproject/providers';\nimport { GyroConfig, GyroConfig__factory, Multicall } from '@/contracts';\nimport { GyroConfigInterface } from '@/contracts/GyroConfig';\n\nexport interface GyroConfigRepository {\n  getGyroProtocolFee(poolAddress: string): Promise<number>;\n}\n\nconst protocolFeePercKey = formatBytes32String('PROTOCOL_SWAP_FEE_PERC');\nconst gyroPoolTypeKey = formatBytes32String('E-CLP');\nconst encodedPoolTypeKey = keccak256(\n  ['bytes'],\n  [\n    defaultAbiCoder.encode(\n      ['bytes32', 'bytes32'],\n      [protocolFeePercKey, gyroPoolTypeKey]\n    ),\n  ]\n);\n\nexport class GyroConfigRepositoryImpl implements GyroConfigRepository {\n  gyroConfigInterface: GyroConfigInterface;\n  gyroConfig: GyroConfig;\n\n  constructor(\n    private gyroConfigAddress: string,\n    private multicall: Multicall,\n    provider: Provider\n  ) {\n    this.gyroConfigInterface = GyroConfig__factory.createInterface();\n    this.gyroConfig = GyroConfig__factory.connect(gyroConfigAddress, provider);\n  }\n\n  async getGyroProtocolFee(poolAddress: string): Promise<number> {\n    let fee;\n    const encodedPoolSpecificKey = keccak256(\n      ['bytes'],\n      [\n        defaultAbiCoder.encode(\n          ['bytes32', 'uint256'],\n          [protocolFeePercKey, poolAddress]\n        ),\n      ]\n    );\n    const payload = [\n      {\n        target: this.gyroConfigAddress,\n        callData: this.gyroConfigInterface.encodeFunctionData('hasKey', [\n          encodedPoolSpecificKey,\n        ]),\n      },\n      {\n        target: this.gyroConfigAddress,\n        callData: this.gyroConfigInterface.encodeFunctionData('hasKey', [\n          encodedPoolTypeKey,\n        ]),\n      },\n      {\n        target: this.gyroConfigAddress,\n        callData: this.gyroConfigInterface.encodeFunctionData('hasKey', [\n          protocolFeePercKey,\n        ]),\n      },\n    ];\n    const [, [hasSpecificKeyHex, hasPoolTypeKeyHex, hasDefaultKeyHex]] =\n      await this.multicall.callStatic.aggregate(payload);\n    const hasSpecificKey = BigNumber.from(hasSpecificKeyHex).eq(1);\n    const hasPoolTypeKey = BigNumber.from(hasPoolTypeKeyHex).eq(1);\n    const hasDefaultKey = BigNumber.from(hasDefaultKeyHex).eq(1);\n    if (hasSpecificKey) {\n      fee = parseFloat(\n        formatFixed(await this.gyroConfig.getUint(encodedPoolSpecificKey), 18)\n      );\n    } else if (hasPoolTypeKey) {\n      fee = parseFloat(\n        formatFixed(await this.gyroConfig.getUint(encodedPoolTypeKey), 18)\n      );\n    } else if (hasDefaultKey) {\n      fee = parseFloat(\n        formatFixed(await this.gyroConfig.getUint(protocolFeePercKey), 18)\n      );\n    } else {\n      fee = 0;\n    }\n    return fee;\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport { getAddress } from '@ethersproject/address';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/contracts';\n\nconst gaugeControllerInterface = new Interface([\n  'function gauge_relative_weight(address gauge, uint timestamp) view returns (uint)',\n]);\n\nconst gaugeControllerCheckpointerInterface = new Interface([\n  'function gauge_relative_weight(address gauge) view returns (uint)',\n]);\n\nexport class GaugeControllerMulticallRepository {\n  constructor(\n    private multicall: Multicall,\n    private gaugeControllerAddress: string,\n    private gaugeControllerCheckpointerAddress?: string\n  ) {}\n\n  async getRelativeWeights(\n    gaugeAddresses: string[],\n    timestamp?: number\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const payload = gaugeAddresses.map((gaugeAddress) => {\n      // The checkpointer only exists for mainnet, if the network is a testnet, it'll use the regular gauge controller\n      if (this.gaugeControllerCheckpointerAddress && !timestamp) {\n        return {\n          target: this.gaugeControllerCheckpointerAddress,\n          callData: gaugeControllerCheckpointerInterface.encodeFunctionData(\n            'gauge_relative_weight',\n            [getAddress(gaugeAddress)]\n          ),\n        };\n      }\n      return {\n        target: this.gaugeControllerAddress,\n        callData: gaugeControllerInterface.encodeFunctionData(\n          'gauge_relative_weight',\n          [getAddress(gaugeAddress), timestamp || Math.floor(Date.now() / 1000)]\n        ),\n      };\n    });\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n\n    const weights = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return weights;\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { Findable } from '@/types';\n\nexport abstract class AbstractSubgraphRepository<T, A>\n  implements Findable<T, A>\n{\n  protected abstract mapType(subgraphFragment: any): T;\n\n  abstract query(args: any): Promise<T[]>;\n\n  async get(args: any): Promise<T | undefined> {\n    const result = await this.query(args);\n    return result?.length > 0 ? result[0] : undefined;\n  }\n\n  async find(id: string): Promise<T | undefined> {\n    return this.get({ where: { id: id } });\n  }\n\n  async findBy(attribute: A, value: string): Promise<T | undefined> {\n    return this.get({ where: { [String(attribute)]: value } });\n  }\n\n  async findAllBy(\n    attribute: A,\n    value: string,\n    first = 1000,\n    skip = 0\n  ): Promise<T[]> {\n    const args = {\n      where: { [String(attribute)]: value },\n      first: first,\n      skip: skip,\n    };\n    return this.query(args);\n  }\n}\n","import { Network } from '@/lib/constants/network';\nimport { AbstractSubgraphRepository } from './abstract-subgraph-repository';\nimport { createSubgraphClient, SubgraphClient } from '../subgraph';\n\nexport abstract class BalancerSubgraphRepository<\n  T,\n  A\n> extends AbstractSubgraphRepository<T, A> {\n  protected client: SubgraphClient;\n\n  constructor(\n    url: string,\n    protected chainId: Network,\n    protected blockHeight?: () => Promise<number | undefined>\n  ) {\n    super();\n    this.client = createSubgraphClient(url);\n  }\n}\n","import { Network } from '@/lib/constants/network';\nimport { AbstractSubgraphRepository } from './abstract-subgraph-repository';\nimport { createGaugesClient, GaugesClient } from '../subgraph';\n\nexport abstract class GaugesSubgraphRepository<\n  T,\n  A\n> extends AbstractSubgraphRepository<T, A> {\n  protected client: GaugesClient;\n\n  constructor(\n    url: string,\n    protected chainId: Network,\n    protected blockHeight?: () => Promise<number | undefined>\n  ) {\n    super();\n    this.client = createGaugesClient(url);\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { GaugeShare, GaugeShareAttributes } from './types';\nimport { GaugesSubgraphRepository } from '@/modules/subgraph/repository';\nimport {\n  SubgraphGaugeShareFragment,\n  GaugeShare_OrderBy,\n  OrderDirection,\n} from '@/modules/subgraph/generated/balancer-gauges';\n\nexport class GaugeSharesRepository extends GaugesSubgraphRepository<\n  GaugeShare,\n  GaugeShareAttributes\n> {\n  async query(args: any): Promise<GaugeShare[]> {\n    if (!args.orderBy) args.orderBy = GaugeShare_OrderBy.balance;\n    if (!args.orderDirection) args.orderDirection = OrderDirection.desc;\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { gaugeShares } = await this.client.GaugeShares(args);\n    return gaugeShares.map(this.mapType);\n  }\n\n  mapType(subgraphGaugeShare: SubgraphGaugeShareFragment): GaugeShare {\n    return {\n      id: subgraphGaugeShare.id,\n      balance: subgraphGaugeShare.balance,\n      userAddress: subgraphGaugeShare.user?.id,\n      gauge: {\n        id: subgraphGaugeShare.gauge.id,\n        poolId: subgraphGaugeShare.gauge.poolId || undefined,\n        isKilled: subgraphGaugeShare.gauge.isKilled,\n        totalSupply: subgraphGaugeShare.gauge.totalSupply,\n      },\n    };\n  }\n\n  async findByUser(\n    userAddress: string,\n    first?: number,\n    skip?: number\n  ): Promise<GaugeShare[]> {\n    return this.findAllBy(\n      GaugeShareAttributes.UserAddress,\n      userAddress,\n      first,\n      skip\n    );\n  }\n\n  async findByGauge(\n    gaugeId: string,\n    first?: number,\n    skip?: number\n  ): Promise<GaugeShare[]> {\n    return this.findAllBy(GaugeShareAttributes.GaugeId, gaugeId, first, skip);\n  }\n}\n","import { Multicall } from '@/contracts';\nimport { Interface } from '@ethersproject/abi';\nimport { formatUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport type { Network } from '@/types';\n\nconst liquidityGaugeV5Interface = new Interface([\n  'function totalSupply() view returns (uint)',\n  'function working_supply() view returns (uint)',\n  'function reward_count() view returns (uint)',\n  'function reward_tokens(uint rewardIndex) view returns (address)',\n  'function reward_data(address rewardToken) view returns (tuple(address distributor, uint period_finish, uint rate, uint last_update, uint integral) data)',\n]);\n\nconst childLiquidityGaugeInterface = new Interface([\n  'function inflation_rate(uint currentWeekTimestamp) view returns (uint)',\n]);\n\nexport interface RewardData {\n  token: string; // Always 0x0\n  distributor: string;\n  period_finish: BigNumber;\n  rate: BigNumber; // per second\n  last_update: BigNumber;\n  integral: BigNumber; // sum accrued to date\n  decimals?: number; // Provided by subgraph\n}\n\n/**\n * A lot of code to get liquidity gauge state via RPC multicall.\n * TODO: reseach helper contracts or extend subgraph\n */\nexport class LiquidityGaugesMulticallRepository {\n  constructor(private multicall: Multicall, private chainId: Network) {}\n\n  async getTotalSupplies(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const payload = gaugeAddresses.map((gaugeAddress) => ({\n      target: gaugeAddress,\n      callData: liquidityGaugeV5Interface.encodeFunctionData('totalSupply', []),\n    }));\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n    // Handle 0x\n    const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n    const totalSupplies = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res0x[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return totalSupplies;\n  }\n\n  async getWorkingSupplies(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const payload = gaugeAddresses.map((gaugeAddress) => ({\n      target: gaugeAddress,\n      callData: liquidityGaugeV5Interface.encodeFunctionData(\n        'working_supply',\n        []\n      ),\n    }));\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n    // Handle 0x\n    const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n    const workingSupplies = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res0x[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return workingSupplies;\n  }\n\n  async getInflationRates(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const currentWeek = Math.floor(Date.now() / 1000 / 604800);\n    const payload = gaugeAddresses.map((gaugeAddress) => ({\n      target: gaugeAddress,\n      callData: childLiquidityGaugeInterface.encodeFunctionData(\n        'inflation_rate',\n        [currentWeek]\n      ),\n    }));\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n    // Handle 0x\n    const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n    const inflationRates = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res0x[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return inflationRates;\n  }\n\n  async getRewardCounts(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    let rewardCounts;\n    if (this.chainId == 1) {\n      const payload = gaugeAddresses.map((gaugeAddress) => ({\n        target: gaugeAddress,\n        callData: liquidityGaugeV5Interface.encodeFunctionData(\n          'reward_count',\n          []\n        ),\n      }));\n      const [, res] = await this.multicall.callStatic.aggregate(payload);\n      // Handle 0x return values\n      const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n      rewardCounts = gaugeAddresses.reduce(\n        (p: { [key: string]: number }, a, i) => {\n          p[a] ||= parseInt(res0x[i]);\n          return p;\n        },\n        {}\n      );\n    } else {\n      rewardCounts = gaugeAddresses.reduce(\n        (p: { [key: string]: number }, a) => {\n          p[a] ||= 1;\n          return p;\n        },\n        {}\n      );\n    }\n\n    return rewardCounts;\n  }\n\n  async getRewardTokens(\n    gaugeAddresses: string[],\n    passingRewardCounts?: { [gaugeAddress: string]: number }\n  ): Promise<{ [gaugeAddress: string]: string[] }> {\n    const rewardCounts =\n      passingRewardCounts || (await this.getRewardCounts(gaugeAddresses));\n    const gaugesWithRewards = gaugeAddresses.filter(\n      (gaugeAddress) => rewardCounts[gaugeAddress] > 0\n    );\n    const startIndexes = [0];\n    const payload = gaugesWithRewards\n      .map((gaugeAddress, gaugeIndex) => {\n        const calls = [];\n        for (let i = 0; i < rewardCounts[gaugeAddress]; i++) {\n          calls.push({\n            target: gaugeAddress,\n            callData: liquidityGaugeV5Interface.encodeFunctionData(\n              'reward_tokens',\n              [i]\n            ),\n          });\n        }\n        startIndexes[gaugeIndex + 1] =\n          startIndexes[gaugeIndex] + rewardCounts[gaugeAddress];\n        return calls;\n      })\n      .flat();\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n\n    const rewardTokens = gaugesWithRewards.reduce(\n      (p: { [key: string]: string[] }, a, i) => {\n        const start = startIndexes[i];\n        const end = startIndexes[i + 1];\n        const tokens: string[] = [];\n        for (let i = start; i < end; i++) {\n          tokens.push(\n            liquidityGaugeV5Interface.decodeFunctionResult(\n              'reward_tokens',\n              res[i]\n            )[0]\n          );\n        }\n        p[a] ||= tokens;\n        return p;\n      },\n      {}\n    );\n\n    return rewardTokens;\n  }\n\n  async getRewardData(\n    gaugeAddresses: string[],\n    passingRewardTokens?: { [gaugeAddress: string]: string[] }\n  ): Promise<{\n    [gaugeAddress: string]: { [rewardTokenAddress: string]: RewardData };\n  }> {\n    const rewardTokens =\n      passingRewardTokens || (await this.getRewardTokens(gaugeAddresses));\n\n    const startIndexes = [0];\n    const payload = Object.keys(rewardTokens)\n      .map((gaugeAddress, gaugeIndex) => {\n        const calls = [];\n        for (let i = 0; i < rewardTokens[gaugeAddress].length; i++) {\n          calls.push({\n            target: gaugeAddress,\n            callData: liquidityGaugeV5Interface.encodeFunctionData(\n              'reward_data',\n              [rewardTokens[gaugeAddress][i]]\n            ),\n          });\n        }\n        startIndexes[gaugeIndex + 1] =\n          startIndexes[gaugeIndex] + rewardTokens[gaugeAddress].length;\n        return calls;\n      })\n      .flat();\n    const [, res] = (await this.multicall.callStatic.aggregate(payload)) as [\n      unknown,\n      string[]\n    ];\n    const decoded = res.map(\n      (r) => liquidityGaugeV5Interface.decodeFunctionResult('reward_data', r)[0]\n    );\n\n    const rewardData = Object.keys(rewardTokens).reduce(\n      (p: { [key: string]: { [key: string]: RewardData } }, a, i) => {\n        const start = startIndexes[i];\n        const data = rewardTokens[a].reduce(\n          (d: { [key: string]: RewardData }, t, x) => {\n            d[t] ||= decoded[start + x] as RewardData;\n            return d;\n          },\n          {}\n        );\n        p[a] ||= data;\n        return p;\n      },\n      {}\n    );\n\n    return rewardData;\n  }\n}\n","import { Findable } from '../types';\nimport {\n  createGaugesClient,\n  GaugesClient,\n  SubgraphLiquidityGauge,\n} from '@/modules/subgraph/subgraph';\n\n/**\n * Access liquidity gauges indexed by subgraph.\n * Because we have ~100 gauges to save on repeated http calls we cache all results as `gauges` on an instance.\n * Balancer's subgraph URL: https://thegraph.com/hosted-service/subgraph/balancer-labs/balancer-gauges\n */\nexport class LiquidityGaugesSubgraphRepository\n  implements Findable<SubgraphLiquidityGauge>\n{\n  private client: GaugesClient;\n  public gauges: SubgraphLiquidityGauge[] = [];\n\n  constructor(url: string) {\n    this.client = createGaugesClient(url);\n  }\n\n  async fetch(): Promise<SubgraphLiquidityGauge[]> {\n    console.time('fetching liquidity gauges');\n    const queryResult = await this.client.Pools({\n      first: 1000,\n      where: {\n        preferentialGauge_not: null,\n      },\n    });\n    const qauges = queryResult.pools.map((pool) => pool.preferentialGauge);\n    // TODO: optionally convert subgraph type to sdk internal type\n    this.gauges = qauges as SubgraphLiquidityGauge[];\n\n    console.timeEnd('fetching liquidity gauges');\n    return this.gauges;\n  }\n\n  async find(id: string): Promise<SubgraphLiquidityGauge | undefined> {\n    if (this.gauges.length == 0) {\n      await this.fetch();\n    }\n\n    return this.gauges.find((gauge) => gauge.id == id);\n  }\n\n  async findBy(\n    param: string,\n    value: string\n  ): Promise<SubgraphLiquidityGauge | undefined> {\n    if (this.gauges.length == 0) {\n      await this.fetch();\n    }\n\n    if (param == 'id') {\n      return this.find(value);\n    } else if (param == 'poolId') {\n      return this.gauges.find((gauge) => gauge.poolId == value);\n    } else if (param == 'poolAddress') {\n      return this.gauges.find((gauge) => gauge.poolAddress == value);\n    } else {\n      throw `search by ${param} not implemented`;\n    }\n  }\n}\n","import { GaugeControllerMulticallRepository } from '../gauge-controller/multicall';\nimport { LiquidityGaugesMulticallRepository, RewardData } from './multicall';\nimport { LiquidityGaugesSubgraphRepository } from './subgraph';\nimport { parseUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport type {\n  Maybe,\n  SubgraphLiquidityGauge,\n} from '@/modules/subgraph/subgraph';\nimport type { Findable } from '../types';\nimport type { Network } from '@/types';\nimport { Multicall } from '@/contracts';\n\nexport interface LiquidityGauge {\n  id: string;\n  address: string;\n  name: string;\n  poolId?: Maybe<string>;\n  poolAddress: string;\n  totalSupply: number;\n  workingSupply: number;\n  relativeWeight: number;\n  rewardTokens?: { [tokenAddress: string]: RewardData };\n  claimableTokens?: { [tokenAddress: string]: BigNumber };\n  balInflationRate?: number;\n}\n\nexport class LiquidityGaugeSubgraphRPCProvider\n  implements Findable<LiquidityGauge>\n{\n  gaugeController?: GaugeControllerMulticallRepository;\n  multicall: LiquidityGaugesMulticallRepository;\n  subgraph: LiquidityGaugesSubgraphRepository;\n  workingSupplies: { [gaugeAddress: string]: number } = {};\n  relativeWeights: { [gaugeAddress: string]: number } = {};\n  inflationRates: { [gaugeAddress: string]: number } = {};\n  rewardData: {\n    [gaugeAddress: string]: { [tokenAddress: string]: RewardData };\n  } = {};\n  gauges?: Promise<LiquidityGauge[]>;\n\n  constructor(\n    subgraphUrl: string,\n    multicall: Multicall,\n    gaugeControllerAddress: string,\n    private chainId: Network,\n    gaugeControllerCheckpointerAddress?: string\n  ) {\n    if (gaugeControllerAddress) {\n      this.gaugeController = new GaugeControllerMulticallRepository(\n        multicall,\n        gaugeControllerAddress,\n        gaugeControllerCheckpointerAddress\n      );\n    }\n    this.multicall = new LiquidityGaugesMulticallRepository(multicall, chainId);\n    this.subgraph = new LiquidityGaugesSubgraphRepository(subgraphUrl);\n  }\n\n  async fetch(): Promise<LiquidityGauge[]> {\n    const gauges: SubgraphLiquidityGauge[] = await this.subgraph.fetch();\n    const gaugeAddresses = gauges.map((g) => g.id);\n    if (this.chainId == 1) {\n      console.time('Fetching multicall.getWorkingSupplies');\n      this.workingSupplies = await this.multicall.getWorkingSupplies(\n        gaugeAddresses\n      );\n      console.timeEnd('Fetching multicall.getWorkingSupplies');\n    } else {\n      // Filter out gauges that are not from the factory supporting inflation rate\n      // Safe to remove this once all gauges are migrated to the new factory\n      const oldFactories = [\n        '0x3b8ca519122cdd8efb272b0d3085453404b25bd0', // Polygon\n        '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2', // Arbitrum\n        '0x2e96068b3d5b5bae3d7515da4a1d2e52d08a2647', // Optimism\n        '0x809b79b53f18e9bc08a961ed4678b901ac93213a', // Gnosis\n      ];\n\n      const childGaugeAddresses = gauges\n        .filter((g) => !oldFactories.includes(g.factory.id.toLowerCase()))\n        .map((g) => g.id);\n\n      if (childGaugeAddresses.length > 0) {\n        console.time('Fetching multicall.inflationRates');\n        this.inflationRates = await this.multicall.getInflationRates(\n          childGaugeAddresses\n        );\n        console.timeEnd('Fetching multicall.inflationRates');\n        console.time('Fetching multicall.getWorkingSupplies');\n        this.workingSupplies = await this.multicall.getWorkingSupplies(\n          childGaugeAddresses\n        );\n        console.timeEnd('Fetching multicall.getWorkingSupplies');\n      }\n    }\n    if (this.gaugeController) {\n      console.time('Fetching gaugeController.getRelativeWeights');\n      this.relativeWeights = await this.gaugeController.getRelativeWeights(\n        gaugeAddresses\n      );\n      console.timeEnd('Fetching gaugeController.getRelativeWeights');\n    }\n\n    // Kept as a potential fallback for getting rewardData from RPC\n\n    this.rewardData = await this.multicall.getRewardData(\n      gaugeAddresses //,\n      // rewardTokens\n    );\n\n    // Reward data was made available from subgraph, keeping it separate for potential RPC fallback\n    // this.rewardData = gauges.reduce(\n    //   (r: { [key: string]: { [key: string]: RewardData } }, g) => {\n    //     r[g.id] ||= g.tokens\n    //       ? Object.fromEntries(\n    //           g.tokens.map((t) => [\n    //             t.id.split('-')[0],\n    //             {\n    //               distributor: '',\n    //               last_update: BigNumber.from(0),\n    //               integral: BigNumber.from(0),\n    //               token: t.id.split('-')[0],\n    //               decimals: t.decimals,\n    //               rate: parseUnits(t.rate || '0', t.decimals),\n    //               period_finish: BigNumber.from(\n    //                 (t.periodFinish as unknown as string) || '0'\n    //               ),\n    //             },\n    //           ])\n    //         )\n    //       : {};\n\n    //     return r;\n    //   },\n    //   {}\n    // );\n\n    return gauges.map(this.compose.bind(this));\n  }\n\n  async find(id: string): Promise<LiquidityGauge | undefined> {\n    if (!this.gauges) {\n      this.gauges = this.fetch();\n    }\n\n    return (await this.gauges).find((g) => g.id == id);\n  }\n\n  async findBy(\n    attribute: string,\n    value: string\n  ): Promise<LiquidityGauge | undefined> {\n    if (!this.gauges) {\n      this.gauges = this.fetch();\n    }\n\n    let gauge: LiquidityGauge | undefined;\n    if (attribute == 'id') {\n      return this.find(value);\n    } else if (attribute == 'address') {\n      return this.find(value);\n    } else if (attribute == 'poolId') {\n      gauge = (await this.gauges).find((g) => g.poolId == value);\n    } else if (attribute == 'poolAddress') {\n      gauge = (await this.gauges).find((g) => g.poolAddress == value);\n    } else {\n      throw `search by ${attribute} not implemented`;\n    }\n\n    return gauge;\n  }\n\n  private compose(subgraphGauge: SubgraphLiquidityGauge) {\n    return {\n      id: subgraphGauge.id,\n      address: subgraphGauge.id,\n      name: subgraphGauge.symbol,\n      poolId: subgraphGauge.poolId,\n      poolAddress: subgraphGauge.poolAddress,\n      totalSupply: parseFloat(subgraphGauge.totalSupply),\n      workingSupply: this.workingSupplies[subgraphGauge.id],\n      relativeWeight: this.relativeWeights[subgraphGauge.id],\n      rewardTokens: this.rewardData[subgraphGauge.id],\n      balInflationRate: this.inflationRates[subgraphGauge.id],\n    };\n  }\n}\n","import axios from 'axios';\nimport { jsonToGraphQLQuery } from 'json-to-graphql-query';\n\nexport default class BalancerAPIClient {\n  constructor(private readonly url: string, private readonly apiKey: string) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async get(query: unknown): Promise<any> {\n    try {\n      const payload = this.toPayload(query);\n      const { data } = await axios.post(this.url, payload, {\n        headers: {\n          'x-api-key': this.apiKey,\n        },\n      });\n      if (data.errors) {\n        throw new Error(\n          data.errors.map((error: Error) => error.message).join(',')\n        );\n      }\n      return data.data;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n\n    return [];\n  }\n\n  public toPayload(query: unknown): unknown {\n    return JSON.stringify({ query: jsonToGraphQLQuery({ query }) });\n  }\n}\n","import { Findable } from '../types';\nimport { PoolAttribute, PoolsRepositoryFetchOptions } from './types';\nimport { GraphQLQuery, Pool } from '@/types';\nimport BalancerAPIClient from '@/modules/api/balancer-api.client';\nimport {\n  GraphQLArgsBuilder,\n  BalancerAPIArgsFormatter,\n} from '@/lib/graphql/args-builder';\nimport { GraphQLArgs } from '@/lib/graphql/types';\n\ninterface PoolsBalancerAPIOptions {\n  url: string;\n  apiKey: string;\n  query?: GraphQLQuery;\n}\n\nconst MAX_POOLS_PER_REQUEST = 1000;\nconst DEFAULT_SKIP = 0;\nconst DEFAULT_FIRST = 10;\nconst CHECK_TIMEOUT_SECONDS = 10;\nconst CHECK_INTERVAL_MS = 10;\nconst MAX_CHECKS = (CHECK_TIMEOUT_SECONDS * 1000) / CHECK_INTERVAL_MS;\n\nfunction timeout(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Access pools using the Balancer GraphQL Api.\n *\n * Balancer's API URL: https://api.balancer.fi/query/\n */\nexport class PoolsBalancerAPIRepository\n  implements Findable<Pool, PoolAttribute>\n{\n  private client: BalancerAPIClient;\n  public pools: Pool[] = [];\n  public skip = 0; // Keep track of how many pools to skip on next fetch, so this functions similar to subgraph repository.\n  public nextToken: string | undefined | null; // A token to pass to the next query to retrieve the next page of results. Undefined initially, null when there are no more results.\n  private query: GraphQLQuery;\n  private hasFetched = false;\n  private isFetching = false;\n\n  constructor(options: PoolsBalancerAPIOptions) {\n    this.client = new BalancerAPIClient(options.url, options.apiKey);\n\n    const defaultArgs: GraphQLArgs = {\n      chainId: 1,\n      orderBy: 'totalLiquidity',\n      orderDirection: 'desc',\n      where: {\n        swapEnabled: {\n          eq: true,\n        },\n        totalShares: {\n          gt: 0.05,\n        },\n      },\n    };\n\n    const defaultAttributes = {\n      id: true,\n      address: true,\n    };\n\n    this.query = {\n      args: Object.assign({}, options.query?.args || defaultArgs),\n      attrs: Object.assign({}, options.query?.attrs || defaultAttributes),\n    };\n\n    // skip is not a valid argument for the Balancer API, it uses nextToken\n    delete this.query.args.skip;\n  }\n\n  private fetchFromCache(first: number, skip: number): Pool[] {\n    const pools = this.pools.slice(skip, first + skip);\n    return pools;\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    const first = options?.first || DEFAULT_FIRST;\n    const skip = options?.skip || DEFAULT_SKIP;\n\n    if (!this.hasFetched) {\n      this.fetchAll(options);\n    }\n    await this.awaitEnoughPoolsFetched(first, skip);\n    return this.fetchFromCache(first, skip);\n  }\n\n  // Fetches all pools from the API in a loop and saves them to the cache.\n  async fetchAll(options?: PoolsRepositoryFetchOptions): Promise<void> {\n    this.isFetching = true;\n    this.hasFetched = true;\n\n    if (this.nextToken) {\n      this.query.args.nextToken = this.nextToken;\n    }\n\n    this.query.args.first = MAX_POOLS_PER_REQUEST;\n    const formattedArgs = new GraphQLArgsBuilder(this.query.args).format(\n      new BalancerAPIArgsFormatter()\n    );\n\n    const attrs = this.query.attrs;\n    attrs.nextToken = true;\n\n    const formattedQuery = {\n      pools: {\n        __args: formattedArgs,\n        ...attrs,\n      },\n    };\n\n    const apiResponse = await this.client.get(formattedQuery);\n    const apiResponseData = apiResponse.pools;\n\n    this.nextToken = apiResponseData.nextToken;\n    this.pools = this.pools.concat(apiResponseData.pools.map(this.format));\n\n    if (this.nextToken) return await this.fetchAll(options);\n\n    this.isFetching = false;\n  }\n\n  // A function that waits until enough pools have been loaded into the cache\n  // or fetching has finished. Used so that all pools can be fetched in the\n  // background, while fetch returns the first results to the user quickly.\n  async awaitEnoughPoolsFetched(first: number, skip: number): Promise<void> {\n    for (let totalChecks = 0; totalChecks < MAX_CHECKS; totalChecks++) {\n      if (this.pools.length > first + skip) {\n        return;\n      }\n      if (!this.isFetching) {\n        return;\n      }\n      await timeout(CHECK_INTERVAL_MS);\n    }\n\n    return;\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    if (this.pools.length == 0) {\n      await this.fetch();\n    }\n\n    return this.findBy('id', id);\n  }\n\n  async findBy(param: PoolAttribute, value: string): Promise<Pool | undefined> {\n    if (this.pools.length == 0) {\n      await this.fetch();\n    }\n\n    const pool = this.pools.find((pool) => pool[param] == value);\n    if (pool) {\n      return this.format(pool);\n    }\n  }\n\n  /** Fixes any formatting issues from the subgraph\n   *  - GraphQL can't store a map so pool.apr.[rewardAprs/tokenAprs].breakdown\n   *    is JSON data that needs to be parsed so they match the Pool type correctly.\n   */\n  private format(pool: Pool): Pool {\n    if (pool.apr?.rewardAprs.breakdown) {\n      // GraphQL can't store this as a map so it's JSON that we must parse\n      const rewardsBreakdown = JSON.parse(\n        pool.apr?.rewardAprs.breakdown as unknown as string\n      );\n      pool.apr.rewardAprs.breakdown = rewardsBreakdown;\n    }\n    if (pool.apr?.tokenAprs.breakdown) {\n      // GraphQL can't store this as a map so it's JSON that we must parse\n      const tokenAprsBreakdown = JSON.parse(\n        pool.apr?.tokenAprs.breakdown as unknown as string\n      );\n      pool.apr.tokenAprs.breakdown = tokenAprsBreakdown;\n    }\n\n    return pool;\n  }\n}\n","import { Pool, PoolType, PoolToken, SubPool } from '@/.';\nimport {\n  SubgraphPool,\n  SubgraphPoolTokenFragment,\n  SubgraphSubPoolFragment,\n  SubgraphSubPoolTokenFragment,\n} from '@/modules/subgraph/subgraph';\n\ninterface SubgraphSubPoolToken extends SubgraphSubPoolTokenFragment {\n  token?: SubgraphSubPoolMeta | null;\n}\n\ninterface SubgraphSubPoolMeta {\n  latestUSDPrice?: string | null;\n  pool?: SubgraphSubPool | null;\n}\n\ninterface SubgraphSubPool extends SubgraphSubPoolFragment {\n  tokens: SubgraphSubPoolToken[];\n}\n\nexport const mapType = (subgraphPool: SubgraphPool, chainId: number): Pool => {\n  return {\n    id: subgraphPool.id,\n    name: subgraphPool.name || '',\n    address: subgraphPool.address,\n    chainId: chainId,\n    poolType: subgraphPool.poolType as PoolType,\n    poolTypeVersion: subgraphPool.poolTypeVersion || 1,\n    swapFee: subgraphPool.swapFee,\n    swapEnabled: subgraphPool.swapEnabled,\n    protocolYieldFeeCache: subgraphPool.protocolYieldFeeCache || '0.5', // Default protocol yield fee\n    protocolSwapFeeCache: subgraphPool.protocolSwapFeeCache || '0.5', // Default protocol swap fee\n    amp: subgraphPool.amp ?? undefined,\n    owner: subgraphPool.owner ?? undefined,\n    factory: subgraphPool.factory ?? undefined,\n    symbol: subgraphPool.symbol ?? undefined,\n    tokens: (subgraphPool.tokens || []).map(mapToken),\n    tokensList: subgraphPool.tokensList,\n    tokenAddresses: (subgraphPool.tokens || []).map((t) => t.address),\n    totalLiquidity: subgraphPool.totalLiquidity,\n    totalShares: subgraphPool.totalShares,\n    totalSwapFee: subgraphPool.totalSwapFee,\n    totalSwapVolume: subgraphPool.totalSwapVolume,\n    priceRateProviders: subgraphPool.priceRateProviders ?? undefined,\n    // onchain: subgraphPool.onchain,\n    createTime: subgraphPool.createTime,\n    mainIndex: subgraphPool.mainIndex ?? undefined,\n    wrappedIndex: subgraphPool.wrappedIndex ?? undefined,\n    // mainTokens: subgraphPool.mainTokens,\n    // wrappedTokens: subgraphPool.wrappedTokens,\n    // unwrappedTokens: subgraphPool.unwrappedTokens,\n    // isNew: subgraphPool.isNew,\n    // volumeSnapshot: subgraphPool.volumeSnapshot,\n    // feesSnapshot: subgraphPool.???, // Approximated last 24h fees\n    // boost: subgraphPool.boost,\n    totalWeight: subgraphPool.totalWeight || '1',\n    lowerTarget: subgraphPool.lowerTarget ?? '0',\n    upperTarget: subgraphPool.upperTarget ?? '0',\n    isInRecoveryMode: subgraphPool.isInRecoveryMode ?? false,\n    isPaused: subgraphPool.isPaused ?? false,\n  };\n};\n\nconst mapToken = (subgraphToken: SubgraphPoolTokenFragment): PoolToken => {\n  const subPoolInfo = mapSubPools(\n    // need to typecast as the fragment is 3 layers deep while the type is infinite levels deep\n    subgraphToken.token as SubgraphSubPoolMeta\n  );\n  return {\n    ...subgraphToken,\n    isExemptFromYieldProtocolFee:\n      subgraphToken.isExemptFromYieldProtocolFee || false,\n    token: subPoolInfo,\n  };\n};\n\nconst mapSubPools = (metadata: SubgraphSubPoolMeta) => {\n  let subPool: SubPool | null = null;\n\n  if (metadata.pool) {\n    subPool = {\n      id: metadata.pool.id,\n      address: metadata.pool.address,\n      totalShares: metadata.pool.totalShares,\n      poolType: metadata.pool.poolType as PoolType,\n      mainIndex: metadata.pool.mainIndex || 0,\n    };\n\n    if (metadata?.pool.tokens) {\n      subPool.tokens = metadata.pool.tokens.map(mapSubPoolToken);\n    }\n  }\n\n  return {\n    pool: subPool,\n    latestUSDPrice: metadata.latestUSDPrice || undefined,\n  };\n};\n\nconst mapSubPoolToken = (token: SubgraphSubPoolToken) => {\n  return {\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    balance: token.balance,\n    priceRate: token.priceRate,\n    weight: token.weight,\n    isExemptFromYieldProtocolFee:\n      token.isExemptFromYieldProtocolFee || undefined,\n    token: token.token ? mapSubPools(token.token) : undefined,\n  };\n};\n","import { Findable, Searchable } from '../types';\nimport {\n  createSubgraphClient,\n  SubgraphClient,\n  Pool_OrderBy,\n  OrderDirection,\n} from '@/modules/subgraph/subgraph';\nimport {\n  GraphQLArgsBuilder,\n  SubgraphArgsFormatter,\n} from '@/lib/graphql/args-builder';\nimport { GraphQLArgs } from '@/lib/graphql/types';\nimport { PoolAttribute, PoolsRepositoryFetchOptions } from './types';\nimport { GraphQLQuery, Pool } from '@/types';\nimport { Network } from '@/lib/constants/network';\nimport { PoolsQueryVariables } from '../../subgraph/subgraph';\nimport { mapType } from './subgraph-helpers';\nimport { Logger } from '@/lib/utils/logger';\n\ninterface PoolsSubgraphRepositoryOptions {\n  url: string;\n  chainId: Network;\n  blockHeight?: () => Promise<number | undefined>;\n  query?: GraphQLQuery;\n}\n\n/**\n * Access pools using generated subgraph client.\n *\n * Balancer's subgraph URL: https://thegraph.com/hosted-service/subgraph/balancer-labs/balancer-v2\n */\nexport class PoolsSubgraphRepository\n  implements Findable<Pool, PoolAttribute>, Searchable<Pool>\n{\n  private client: SubgraphClient;\n  private chainId: Network;\n  private pools?: Promise<Pool[]>;\n  public skip = 0;\n  private blockHeight: undefined | (() => Promise<number | undefined>);\n  private query: GraphQLQuery;\n\n  /**\n   * Repository with optional lazy loaded blockHeight\n   *\n   * @param url subgraph URL\n   * @param chainId current network, needed for L2s logic\n   * @param blockHeight lazy loading blockHeigh resolver\n   */\n  constructor(options: PoolsSubgraphRepositoryOptions) {\n    this.client = createSubgraphClient(options.url);\n    this.blockHeight = options.blockHeight;\n    this.chainId = options.chainId;\n\n    const defaultArgs: GraphQLArgs = {\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n      where: {\n        totalShares: {\n          gt: 0.000000000001,\n        },\n      },\n    };\n\n    const args = Object.assign({}, options.query?.args || defaultArgs);\n    const attrs = Object.assign({}, options.query?.attrs || {});\n\n    this.query = {\n      args,\n      attrs,\n    };\n  }\n\n  /**\n   * We need a list of all the pools, for calculating APRs (nested pools), and for SOR (path finding).\n   * All the pools are fetched on page load and cachced for speedy lookups.\n   *\n   * @returns Promise resolving to pools list\n   */\n  private async fetchAllPools(): Promise<Pool[]> {\n    const logger = Logger.getInstance();\n    logger.time('fetching pools');\n\n    if (this.blockHeight) {\n      this.query.args.block = { number: await this.blockHeight() };\n    }\n    const formattedQuery = new GraphQLArgsBuilder(this.query.args).format(\n      new SubgraphArgsFormatter()\n    ) as PoolsQueryVariables;\n\n    const { pool0, pool1000, pool2000 } = await this.client.AllPools(\n      formattedQuery\n    );\n    logger.timeEnd('fetching pools');\n\n    return [...pool0, ...pool1000, ...pool2000].map((pool) =>\n      mapType(pool, this.chainId)\n    );\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    const logger = Logger.getInstance();\n    logger.time('fetching pools');\n    if (options?.skip) {\n      this.query.args.skip = options.skip;\n    }\n    if (this.blockHeight) {\n      this.query.args.block = { number: await this.blockHeight() };\n    }\n\n    this.query.args.first = options?.first || this.query.args.first || 1000;\n\n    const formattedQuery = new GraphQLArgsBuilder(this.query.args).format(\n      new SubgraphArgsFormatter()\n    ) as PoolsQueryVariables;\n\n    const { pools } = await this.client.Pools(formattedQuery);\n\n    this.skip = (options?.skip || 0) + pools.length;\n    logger.timeEnd('fetching pools');\n\n    return pools.map((pool) => mapType(pool, this.chainId));\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    return await this.findBy('id', id);\n  }\n\n  async findBy(param: PoolAttribute, value: string): Promise<Pool | undefined> {\n    if (!this.pools) {\n      this.pools = this.fetchAllPools();\n    }\n\n    return (await this.pools).find((pool) => pool[param] == value);\n\n    // TODO: @Nma - Fetching pools outside of default query is causing a lot of requests\n    // on a frontend, because results aren't cached anywhere.\n    // For fetching pools directly from subgraph with custom queries please use the client not this repository.\n    // Code below kept for reference, to be removed later.\n    //\n    // if (this.pools) {\n    //   return (await this.pools).find((p) => p[param] === value);\n    // }\n    // const { pools } = await this.client.Pools({\n    //   where: {\n    //     [param]: value,\n    //     swapEnabled: true,\n    //     totalShares_gt: '0.000000000001',\n    //   },\n    //   block: await this.block(),\n    // });\n    // const poolsTab: Pool[] = pools.map(this.mapType.bind(this));\n    // return poolsTab.length > 0 ? poolsTab[0] : undefined;\n  }\n\n  async all(): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchAllPools();\n    }\n    return this.pools;\n  }\n\n  async block(): Promise<{ number: number | undefined } | undefined> {\n    return this.blockHeight ? { number: await this.blockHeight() } : undefined;\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchAllPools();\n    }\n\n    return (await this.pools).filter(filter);\n  }\n}\n","import { Cacheable, Findable, Searchable } from '../types';\nimport { Provider } from '@ethersproject/providers';\nimport { PoolAttribute, PoolsRepositoryFetchOptions } from './types';\nimport { Pool } from '@/types';\nimport { getOnChainBalances } from '../../../modules/sor/pool-data/onChainData3';\nimport { PoolsSubgraphRepository } from './subgraph';\nimport { Logger } from '@/lib/utils/logger';\n\ninterface PoolsSubgraphOnChainRepositoryOptions {\n  provider: Provider;\n  multicall: string;\n  vault: string;\n}\n\n/**\n * Access pools using generated subgraph client and multicall.\n */\nexport class PoolsSubgraphOnChainRepository\n  implements Findable<Pool, PoolAttribute>, Searchable<Pool>, Cacheable<Pool>\n{\n  private provider: Provider;\n  private pools?: Promise<Pool[]>;\n  private multicall: string;\n  private vault: string;\n  public skip = 0;\n\n  /**\n   * Repository using multicall to get onchain data.\n   *\n   * @param poolsSubgraph subgraph repository\n   * @param options options containing provider, multicall and vault addresses\n   */\n  constructor(\n    private poolsSubgraph: PoolsSubgraphRepository,\n    options: PoolsSubgraphOnChainRepositoryOptions,\n    private readonly poolsToIgnore: string[] | undefined,\n    private batchSize?: number\n  ) {\n    this.provider = options.provider;\n    this.multicall = options.multicall;\n    this.vault = options.vault;\n  }\n\n  private filterPools(pools: Pool[]): Pool[] {\n    const filteredPools = pools.filter((p) => {\n      if (p.swapEnabled === false) return false;\n      if (!this.poolsToIgnore) return true;\n      const index = this.poolsToIgnore.findIndex(\n        (id) => id.toLowerCase() === p.id.toLowerCase()\n      );\n      return index === -1;\n    });\n    return filteredPools;\n  }\n\n  /**\n   * We need a list of all the pools, for calculating APRs (nested pools), and for SOR (path finding).\n   * All the pools are fetched on page load and cachced for speedy lookups.\n   *\n   * @returns Promise resolving to pools list\n   */\n  private async fetchDefault(): Promise<Pool[]> {\n    const pools = await this.poolsSubgraph.all();\n    const filteredPools = this.filterPools(pools);\n\n    const logger = Logger.getInstance();\n    logger.time(`fetching onchain ${filteredPools.length} pools`);\n\n    const onchainPools = await getOnChainBalances(\n      filteredPools,\n      this.multicall,\n      this.vault,\n      this.provider,\n      this.batchSize\n    );\n\n    logger.timeEnd(`fetching onchain ${filteredPools.length} pools`);\n\n    return onchainPools;\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    const pools = await this.poolsSubgraph.fetch(options);\n    const filteredPools = this.filterPools(pools);\n\n    const logger = Logger.getInstance();\n    logger.time(`fetching onchain ${filteredPools.length} pools`);\n\n    const onchainPools = await getOnChainBalances(\n      filteredPools,\n      this.multicall,\n      this.vault,\n      this.provider,\n      this.batchSize\n    );\n\n    logger.timeEnd(`fetching onchain ${filteredPools.length} pools`);\n\n    return onchainPools;\n  }\n\n  async find(id: string, forceRefresh = false): Promise<Pool | undefined> {\n    return await this.findBy('id', id, forceRefresh);\n  }\n\n  async findBy(\n    param: PoolAttribute,\n    value: string,\n    forceRefresh = false\n  ): Promise<Pool | undefined> {\n    if (!this.pools || forceRefresh) {\n      this.pools = this.fetchDefault();\n    }\n\n    return (await this.pools).find((pool) => pool[param] == value);\n  }\n\n  async all(): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n    return this.pools;\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n\n    return (await this.pools).filter(filter);\n  }\n\n  async refresh(pool: Pool): Promise<Pool> {\n    const onchainPool = await getOnChainBalances(\n      [pool],\n      this.multicall,\n      this.vault,\n      this.provider\n    );\n\n    // If the pool is already cached, replace it with the new one\n    if (this.pools) {\n      const index = (await this.pools).findIndex(\n        (p) => p.address === pool.address\n      );\n      if (index !== -1) {\n        this.pools = Promise.resolve([\n          ...(await this.pools).splice(index, 1),\n          onchainPool[0],\n        ]);\n      }\n    }\n\n    return onchainPool[0];\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { GaugesSubgraphRepository } from '@/modules/subgraph/repository';\nimport { PoolGauges, PoolGaugesAttributes } from './types';\n\nexport class PoolGaugesRepository extends GaugesSubgraphRepository<\n  PoolGauges,\n  PoolGaugesAttributes\n> {\n  async query(args: any): Promise<PoolGauges[]> {\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { pools } = await this.client.PoolGauges(args);\n    return pools.map(this.mapType);\n  }\n\n  mapType(fragment: any): PoolGauges {\n    return fragment as PoolGauges;\n  }\n}\n","export enum PoolJoinExitAttributes {\n  Pool = 'pool',\n  Sender = 'sender',\n}\n\nexport interface PoolJoinExit {\n  id: string;\n  userAddress: string;\n  poolId: string;\n  timestamp: number;\n  type: string;\n  amounts: string[];\n  tokens: string[];\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { PoolJoinExit, PoolJoinExitAttributes } from './types';\nimport { BalancerSubgraphRepository } from '@/modules/subgraph/repository';\nimport {\n  JoinExit_OrderBy,\n  OrderDirection,\n  SubgraphJoinExitFragment,\n} from '@/modules/subgraph/generated/balancer-subgraph-types';\n\nexport class PoolJoinExitRepository extends BalancerSubgraphRepository<\n  PoolJoinExit,\n  PoolJoinExitAttributes\n> {\n  async query(args: any): Promise<PoolJoinExit[]> {\n    if (!args.orderBy) args.orderBy = JoinExit_OrderBy.Timestamp;\n    if (!args.orderDirection) args.orderDirection = OrderDirection.Asc;\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { joinExits } = await this.client.JoinExits(args);\n    return joinExits.map(this.mapType);\n  }\n\n  mapType(item: SubgraphJoinExitFragment): PoolJoinExit {\n    return {\n      id: item.id,\n      userAddress: item.user.id,\n      poolId: item.pool.id,\n      timestamp: item.timestamp,\n      type: item.type,\n      amounts: item.amounts,\n      tokens: item.pool.tokensList,\n    };\n  }\n\n  async findByUser(\n    sender: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolJoinExit[]> {\n    return this.findAllBy(PoolJoinExitAttributes.Sender, sender, first, skip);\n  }\n\n  async findJoins(sender: string, pool: string): Promise<PoolJoinExit[]> {\n    return this.query({ where: { sender, pool, type: 'Join' } });\n  }\n\n  async findExits(sender: string, pool: string): Promise<PoolJoinExit[]> {\n    return this.query({ where: { sender, pool, type: 'Exit' } });\n  }\n\n  async findByPool(\n    poolId: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolJoinExit[]> {\n    return this.findAllBy(PoolJoinExitAttributes.Pool, poolId, first, skip);\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { PoolShare, PoolShareAttributes } from './types';\nimport { BalancerSubgraphRepository } from '@/modules/subgraph/repository';\nimport {\n  SubgraphPoolShareFragment,\n  PoolShare_OrderBy,\n  OrderDirection,\n} from '@/modules/subgraph/generated/balancer-subgraph-types';\n\nexport class PoolSharesRepository extends BalancerSubgraphRepository<\n  PoolShare,\n  PoolShareAttributes\n> {\n  async query(args: any): Promise<PoolShare[]> {\n    if (!args.orderBy) args.orderBy = PoolShare_OrderBy.Balance;\n    if (!args.orderDirection) args.orderDirection = OrderDirection.Desc;\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { poolShares } = await this.client.PoolShares(args);\n    return poolShares.map(this.mapType);\n  }\n\n  mapType(subgraphPoolShare: SubgraphPoolShareFragment): PoolShare {\n    return {\n      id: subgraphPoolShare.id,\n      userAddress: subgraphPoolShare.userAddress.id,\n      poolId: subgraphPoolShare.poolId.id,\n      balance: subgraphPoolShare.balance,\n    };\n  }\n\n  async findByUser(\n    userAddress: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolShare[]> {\n    return this.findAllBy(\n      PoolShareAttributes.UserAddress,\n      userAddress,\n      first,\n      skip\n    );\n  }\n\n  async findByPool(\n    poolId: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolShare[]> {\n    return this.findAllBy(PoolShareAttributes.PoolId, poolId, first, skip);\n  }\n}\n","import type { Findable, Token } from '@/types';\nimport type { TokenAttribute } from './types';\n\nexport class StaticTokenProvider implements Findable<Token, TokenAttribute> {\n  constructor(private tokens: Token[]) {}\n\n  async find(address: string): Promise<Token | undefined> {\n    return this.tokens.find((token) => {\n      return token.address.toLowerCase() === address.toLowerCase();\n    });\n  }\n\n  async findBy(\n    attribute: TokenAttribute,\n    value: string\n  ): Promise<Token | undefined> {\n    return this.tokens.find((token) => {\n      return token[attribute] === value;\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport {\n  CoingeckoConfig,\n  Findable,\n  Network,\n  Price,\n  TokenPrices,\n} from '@/types';\nimport axios, { AxiosError } from 'axios';\nimport { TOKENS } from '@/lib/constants/tokens';\nimport { Debouncer, tokenAddressForPricing } from '@/lib/utils';\nimport {\n  getCoingeckoApiBaseUrl,\n  getCoingeckoApiKeyHeaderName,\n} from '@/lib/utils/coingecko-api';\n\n/**\n * Simple coingecko price source implementation. Configurable by network and token addresses.\n */\nexport class CoingeckoPriceRepository implements Findable<Price> {\n  prices: { [key: string]: Promise<Price> } = {};\n  nativePrice?: Promise<Price>;\n  private readonly url: string;\n  private readonly urlNative: string;\n  private readonly coingeckoApiKeyHeaderName: string;\n  baseTokenAddresses: string[];\n  debouncer: Debouncer<TokenPrices, string>;\n  apiKey?: string;\n\n  constructor(\n    tokenAddresses: string[],\n    private chainId: Network = 1,\n    coingecko?: CoingeckoConfig\n  ) {\n    this.baseTokenAddresses = tokenAddresses.map(tokenAddressForPricing);\n    this.url = `${getCoingeckoApiBaseUrl(\n      coingecko?.isDemoApiKey\n    )}getTokens/?chain=${this.platform(chainId)}`;\n    this.urlNative = `${getCoingeckoApiBaseUrl(\n      coingecko?.isDemoApiKey\n    )}simple/price/?vs_currencies=eth,usd&ids=`;\n    this.coingeckoApiKeyHeaderName = getCoingeckoApiKeyHeaderName(\n      coingecko?.isDemoApiKey\n    );\n    this.apiKey = coingecko?.coingeckoApiKey;\n    this.debouncer = new Debouncer<TokenPrices, string>(\n      this.fetch.bind(this),\n      200,\n      coingecko?.tokensPerPriceRequest ?? 10\n    );\n  }\n\n  private async fetch(\n    addresses: string[],\n    { signal }: { signal?: AbortSignal } = {}\n  ): Promise<TokenPrices> {\n    try {\n      const { data } = await axios.get<TokenPrices>(\n        `${this.url}&contract_addresses=${addresses.join(\n          ','\n        )}&vs_currencies=usd`\n      );\n      return data;\n    } catch (error) {\n      const message = ['Error fetching token prices from coingecko'];\n      if ((error as AxiosError).isAxiosError) {\n        if ((error as AxiosError).response?.status !== undefined) {\n          message.push(`with status ${(error as AxiosError).response?.status}`);\n        }\n      } else {\n        message.push(error as string);\n      }\n      return Promise.reject(message.join(' '));\n    }\n  }\n\n  private fetchNative({\n    signal,\n  }: { signal?: AbortSignal } = {}): Promise<Price> {\n    console.time(`fetching coingecko for native token`);\n    enum Assets {\n      ETH = 'ethereum',\n      MATIC = 'matic-network',\n      XDAI = 'xdai',\n    }\n    let assetId: Assets = Assets.ETH;\n    if (this.chainId === 137) assetId = Assets.MATIC;\n    if (this.chainId === 100) assetId = Assets.XDAI;\n    return axios\n      .get<{ [key in Assets]: Price }>(`${this.urlNative}${assetId}`, {\n        signal,\n        headers: {\n          [this.coingeckoApiKeyHeaderName]: this.apiKey ?? '',\n        },\n      })\n      .then(({ data }) => {\n        return data[assetId];\n      })\n      .catch((error) => {\n        const message = ['Error fetching native token from coingecko'];\n        if (error.isAxiosError) {\n          if (error.response?.status) {\n            message.push(`with status ${error.response.status}`);\n          }\n        } else {\n          message.push(error);\n        }\n        return Promise.reject(message.join(' '));\n      })\n      .finally(() => {\n        console.timeEnd(`fetching coingecko for native token`);\n      });\n  }\n\n  find(inputAddress: string): Promise<Price | undefined> {\n    const address = tokenAddressForPricing(inputAddress, this.chainId);\n    if (!this.prices[address]) {\n      // Make initial call with all the tokens we want to preload\n      if (Object.keys(this.prices).length === 0) {\n        for (const baseAddress of this.baseTokenAddresses) {\n          this.prices[baseAddress] = this.debouncer\n            .fetch(baseAddress)\n            .then((prices) => prices[baseAddress]);\n        }\n      }\n\n      // Handle native asset special case\n      if (\n        address === TOKENS(this.chainId).Addresses.nativeAsset.toLowerCase()\n      ) {\n        if (!this.nativePrice) {\n          this.prices[address] = this.fetchNative();\n        }\n\n        return this.prices[address];\n      }\n\n      this.prices[address] = this.debouncer\n        .fetch(address)\n        .then((prices) => prices[address]);\n    }\n\n    return this.prices[address];\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n\n  private platform(chainId: number): string {\n    switch (chainId) {\n      case 1:\n      case 5:\n      case 42:\n      case 31337:\n        return 'ethereum';\n      case 100:\n        return 'xdai';\n      case 137:\n        return 'polygon-pos';\n      case 250:\n        return 'fantom';\n      case 1101:\n        return 'polygon-zkevm';\n      case 8453:\n        return 'base';\n      case 42161:\n        return 'arbitrum-one';\n      case 43114:\n        return 'avalanche';\n      case 1313161554:\n        return 'aurora';\n      case 40:\n        return 'telos';\n    }\n\n    return '2';\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport {\n  Price,\n  Findable,\n  TokenPrices,\n  Network,\n  HistoricalPrices,\n  CoingeckoConfig,\n} from '@/types';\nimport axios, { AxiosError } from 'axios';\nimport { tokenAddressForPricing } from '@/lib/utils';\nimport {\n  getCoingeckoApiBaseUrl,\n  getCoingeckoApiKeyHeaderName,\n} from '@/lib/utils/coingecko-api';\n\nconst HOUR = 60 * 60;\n\n/**\n * Simple coingecko price source implementation. Configurable by network and token addresses.\n */\nexport class CoingeckoHistoricalPriceRepository implements Findable<Price> {\n  prices: TokenPrices = {};\n  nativePrice?: Promise<Price>;\n  private readonly urlBase: string;\n  private readonly apiKey?: string;\n  private readonly coingeckoApiKeyHeaderName: string;\n  constructor(private chainId: Network = 1, coingecko?: CoingeckoConfig) {\n    this.urlBase = `${getCoingeckoApiBaseUrl(\n      coingecko?.isDemoApiKey\n    )}coins/${this.platform(\n      chainId\n    )}/contract/%TOKEN_ADDRESS%/market_chart/range?vs_currency=usd`;\n    this.apiKey = coingecko?.coingeckoApiKey;\n    this.coingeckoApiKeyHeaderName = getCoingeckoApiKeyHeaderName(\n      coingecko?.isDemoApiKey\n    );\n  }\n\n  private async fetch(\n    address: string,\n    timestamp: number,\n    { signal }: { signal?: AbortSignal } = {}\n  ): Promise<HistoricalPrices> {\n    const url = this.urlRange(address, timestamp);\n    console.time(`fetching coingecko historical for ${address}`);\n    try {\n      const { data } = await axios.get<HistoricalPrices>(url, {\n        signal,\n        headers: { [this.coingeckoApiKeyHeaderName]: this.apiKey ?? '' },\n      });\n      console.timeEnd(`fetching coingecko historical for ${address}`);\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.timeEnd(`fetching coingecko historical for ${address}`);\n      if ((error as AxiosError).isAxiosError) {\n        throw new Error(\n          'Error fetching historical token prices from coingecko - ' +\n            (error as AxiosError).message +\n            ' - ' +\n            (error as AxiosError).response?.statusText\n        );\n      }\n      throw new Error('Unknown Error: ' + error);\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  async find(address: string): Promise<Price | undefined> {\n    throw `Historic price requires point-in-time timestamp, please use findBy(address, timestamp)`;\n  }\n\n  async findBy(\n    inputAddress: string,\n    timestamp: number\n  ): Promise<Price | undefined> {\n    const address = tokenAddressForPricing(inputAddress, this.chainId);\n    const response = await this.fetch(address, timestamp);\n\n    return {\n      usd: `${response.prices[0][1]}`,\n    };\n  }\n\n  private platform(chainId: number): string {\n    switch (chainId) {\n      case 1:\n      case 5:\n      case 42:\n      case 31337:\n        return 'ethereum';\n      case 137:\n        return 'polygon-pos';\n      case 42161:\n        return 'arbitrum-one';\n      case 100:\n        return 'xdai';\n    }\n\n    return '2';\n  }\n\n  private urlRange(address: string, timestamp: number): string {\n    const range: { from: number; to: number } = {\n      from: timestamp - HOUR,\n      to: timestamp + HOUR,\n    };\n    return `${this.urlBase.replace('%TOKEN_ADDRESS%', address)}&from=${\n      range.from\n    }&to=${range.to}`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { Price, Findable, TokenPrices, Network } from '@/types';\nimport axios from 'axios';\nimport { Debouncer, tokenAddressForPricing } from '@/lib/utils';\n\ninterface SubgraphPricesResponse {\n  data: {\n    tokens: [\n      {\n        address: string;\n        latestUSDPrice?: string;\n      }\n    ];\n  };\n}\n\nexport class SubgraphPriceRepository implements Findable<Price> {\n  prices: { [key: string]: Promise<Price> } = {};\n  debouncer: Debouncer<TokenPrices, string>;\n\n  constructor(private subgraphUrl: string, private chainId: Network = 1) {\n    this.debouncer = new Debouncer<TokenPrices, string>(\n      this.fetch.bind(this),\n      200\n    );\n  }\n\n  private async fetch(\n    addresses: string[],\n    { signal }: { signal?: AbortSignal } = {}\n  ): Promise<TokenPrices> {\n    console.time(`fetching subgraph prices for ${addresses.length} tokens`);\n    return axios\n      .post<SubgraphPricesResponse>(\n        this.subgraphUrl,\n        {\n          variables: { addresses },\n          query: `query($addresses: [String!]) {\n            tokens(\n              where: {\n                id_in: $addresses\n              }\n            ) {\n              address\n              latestUSDPrice\n            }\n          }`,\n        },\n        { signal }\n      )\n      .then((response) => response.data.data)\n      .then(({ tokens }) =>\n        Object.fromEntries(\n          tokens.map((token) => [\n            token.address,\n            { usd: token.latestUSDPrice || undefined },\n          ])\n        )\n      )\n      .finally(() => {\n        console.timeEnd(\n          `fetching subgraph prices for ${addresses.length} tokens`\n        );\n      });\n  }\n\n  async find(inputAddress: string): Promise<Price | undefined> {\n    const address = tokenAddressForPricing(inputAddress, this.chainId);\n    if (!this.prices[address]) {\n      this.prices[address] = this.debouncer\n        .fetch(address)\n        .then((prices) => prices[address]);\n    }\n\n    return this.prices[address];\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n}\n","import type { Findable, Price } from '@/types';\nimport { IAaveRates } from './aave-rates';\nimport { Logger } from '@/lib/utils/logger';\n\nexport class TokenPriceProvider implements Findable<Price> {\n  constructor(\n    private coingeckoRepository: Findable<Price>,\n    private subgraphRepository: Findable<Price>,\n    private aaveRates: IAaveRates\n  ) {}\n\n  async find(address: string): Promise<Price | undefined> {\n    let price;\n    try {\n      price = await this.coingeckoRepository.find(address);\n      if (!price?.usd) {\n        throw new Error('Price not found');\n      }\n    } catch (err) {\n      const logger = Logger.getInstance();\n      logger.warn(err as string);\n      price = await this.subgraphRepository.find(address);\n    }\n    const rate = (await this.aaveRates.getRate(address)) || 1;\n    if (price && price.usd) {\n      return {\n        ...price,\n        usd: (parseFloat(price.usd) * rate).toString(),\n      };\n    } else {\n      return price;\n    }\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute === 'address') {\n      return this.find(value);\n    }\n    throw `Token price search by ${attribute} not implemented`;\n  }\n}\n","import type { Findable, Price } from '@/types';\nimport { IAaveRates } from './aave-rates';\n\nexport class HistoricalPriceProvider implements Findable<Price> {\n  constructor(\n    private coingeckoRepository: Findable<Price>,\n    private aaveRates: IAaveRates\n  ) {}\n\n  /**\n   * get the historical price at time of call\n   *\n   * @param address the token address\n   */\n  async find(address: string): Promise<Price | undefined> {\n    return this.findBy(address, Math.floor(Date.now() / 1000));\n  }\n\n  /**\n   * get the historical price at the given timestamp.\n   *\n   * @param address the token address\n   * @param timestamp the UNIX timestamp\n   * @private\n   */\n  async findBy(address: string, timestamp: number): Promise<Price | undefined> {\n    const price = await this.coingeckoRepository.findBy(address, timestamp);\n    const rate = (await this.aaveRates.getRate(address)) || 1;\n    if (price && price.usd) {\n      return {\n        ...price,\n        usd: (parseFloat(price.usd) * rate).toString(),\n      };\n    } else {\n      return price;\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\n\nconst FeeDistributorAbi = [\n  'function claimTokens(address user, address[] tokens) returns (uint256[])',\n  'function claimToken(address user, address token) returns (uint256)',\n];\n\nexport const FeeDistributor = (address: string, provider: Provider): Contract =>\n  new Contract(address, FeeDistributorAbi, provider);\n","import { TokenBalance } from '@/modules/claims/ClaimService';\nimport { FeeDistributor } from '@/modules/contracts/implementations/feeDistributor';\nimport { Multicall } from '@/contracts';\nimport { Interface } from '@ethersproject/abi';\nimport { getAddress } from '@ethersproject/address';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { formatUnits } from '@ethersproject/units';\n\nexport interface FeeDistributorData {\n  balAmount: number;\n  bbAUsdAmount: number;\n  veBalSupply: number;\n  bbAUsdPrice: number;\n  balAddress: string;\n}\n\nexport interface BaseFeeDistributor {\n  multicallData: (ts: number) => Promise<FeeDistributorData>;\n  getClaimableBalances(\n    userAddress: string,\n    claimableTokens: string[]\n  ): Promise<TokenBalance>;\n  claimBalances(userAddress: string, claimableTokens: string[]): string;\n}\n\nconst feeDistributorInterface = new Interface([\n  'function getTokensDistributedInWeek(address token, uint timestamp) view returns (uint)',\n  'function claimTokens(address user, address[] tokens) returns (uint256[])',\n  'function claimToken(address user, address token) returns (uint256)',\n]);\n\nconst veBalInterface = new Interface([\n  'function totalSupply() view returns (uint)',\n]);\n\n// const bbAUsdInterface = new Interface([\n//   'function getRate() view returns (uint)',\n// ]);\n\nexport class FeeDistributorRepository implements BaseFeeDistributor {\n  feeDistributor: Contract;\n  data?: FeeDistributorData;\n\n  constructor(\n    private multicall: Multicall,\n    private feeDistributorAddress: string,\n    private balAddress: string,\n    private veBalAddress: string,\n    private bbAUsdAddress: string,\n    provider: Provider\n  ) {\n    this.feeDistributor = FeeDistributor(feeDistributorAddress, provider);\n  }\n\n  async fetch(timestamp: number): Promise<FeeDistributorData> {\n    const previousWeek = this.getPreviousWeek(timestamp);\n    const payload = [\n      {\n        target: this.feeDistributorAddress,\n        callData: feeDistributorInterface.encodeFunctionData(\n          'getTokensDistributedInWeek',\n          [getAddress(this.balAddress), previousWeek]\n        ),\n      },\n      {\n        target: this.feeDistributorAddress,\n        callData: feeDistributorInterface.encodeFunctionData(\n          'getTokensDistributedInWeek',\n          [getAddress(this.bbAUsdAddress), previousWeek]\n        ),\n      },\n      {\n        target: this.veBalAddress,\n        callData: veBalInterface.encodeFunctionData('totalSupply', []),\n      },\n      // Removed while wrappers are broken\n      // {\n      //   target: this.bbAUsdAddress,\n      //   callData: bbAUsdInterface.encodeFunctionData('getRate', []),\n      // },\n    ];\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n\n    const data = {\n      balAmount: parseFloat(formatUnits(res[0], 18)),\n      bbAUsdAmount: parseFloat(formatUnits(res[1], 18)),\n      veBalSupply: parseFloat(formatUnits(res[2], 18)),\n      // bbAUsdPrice: parseFloat(formatUnits(res[3], 18)),\n      bbAUsdPrice: parseFloat('1.0'),\n      balAddress: this.balAddress,\n    };\n\n    return data;\n  }\n\n  async multicallData(timestamp: number): Promise<FeeDistributorData> {\n    if (!this.data) {\n      this.data = await this.fetch(timestamp);\n    }\n\n    return this.data;\n  }\n\n  getPreviousWeek(fromTimestamp: number): number {\n    const weeksToGoBack = 1;\n    const midnight = new Date(fromTimestamp);\n    midnight.setUTCHours(0);\n    midnight.setUTCMinutes(0);\n    midnight.setUTCSeconds(0);\n    midnight.setUTCMilliseconds(0);\n\n    let daysSinceThursday = midnight.getUTCDay() - 4;\n    if (daysSinceThursday < 0) daysSinceThursday += 7;\n\n    daysSinceThursday = daysSinceThursday + weeksToGoBack * 7;\n\n    return Math.floor(midnight.getTime() / 1000) - daysSinceThursday * 86400;\n  }\n\n  async getClaimableBalances(\n    userAddress: string,\n    claimableTokens: string[]\n  ): Promise<TokenBalance> {\n    try {\n      const amounts: BigNumber[] =\n        await this.feeDistributor.callStatic.claimTokens(\n          userAddress,\n          claimableTokens\n        );\n      return this.extractTokenBalance(claimableTokens, amounts);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  claimBalances(userAddress: string, claimableTokens: string[]): string {\n    return feeDistributorInterface.encodeFunctionData('claimTokens', [\n      userAddress,\n      claimableTokens,\n    ]);\n  }\n\n  extractTokenBalance(\n    claimableTokens: string[],\n    amounts: (BigNumber | undefined | null)[]\n  ): TokenBalance {\n    return claimableTokens.reduce((tokens: TokenBalance, token, index) => {\n      tokens[token] = (amounts[index] as BigNumber) ?? BigNumber.from(0);\n      return tokens;\n    }, {});\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport { Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { formatUnits } from '@ethersproject/units';\nimport { Findable } from '../types';\n\nconst vaultInterface = new Interface([\n  'function getProtocolFeesCollector() view returns (address)',\n]);\n\nconst protocolFeesCollectorInterface = new Interface([\n  'function getSwapFeePercentage() view returns (uint)',\n]);\n\n// Using singleton here, so subsequent calls will return the same promise\nlet swapFeePercentagePromise: Promise<number>;\n\nexport class FeeCollectorRepository implements Findable<number> {\n  vault: Contract;\n  swapFeePercentage?: number;\n\n  constructor(vaultAddress: string, private provider: Provider) {\n    this.vault = new Contract(vaultAddress, vaultInterface, this.provider);\n  }\n\n  async fetch(): Promise<number> {\n    const address = (await this.vault.getProtocolFeesCollector()) as string;\n\n    const collector = new Contract(\n      address,\n      protocolFeesCollectorInterface,\n      this.provider\n    );\n    const fees = (await collector.getSwapFeePercentage()) as string;\n\n    return parseFloat(formatUnits(fees, 18));\n  }\n\n  async find(): Promise<number> {\n    if (!swapFeePercentagePromise) {\n      swapFeePercentagePromise = this.fetch();\n    }\n    this.swapFeePercentage = await swapFeePercentagePromise;\n\n    return this.swapFeePercentage;\n  }\n\n  async findBy(): Promise<number> {\n    return this.find();\n  }\n}\n","// 0x97207B095e4D5C9a6e4cfbfcd2C3358E03B90c4A\n\nimport { Interface } from '@ethersproject/abi';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/contracts';\n\nconst iProtocolFeePercentagesProvider = new Interface([\n  'function getSwapFeePercentage() view returns (uint)',\n]);\n\nexport interface ProtocolFees {\n  swapFee: number;\n  yieldFee: number;\n}\n\n// Using singleton here, so subsequent calls will return the same promise\nlet feesPromise: Promise<ProtocolFees>;\n\nexport class ProtocolFeesProvider {\n  protocolFees?: ProtocolFees;\n\n  constructor(\n    private multicall: Multicall,\n    private protocolFeePercentagesProviderAddress: string\n  ) {}\n\n  private async fetch(): Promise<ProtocolFees> {\n    const payload = [\n      {\n        target: this.protocolFeePercentagesProviderAddress,\n        callData: iProtocolFeePercentagesProvider.encodeFunctionData(\n          'getFeeTypePercentage',\n          [0]\n        ),\n      },\n      {\n        target: this.protocolFeePercentagesProviderAddress,\n        callData: iProtocolFeePercentagesProvider.encodeFunctionData(\n          'getFeeTypePercentage',\n          [2]\n        ),\n      },\n    ];\n    const [, res] = await this.multicall.callStatic.aggregate(payload);\n\n    const fees = {\n      swapFee: parseFloat(formatUnits(res[0], 18)),\n      yieldFee: parseFloat(formatUnits(res[2], 18)),\n    };\n\n    return fees;\n  }\n\n  async getFees(): Promise<ProtocolFees> {\n    if (!feesPromise) {\n      feesPromise = this.fetch();\n    }\n    this.protocolFees = await feesPromise;\n\n    return this.protocolFees;\n  }\n}\n","import axios from 'axios';\nimport { Findable } from '@/types';\nimport { Logger } from '@/lib/utils/logger';\n\nexport class TokenYieldsRepository implements Findable<number> {\n  private yields?: Promise<{ [address: string]: number }>;\n\n  constructor(private url = 'https://yield-tokens.balancer.workers.dev/') {}\n\n  async fetch(): Promise<{ [address: string]: number }> {\n    let aprs = {};\n\n    try {\n      console.time(`fetching token yields`);\n      const response = await axios.get(this.url);\n      console.timeEnd(`fetching token yields`);\n\n      aprs = response.data as {\n        [key: string]: number;\n      };\n    } catch (error) {\n      const logger = Logger.getInstance();\n      logger.warn(`Failed to fetch yield tokens: ${error}`);\n    }\n\n    return aprs;\n  }\n\n  async find(address: string): Promise<number> {\n    const lc = address.toLocaleLowerCase();\n    if (!this.yields) {\n      this.yields = this.fetch();\n    }\n\n    return this.yields.then((r) => (r[lc] && r[lc] > 0 ? r[lc] : 0));\n  }\n\n  async findBy(attribute: string, value: string): Promise<number> {\n    if (attribute != 'address') {\n      return 0;\n    }\n\n    return this.find(value);\n  }\n}\n","import { Findable } from '../types';\nimport axios from 'axios';\n\nconst query = (timestamp: string) => `{\n  blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: ${timestamp} }) {\n    number\n  }\n}`;\n\ninterface BlockNumberResponse {\n  data: {\n    blocks: [\n      {\n        number: string;\n      }\n    ];\n  };\n}\n\nconst fetchBlockByTime = async (\n  endpoint: string,\n  timestamp: string\n): Promise<number> => {\n  const payload = {\n    query: query(timestamp),\n  };\n\n  const response = await axios.post(endpoint, payload);\n\n  const {\n    data: { blocks },\n  } = response.data as BlockNumberResponse;\n\n  return parseInt(blocks[0].number);\n};\n\nexport class BlockNumberRepository implements Findable<number> {\n  blocks: { [ts: string]: Promise<number> } = {};\n\n  constructor(private endpoint: string) {}\n\n  async find(from: string): Promise<number | undefined> {\n    if (from == 'dayAgo') {\n      const dayAgo = `${Math.floor(Date.now() / 1000) - 86400}`;\n      if (!this.blocks[dayAgo]) {\n        this.blocks = {\n          ...this.blocks,\n          [dayAgo]: fetchBlockByTime(this.endpoint, dayAgo),\n        };\n      }\n      return this.blocks[dayAgo];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findBy(attribute = '', value = ''): Promise<number | undefined> {\n    return;\n  }\n}\n","import { GyroConfigRepositoryImpl } from '@/modules/data/gyro-config/repository';\n\nexport * as balEmissions from './bal/emissions';\nexport * from './gauge-controller/multicall';\nexport * from './gauge-shares';\nexport * from './liquidity-gauges';\nexport * from './pool';\nexport * from './pool-gauges';\nexport * from './pool-joinExit';\nexport * from './pool-shares';\nexport * from './token';\nexport * from './token-prices';\nexport * from './fee-distributor/repository';\nexport * from './fee-collector/repository';\nexport * from './protocol-fees/provider';\nexport * from './token-yields/repository';\nexport * from './block-number';\n\nimport {\n  BalancerNetworkConfig,\n  BalancerDataRepositories,\n  GraphQLQuery,\n  CoingeckoConfig,\n} from '@/types';\nimport { PoolsSubgraphRepository } from './pool/subgraph';\nimport { SubgraphPoolDataService } from '../sor/pool-data/subgraphPoolDataService';\nimport { PoolsSubgraphOnChainRepository } from './pool/subgraphOnChain';\nimport { PoolSharesRepository } from './pool-shares/repository';\nimport { PoolJoinExitRepository } from './pool-joinExit/repository';\nimport { PoolGaugesRepository } from './pool-gauges/repository';\nimport { GaugeSharesRepository } from './gauge-shares/repository';\nimport { BlockNumberRepository } from './block-number';\nimport {\n  CoingeckoPriceRepository,\n  AaveRates,\n  TokenPriceProvider,\n  HistoricalPriceProvider,\n  CoingeckoHistoricalPriceRepository,\n} from './token-prices';\nimport { StaticTokenProvider } from './token/static';\nimport { LiquidityGaugeSubgraphRPCProvider } from './liquidity-gauges/provider';\nimport { FeeDistributorRepository } from './fee-distributor/repository';\nimport { FeeCollectorRepository } from './fee-collector/repository';\nimport { TokenYieldsRepository } from './token-yields/repository';\nimport { ProtocolFeesProvider } from './protocol-fees/provider';\nimport { Provider } from '@ethersproject/providers';\n\n// initialCoingeckoList are used to get the initial token list for coingecko\n// TODO: we might want to replace that with what frontend is using\nimport initialCoingeckoList from '@/modules/data/token-prices/initial-list.json';\nimport { SubgraphPriceRepository } from './token-prices/subgraph';\nimport { createSubgraphClient } from '../subgraph/subgraph';\nimport { Contracts } from '../contracts/contracts.module';\n\nexport class Data implements BalancerDataRepositories {\n  pools;\n  poolsForSimulations;\n  poolsOnChain;\n  yesterdaysPools;\n  poolShares;\n  poolGauges;\n  gaugeShares;\n  tokenPrices;\n  tokenHistoricalPrices;\n  tokenMeta;\n  liquidityGauges;\n  feeDistributor;\n  feeCollector;\n  protocolFees;\n  tokenYields;\n  blockNumbers;\n  poolJoinExits;\n  gyroConfigRepository;\n\n  constructor(\n    networkConfig: BalancerNetworkConfig,\n    provider: Provider,\n    contracts: Contracts,\n    subgraphQuery?: GraphQLQuery,\n    coingecko?: CoingeckoConfig\n  ) {\n    this.pools = new PoolsSubgraphRepository({\n      url: networkConfig.urls.subgraph,\n      chainId: networkConfig.chainId,\n      query: subgraphQuery,\n    });\n\n    // Used for VaultModel and Simulations\n    this.poolsForSimulations = new SubgraphPoolDataService(\n      createSubgraphClient(networkConfig.urls.subgraph),\n      provider,\n      networkConfig,\n      undefined,\n      subgraphQuery\n    );\n\n    this.poolsOnChain = new PoolsSubgraphOnChainRepository(\n      this.pools,\n      {\n        provider: provider,\n        multicall: networkConfig.addresses.contracts.multicall,\n        vault: networkConfig.addresses.contracts.vault,\n      },\n      networkConfig.poolsToIgnore,\n      networkConfig.multicallBatchSize\n    );\n\n    this.poolShares = new PoolSharesRepository(\n      networkConfig.urls.subgraph,\n      networkConfig.chainId\n    );\n\n    this.poolJoinExits = new PoolJoinExitRepository(\n      networkConfig.urls.subgraph,\n      networkConfig.chainId\n    );\n\n    if (networkConfig.urls.gaugesSubgraph) {\n      this.poolGauges = new PoolGaugesRepository(\n        networkConfig.urls.gaugesSubgraph,\n        networkConfig.chainId\n      );\n\n      this.gaugeShares = new GaugeSharesRepository(\n        networkConfig.urls.gaugesSubgraph,\n        networkConfig.chainId\n      );\n    }\n\n    // 🚨 yesterdaysPools is used to calculate swapFees accumulated over last 24 hours\n    // TODO: find a better data source for that, eg: maybe DUNE once API is available\n    if (networkConfig.urls.blockNumberSubgraph) {\n      this.blockNumbers = new BlockNumberRepository(\n        networkConfig.urls.blockNumberSubgraph\n      );\n\n      const blockDayAgo = async () => {\n        if (this.blockNumbers) {\n          return await this.blockNumbers.find('dayAgo');\n        }\n      };\n\n      this.yesterdaysPools = new PoolsSubgraphRepository({\n        url: networkConfig.urls.subgraph,\n        chainId: networkConfig.chainId,\n        blockHeight: blockDayAgo,\n        query: subgraphQuery,\n      });\n    } else if (networkConfig.averageBlockTime) {\n      const blockDayAgo = async () => {\n        const blockNumber = await provider.getBlockNumber();\n        const blocksPerDay = Math.round(\n          86400 / (networkConfig.averageBlockTime || 2)\n        );\n        return blockNumber - blocksPerDay;\n      };\n\n      this.yesterdaysPools = new PoolsSubgraphRepository({\n        url: networkConfig.urls.subgraph,\n        chainId: networkConfig.chainId,\n        blockHeight: blockDayAgo,\n        query: subgraphQuery,\n      });\n    }\n\n    const tokenAddresses = initialCoingeckoList\n      .filter((t) => t.chainId == networkConfig.chainId)\n      .map((t) => t.address);\n\n    const coingeckoRepository = new CoingeckoPriceRepository(\n      tokenAddresses,\n      networkConfig.chainId,\n      coingecko\n    );\n\n    const subgraphPriceRepository = new SubgraphPriceRepository(\n      networkConfig.urls.subgraph,\n      networkConfig.chainId\n    );\n\n    const aaveRates = new AaveRates(\n      contracts.contracts.multicall,\n      networkConfig.chainId\n    );\n\n    this.tokenPrices = new TokenPriceProvider(\n      coingeckoRepository,\n      subgraphPriceRepository,\n      aaveRates\n    );\n\n    const coingeckoHistoricalRepository =\n      new CoingeckoHistoricalPriceRepository(networkConfig.chainId, coingecko);\n\n    this.tokenHistoricalPrices = new HistoricalPriceProvider(\n      coingeckoHistoricalRepository,\n      aaveRates\n    );\n\n    this.tokenMeta = new StaticTokenProvider([]);\n\n    if (networkConfig.urls.gaugesSubgraph) {\n      this.liquidityGauges = new LiquidityGaugeSubgraphRPCProvider(\n        networkConfig.urls.gaugesSubgraph,\n        contracts.contracts.multicall,\n        networkConfig.addresses.contracts.gaugeController || '',\n        networkConfig.chainId,\n        networkConfig.addresses.contracts.gaugeControllerCheckpointer\n      );\n    }\n\n    if (\n      networkConfig.addresses.contracts.feeDistributor &&\n      networkConfig.addresses.tokens.bal &&\n      networkConfig.addresses.tokens.veBal &&\n      networkConfig.addresses.tokens.bbaUsd\n    ) {\n      this.feeDistributor = new FeeDistributorRepository(\n        contracts.contracts.multicall,\n        networkConfig.addresses.contracts.feeDistributor,\n        networkConfig.addresses.tokens.bal,\n        networkConfig.addresses.tokens.veBal,\n        networkConfig.addresses.tokens.bbaUsd,\n        provider\n      );\n    }\n\n    this.feeCollector = new FeeCollectorRepository(\n      networkConfig.addresses.contracts.vault,\n      provider\n    );\n\n    if (networkConfig.addresses.contracts.protocolFeePercentagesProvider) {\n      this.protocolFees = new ProtocolFeesProvider(\n        contracts.contracts.multicall,\n        networkConfig.addresses.contracts.protocolFeePercentagesProvider\n      );\n    }\n\n    this.tokenYields = new TokenYieldsRepository();\n\n    if (networkConfig.addresses.contracts.gyroConfigProxy) {\n      this.gyroConfigRepository = new GyroConfigRepositoryImpl(\n        networkConfig.addresses.contracts.gyroConfigProxy,\n        contracts.contracts.multicall,\n        provider\n      );\n    }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { MaxInt256 } from '@ethersproject/constants';\nimport { BatchSwapStep, SwapType } from '../swaps/types';\nimport { Relayer } from './relayer.module';\nimport { OutputReference, PoolKind } from './types';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\n\n/**\n * Converts poolType and poolTypeVersion to PoolKind used by Relayer V5 defined in:\n * https://github.com/balancer/balancer-v2-monorepo/blob/9b78879ee3a0dcae57094bdfdae973873e4262cf/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L105\n *\n * @internal\n * @param poolType\n * @param poolTypeVersion\n * @returns PoolKind\n */\nconst poolType2PoolKind = (\n  poolType: string,\n  poolTypeVersion: number\n): PoolKind => {\n  if (poolType === 'Stable') {\n    return PoolKind.LEGACY_STABLE;\n  } else if (poolType === 'ComposableStable' && poolTypeVersion === 1) {\n    return PoolKind.COMPOSABLE_STABLE;\n  } else if (poolType === 'ComposableStable') {\n    return PoolKind.COMPOSABLE_STABLE_V2;\n  } else {\n    return PoolKind.WEIGHTED;\n  }\n};\n\nexport const setRelayerApproval = Relayer.encodeSetRelayerApproval;\nexport const gaugeWithdrawal = Relayer.encodeGaugeWithdraw;\nexport const gaugeDeposit = Relayer.encodeGaugeDeposit;\nexport const peekChainedReferenceValue =\n  Relayer.encodePeekChainedReferenceValue;\n\n/**\n * Encodes exitPool callData.\n * Exit pool to underlying tokens and assigns output references to the exit amounts.\n *\n * @param poolId Pool ID.\n * @param poolType Pool type.\n * @param poolTypeVersion Pool type version.\n * @param assets Ordered pool tokens.\n * @param singleTokenExit When\n * @param outputReferences reference to exit amounts for the next transaction\n * @param amount Amount of BPT to exit with as a number with 18 digits of precision passed as a string.\n * @param sender Sender address.\n * @param recipient Recipient address.\n * @param isComposable Whether the poolType is ComposableStable or not.\n * @param toInternalBalance Use internal balance or not.\n * @returns Encoded exitPool call.\n */\nexport const exit = (\n  poolId: string,\n  poolType: string,\n  poolTypeVersion: number,\n  assets: string[],\n  exitTokenIndex = -1,\n  outputReferences: OutputReference[],\n  amount: string,\n  sender: string,\n  recipient: string,\n  toInternalBalance = true\n): string => {\n  let userData: string;\n  const isComposable = poolType === 'ComposableStable' && poolTypeVersion === 1;\n\n  // Exit pool proportionally or to a singleToken\n  if (exitTokenIndex > -1) {\n    userData = StablePoolEncoder.exitExactBPTInForOneTokenOut(\n      amount,\n      exitTokenIndex\n    );\n  } else {\n    const encoder = isComposable\n      ? ComposableStablePoolEncoder.exitExactBPTInForAllTokensOut\n      : StablePoolEncoder.exitExactBPTInForTokensOut;\n    userData = encoder(amount);\n  }\n\n  // Relayer V5 introduces PoolKind\n  const poolKind = poolType2PoolKind(poolType, poolTypeVersion);\n\n  // Encode exit pool data\n  const callData = Relayer.encodeExitPool({\n    poolId,\n    poolKind,\n    sender,\n    recipient,\n    outputReferences,\n    exitPoolRequest: {\n      assets,\n      minAmountsOut: new Array(assets.length).fill('0'),\n      userData,\n      toInternalBalance,\n    },\n  });\n\n  return callData;\n};\n\n/**\n * Encodes joinPool callData.\n * Joins pool with underlying tokens and assigns output reference to the BPT amount.\n *\n * @param poolId Pool ID.\n * @param poolType Pool type.\n * @param poolTypeVersion Pool type version.\n * @param assets Ordered pool tokens.\n * @param amountsIn Amounts of tokens to join with as a number with 18 digits of precision passed as a string.\n * @param minimumBPT Minimum BPT amount to receive as a number with 18 digits of precision passed as a string.\n * @param outputReference reference to BPT amount for the next transaction\n * @param sender Sender address.\n * @param recipient Recipient address.\n * @param fromInternalBalance Use internal balance or not.\n * @returns Encoded joinPool call.\n */\nexport const join = (\n  poolId: string,\n  poolType: string,\n  poolTypeVersion: number,\n  assets: string[],\n  amountsIn: string[],\n  minimumBPT: string,\n  outputReference: string,\n  sender: string,\n  recipient: string,\n  fromInternalBalance = true\n): string => {\n  const maxAmountsIn = assets.map(() => MaxInt256);\n\n  // Encoding join pool data with the type exactTokensIn (1)\n  // StablePoolEncoder.joinExactTokensInForBPTOut is the same for all pool types\n  const userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n    amountsIn,\n    minimumBPT\n  );\n\n  const kind = poolType2PoolKind(poolType, poolTypeVersion);\n\n  const callData = Relayer.encodeJoinPool({\n    poolId,\n    kind,\n    sender,\n    recipient,\n    joinPoolRequest: {\n      assets,\n      maxAmountsIn,\n      userData,\n      fromInternalBalance,\n    },\n    value: '0',\n    outputReference,\n  });\n\n  return callData;\n};\n\n/**\n * Creates encoded batchSwap callData\n * outputReferences contain the output amount for swap's last token\n *\n * @param sender Sender address.\n * @param recipient Recipient address.\n * @param swaps List of swaps to execute.\n * @param deadline Deadline for the transaction.\n * @param toInternalBalance Use internal balance or not.\n * @returns Encoded batchSwap call\n */\nexport const swaps = (\n  sender: string,\n  recipient: string,\n  swaps: {\n    path: {\n      poolId: string;\n      assetIn: string;\n      assetOut: string;\n    }[];\n    inputAmount: string;\n    outputReference: BigNumber;\n  }[],\n  deadline?: string,\n  toInternalBalance = true\n): string => {\n  const assets: string[] = [];\n  const limits: string[] = [];\n  const outputReferences: { index: number; key: BigNumber }[] = [];\n  const batchSwaps: BatchSwapStep[] = [];\n\n  // Convert paths into batchSwap steps\n  swaps.forEach((swap) => {\n    const { path, inputAmount, outputReference } = swap;\n\n    for (let i = 0; i < path.length; i++) {\n      const { poolId, assetIn, assetOut } = path[i];\n\n      assets.push(assetIn);\n      assets.push(assetOut);\n\n      limits.push(MaxInt256.toString());\n      limits.push('0');\n\n      const assetInIndex = i * 2;\n      const assetOutIndex = i * 2 + 1;\n\n      const swap: BatchSwapStep = {\n        poolId,\n        assetInIndex,\n        assetOutIndex,\n        amount: i === 0 ? inputAmount : '0',\n        userData: '0x',\n      };\n\n      batchSwaps.push(swap);\n    }\n\n    // Add output reference for the last swap\n    outputReferences.push({ index: path.length * 2 - 1, key: outputReference });\n  });\n\n  const funds = {\n    sender,\n    recipient,\n    fromInternalBalance: true,\n    toInternalBalance,\n  };\n\n  const encodedBatchSwap = Relayer.encodeBatchSwap({\n    swapType: SwapType.SwapExactIn,\n    swaps: batchSwaps,\n    assets,\n    funds,\n    limits,\n    deadline: deadline || BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n    value: '0',\n    outputReferences,\n  });\n\n  return encodedBatchSwap;\n};\n","import { Findable, Pool, PoolAttribute } from '@/types';\nimport { BalancerRelayer__factory } from '@/contracts';\n\nexport const balancerRelayerInterface =\n  BalancerRelayer__factory.createInterface();\n\n/**\n * Using array of objects to preserve the tokens order\n */\nexport interface MigrationPool {\n  address: string;\n  id?: string;\n  poolType?: string;\n  poolTypeVersion?: number;\n  tokens?: MigrationPool[];\n  mainIndex?: number;\n}\n\n/**\n * Foreach AaveLinear: AaveLinear > mainTokens > newAaveLinear\n *\n * @param fromTokens\n * @param toTokens\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const buildPaths = (\n  fromTokens: MigrationPool[],\n  toTokens: MigrationPool[],\n  exitTokenIndex: number\n) => {\n  // Get the main token address for each pool\n  const getMainToken = ({ tokens, mainIndex }: MigrationPool) =>\n    (tokens && mainIndex && tokens[mainIndex].address) || '';\n  const mainFromTokens = fromTokens.flatMap(getMainToken);\n  const mainToTokens = toTokens.flatMap(getMainToken);\n\n  // Find the index of the main token in both from and to pools\n  const pathIndexes = mainFromTokens.map(\n    (token, idx) => (token && [idx, mainToTokens.indexOf(token)]) || [-1, -1]\n  );\n\n  // Build the paths from the indexes\n  const exitSwaps = pathIndexes.map(([fromIdx, toIdx]) => {\n    if (fromIdx === -1 || toIdx === -1) {\n      return [];\n    }\n    const fromPool = fromTokens[fromIdx];\n    const toPool = toTokens[toIdx];\n    return buildPath(fromPool, toPool);\n  });\n\n  // If we want to exit a specific token, return only that path\n  if (exitTokenIndex > -1) {\n    return [exitSwaps[exitTokenIndex]];\n  }\n\n  return exitSwaps;\n};\n\nconst buildPath = (from: MigrationPool, to: MigrationPool) => {\n  if (from.poolType?.match(/.*Linear.*/)) {\n    return buildLinearPath(from, to);\n  }\n\n  return [];\n};\n\nconst buildLinearPath = (from: MigrationPool, to: MigrationPool) => {\n  if (\n    !from.id ||\n    !to.id ||\n    !from.tokens ||\n    !to.tokens ||\n    !from.mainIndex ||\n    !to.mainIndex\n  ) {\n    throw 'Missing tokens';\n  }\n  const mainToken = from.tokens[from.mainIndex];\n\n  const path = [\n    {\n      poolId: from.id,\n      assetIn: from.address,\n      assetOut: mainToken.address,\n    },\n    {\n      poolId: to.id,\n      assetIn: mainToken.address,\n      assetOut: to.address,\n    },\n  ];\n\n  return path;\n};\n\n/**\n * Converts Subgraph Pool to MigrationPool\n * Recursively builds tokens\n *\n * @param id\n * @param repository\n * @returns\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const buildMigrationPool = async (\n  id: string,\n  repository: Findable<Pool, PoolAttribute>\n) => {\n  const pool = await repository.find(id);\n  if (!pool) throw `Pool ${id} not found`;\n\n  const findTokens = async (token: string, parentPool: string) => {\n    let tokens: Array<MigrationPool> = [{ address: token }];\n    const pool = await repository.findBy('address', token);\n    if (pool && token != parentPool) {\n      const sortedTokens = pool.tokens.sort(cmpTokens);\n      const nestedTokens = await Promise.all(\n        sortedTokens.map(({ address }) => findTokens(address, pool.address))\n      );\n      tokens = [\n        {\n          address: token,\n          id: pool.id,\n          poolType: pool.poolType,\n          poolTypeVersion: pool.poolTypeVersion,\n          mainIndex: pool.mainIndex,\n          tokens: nestedTokens.flat(),\n        },\n      ];\n    }\n    return tokens;\n  };\n\n  // Sorts amounts out into ascending order (referenced to token addresses) to match the format expected by the Vault.\n  const sortedTokens = pool.tokens.sort(cmpTokens);\n\n  return {\n    id,\n    address: pool.address,\n    tokens: (\n      await Promise.all(\n        sortedTokens.map(({ address }) => findTokens(address, pool.address))\n      )\n    ).flat(),\n    poolType: pool.poolType,\n    poolTypeVersion: pool.poolTypeVersion,\n    mainIndex: pool.mainIndex,\n  };\n};\n\nconst cmpTokens = (tokenA: MigrationPool, tokenB: MigrationPool): number =>\n  tokenA.address.toLowerCase() > tokenB.address.toLowerCase() ? 1 : -1;\n","import { OutputReference, Relayer } from '@/modules/relayer/relayer.module';\nimport * as actions from '@/modules/relayer/actions';\nimport { buildPaths, MigrationPool, balancerRelayerInterface } from './helpers';\nimport { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Builds migration call data.\n *\n * @param account Address of the migrating account\n * @param relayer Address of the relayer\n * @param bptAmount Amount of BPT to migrate\n * @param minBptOut Minimal amount of BPT to receive\n * @param from Pool to migrate from\n * @param to Pool to migrate to\n * @param peek Add a peek call for the expected BPT amount, decodable by the `decodePeak` function\n * @param fromGauge Unstake from gauge before migrating\n * @param toGauge Restake to gauge after migrating\n * @param authorisation User's authorisation to approve relayer in the vault\n * @returns call data\n */\nexport const migrationBuilder = (\n  account: string,\n  relayer: string,\n  bptAmount: string,\n  minBptOut: string,\n  from: MigrationPool,\n  to: MigrationPool,\n  peek = false,\n  fromGauge?: string,\n  toGauge?: string,\n  authorisation?: string\n): string => {\n  if (\n    !from.id ||\n    !to.id ||\n    !from.tokens ||\n    !to.tokens ||\n    !from.poolType ||\n    !to.poolType\n  ) {\n    throw 'Pool data is missing';\n  }\n\n  // Define tokens\n  const fromTokens = from.tokens.flatMap(({ address }) => address);\n  const toTokens = to.tokens.flatMap(({ address }) => address);\n\n  // Prefer proportional exit, except for ComposableStableV1\n  // Choose 0 as the exit token index\n  // TODO: make default exit token dynamic\n  const exitTokenIndex =\n    from.poolType == 'ComposableStable' && from.poolTypeVersion == 1 ? 0 : -1;\n\n  // Define output references\n  let exitOutputReferences: OutputReference[];\n  let swapOutputReferences: BigNumber[] = [];\n  if (exitTokenIndex > -1) {\n    exitOutputReferences = [\n      {\n        index: exitTokenIndex,\n        key: Relayer.toChainedReference(`10${exitTokenIndex}`),\n      },\n    ];\n    swapOutputReferences = [Relayer.toChainedReference(`20${exitTokenIndex}`)];\n  } else {\n    exitOutputReferences = fromTokens.map((_, idx) => ({\n      index: idx,\n      key: Relayer.toChainedReference(`10${idx}`),\n    }));\n    swapOutputReferences = fromTokens.map((_, idx) =>\n      Relayer.toChainedReference(`20${idx}`)\n    );\n  }\n\n  const joinAmount = Relayer.toChainedReference('999');\n\n  // Configure migration steps\n  const migrationSteps = [];\n  let needsSwap = false; // only if from is ComposableStable\n\n  if (from.poolType === 'ComposableStable') {\n    needsSwap = true;\n  }\n\n  // 0. Set relayer approval\n  if (authorisation) {\n    migrationSteps.push(\n      actions.setRelayerApproval(relayer, true, authorisation)\n    );\n  }\n\n  // 1. Withdraw from old gauge\n  if (fromGauge) {\n    migrationSteps.push(\n      actions.gaugeWithdrawal(fromGauge, account, relayer, bptAmount)\n    );\n  }\n\n  // 2. Exit old pool\n  migrationSteps.push(\n    actions.exit(\n      from.id,\n      from.poolType,\n      from.poolTypeVersion || 1,\n      fromTokens,\n      exitTokenIndex,\n      exitOutputReferences,\n      bptAmount,\n      fromGauge ? relayer : account,\n      relayer\n    )\n  );\n\n  // 3. Swap\n  const swapPaths = buildPaths(from.tokens, to.tokens, exitTokenIndex);\n  if (swapPaths.flat().length > 0) {\n    // Match exit to swap amounts\n    const swaps = swapPaths\n      .map((path, idx) => ({\n        path,\n        inputAmount: String(exitOutputReferences[idx].key),\n        outputReference: swapOutputReferences[idx],\n      }))\n      .filter(({ path }) => path.length > 0);\n\n    migrationSteps.push(actions.swaps(relayer, relayer, swaps));\n  }\n\n  // 3. Join\n  // Match swap or exit references to the positions of join tokens\n  // In case no reference is defined, the default is 0\n  const references = toTokens\n    .filter((address) => to.address != address)\n    .map((to) => {\n      const fromIdx = fromTokens.indexOf(to);\n      return String(\n        (needsSwap && swapOutputReferences[fromIdx]) ||\n          exitOutputReferences[fromIdx]?.key ||\n          0\n      );\n    });\n\n  migrationSteps.push(\n    actions.join(\n      to.id,\n      to.poolType,\n      to.poolTypeVersion || 1,\n      toTokens,\n      references,\n      minBptOut,\n      String(joinAmount),\n      relayer,\n      toGauge ? relayer : account,\n      true\n    )\n  );\n\n  // Peek the last join amount\n  if (peek === true) {\n    migrationSteps.push(actions.peekChainedReferenceValue(String(joinAmount)));\n  }\n\n  // 4. Deposit to the new gauge\n  if (toGauge) {\n    migrationSteps.push(\n      actions.gaugeDeposit(toGauge, relayer, account, String(joinAmount))\n    );\n  }\n\n  const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n    migrationSteps,\n  ]);\n\n  return callData;\n};\n","import { Findable, Pool, PoolAttribute } from '@/types';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { SubgraphLiquidityGauge } from '../subgraph/subgraph';\nimport { migrationBuilder } from './migrations/builder';\nimport {\n  balancerRelayerInterface,\n  buildMigrationPool,\n} from './migrations/helpers';\nimport * as actions from '@/modules/relayer/actions';\n\n/**\n * @param user - user address\n * @param from - pool ID\n * @param to - pool ID\n * @param balance - amount of liquidity to migrate in WAL (wei-ether)\n * @param minBptOut - minimum amount of BPT to receive, when 0 it will include a peek for the amount\n * @param authorisation - signed user's authorisation to approve relayer in the vault\n */\ninterface MigrationParams {\n  user: string;\n  from: string;\n  to: string;\n  balance: string;\n  minBptOut?: string;\n  authorisation?: string;\n}\n\n/**\n * Class responsible for building liquidity migration transactions.\n */\nexport class Migrations {\n  public relayerAddress: string;\n  public poolsRepository: Findable<Pool, PoolAttribute>;\n  public gaugesRepository: Findable<SubgraphLiquidityGauge>;\n  public provider: JsonRpcProvider;\n\n  /**\n   * Instance of a class responsible for building liquidity migration transactions.\n   *\n   * @param relayerAddress Address of the relayer contract.\n   * @param poolsRepository Repository of pools.\n   * @param liquidityGaugesRepository Repository of liquidity gauges.\n   * @param provider Provider to use for RPC data fetching.\n   *\n   * Available methods:\n   * - `pool2pool` - Migrates liquidity from one pool to another.\n   * - `pool2poolWithGauges` - Migrates liquidity from a pool's gauge to another gauge.\n   * - `gauge2gauge` - Migrates liquidity from one gauge to another of the same pool.\n   *\n   * @example\n   * ```typescript\n   * const sdk = new BalancerSDK({\n   *   network: 1,\n   *   rpcUrl: 'https://rpc.ankr.com/eth',\n   * })\n   *\n   * const migrations = new Migrations({\n   *   relayerAddress: sdk.networkConfig.addresses.contracts.relayerV4 as string,\n   *   poolsRepository: sdk.data.pools,\n   *   gaugesRepository: sdk.data.liquidityGauges.subgraph,\n   *   provider: sdk.provider\n   * })\n   *\n   * const user = '0xfacec29Ae158B26e234B1a81Db2431F6Bd8F8cE8'\n   * const from = '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080'\n   * const to = '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080'\n   * const balance = '1000000000000000000'\n   * const { to, data } = await migrations.pool2pool({ user, from, to, balance })\n   *\n   * const tx = await sdk.provider.sendTransaction({ to, data })\n   * ```\n   */\n  constructor({\n    relayerAddress,\n    poolsRepository,\n    gaugesRepository,\n    provider,\n  }: {\n    relayerAddress: string;\n    poolsRepository: Findable<Pool, PoolAttribute>;\n    gaugesRepository: Findable<SubgraphLiquidityGauge>;\n    provider: JsonRpcProvider;\n  }) {\n    this.relayerAddress = relayerAddress;\n    this.poolsRepository = poolsRepository;\n    this.gaugesRepository = gaugesRepository;\n    this.provider = provider;\n  }\n\n  /**\n   * Takes user, from and to pool IDs as strings and returns the transaction data\n   *\n   * @returns transaction data\n   */\n  async pool2pool({\n    user,\n    from,\n    to,\n    balance,\n    minBptOut = '0',\n    authorisation,\n  }: MigrationParams): Promise<{ to: string; data: string }> {\n    const fromPool = await buildMigrationPool(from, this.poolsRepository);\n    const toPool = await buildMigrationPool(to, this.poolsRepository);\n\n    const data = migrationBuilder(\n      user,\n      this.relayerAddress,\n      String(balance),\n      minBptOut,\n      fromPool,\n      toPool,\n      minBptOut == '0', // if minBptOut is 0, we peek for the join amount\n      undefined,\n      undefined,\n      authorisation\n    );\n\n    return {\n      to: this.relayerAddress,\n      data,\n    };\n  }\n\n  /**\n   * Takes user, from and to pool IDs as strings and returns the transaction data\n   * for a migration including unstaking and restaking\n   *\n   * @returns transaction data\n   */\n  async pool2poolWithGauges({\n    user,\n    from,\n    to,\n    balance,\n    minBptOut = '0',\n    authorisation,\n  }: MigrationParams): Promise<{ to: string; data: string }> {\n    const fromGauge = await this.gaugesRepository.findBy('poolId', from);\n    const toGauge = await this.gaugesRepository.findBy('poolId', to);\n    if (!fromGauge || !fromGauge.poolId || !toGauge || !toGauge.poolId) {\n      throw new Error('Gauge not found');\n    }\n    const fromPool = await buildMigrationPool(\n      fromGauge.poolId,\n      this.poolsRepository\n    );\n    const toPool = await buildMigrationPool(\n      toGauge.poolId,\n      this.poolsRepository\n    );\n\n    const data = migrationBuilder(\n      user,\n      this.relayerAddress,\n      String(balance),\n      minBptOut,\n      fromPool,\n      toPool,\n      minBptOut == '0', // if minBptOut is 0, we peek for the join amount\n      fromGauge.id,\n      toGauge.id,\n      authorisation\n    );\n\n    return {\n      to: this.relayerAddress,\n      data,\n    };\n  }\n\n  /**\n   * Migrates staked liquidity for the same pool from one gauge to another.\n   *\n   * @returns transaction data\n   */\n  async gauge2gauge({\n    user,\n    from,\n    to,\n    balance,\n    authorisation,\n  }: MigrationParams): Promise<{ to: string; data: string }> {\n    const steps = [\n      actions.gaugeWithdrawal(from, user, this.relayerAddress, balance),\n      actions.gaugeDeposit(to, this.relayerAddress, user, balance),\n    ];\n\n    if (authorisation) {\n      steps.unshift(\n        actions.setRelayerApproval(this.relayerAddress, true, authorisation)\n      );\n    }\n\n    const data = balancerRelayerInterface.encodeFunctionData('multicall', [\n      steps,\n    ]);\n\n    return {\n      to: this.relayerAddress,\n      data,\n    };\n  }\n\n  /**\n   * Decodes the relayer return value to get the expected BPT out.\n   *\n   * @param relayerReturnValue\n   * @returns\n   */\n  static getExpectedBptOut = (relayerReturnValue: string): string => {\n    // Get last two positions of the return value, bptOut is the last one or the second to last one in case there is a gauge deposit\n    // join and gauge deposit are always 0x, so any other value means that's the bptOut\n    const multicallResult = balancerRelayerInterface.decodeFunctionResult(\n      'multicall',\n      relayerReturnValue\n    );\n\n    const expectedBptOut = multicallResult[0]\n      .slice(-2)\n      .filter((v: string) => v !== '0x');\n\n    return String(BigInt(expectedBptOut));\n  };\n\n  getExpectedBptOut = Migrations.getExpectedBptOut;\n}\n","import { SubgraphPoolBase } from '@balancer-labs/sor';\nimport {\n  EncodeJoinPoolInput,\n  ExitPoolData,\n  EncodeBatchSwapInput,\n} from '@/modules/relayer/relayer.module';\nimport { Join } from './join';\nimport { Exit } from './exit';\nimport { Swap } from './swap';\n\nexport enum ActionStep {\n  Direct,\n  TokenIn,\n  TokenOut,\n  Middle,\n}\n\nexport enum ActionType {\n  BatchSwap,\n  Join,\n  Exit,\n}\n\nexport type Actions = Exit | Swap | Join;\n\nexport interface Action {\n  type: ActionType.Join | ActionType.Exit | ActionType.BatchSwap;\n  callData(pool: SubgraphPoolBase, wrappedNativeAsset: string): CallData;\n  getAmountIn(): string;\n  getAmountOut(): string;\n}\n\nexport interface CallData {\n  params: EncodeJoinPoolInput | ExitPoolData | EncodeBatchSwapInput;\n  encoded: string | string[];\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { ActionStep, ActionType } from './types';\nimport { Relayer, OutputReference } from '@/modules/relayer/relayer.module';\n\nexport class BaseAction {\n  nextOpRefKey;\n  hasTokenOut;\n  hasTokenIn;\n  sender;\n  receiver;\n  opRefStart;\n  minOut;\n  amountIn;\n\n  constructor(\n    mainTokenInIndex: number,\n    mainTokenOutIndex: number,\n    swapAssetInIndex: number,\n    swapAssetOutIndex: number,\n    swapAmount: string,\n    swapReturn: string,\n    opRefKey: number,\n    slippage: string,\n    user: string,\n    relayer: string\n  ) {\n    const actionStep = this.getActionStep(\n      mainTokenInIndex,\n      mainTokenOutIndex,\n      swapAssetInIndex,\n      swapAssetOutIndex\n    );\n    // Will get actual amount if input or chain amount if part of chain\n    this.amountIn = this.getActionAmount(\n      swapAmount,\n      ActionType.BatchSwap,\n      actionStep,\n      opRefKey\n    );\n    this.hasTokenIn = this.actionHasTokenIn(actionStep);\n    this.hasTokenOut = this.actionHasTokenOut(actionStep);\n    // This will be 0 if not a mainTokenOut action otherwise amount using slippage\n    const amountOut = this.hasTokenOut ? swapReturn : '0';\n    this.minOut = this.getActionMinOut(amountOut, slippage);\n    // This will set opRef for next chained action if required\n    const [opRef, nextOpRefKey] = this.getActionOutputRef(\n      actionStep,\n      swapAssetOutIndex,\n      opRefKey\n    );\n    this.nextOpRefKey = nextOpRefKey;\n    this.opRefStart = opRef;\n    this.sender = this.getSender(this.hasTokenIn, user, relayer);\n    this.receiver = this.getReceiver(this.hasTokenOut, user, relayer);\n  }\n\n  /**\n   * If its not the first action then the amount will come from the previous output ref\n   * @param amount\n   * @param actionType\n   * @param actionStep\n   * @param opRefKey\n   * @returns\n   */\n  getActionAmount(\n    amount: string,\n    actionType: ActionType,\n    actionStep: ActionStep,\n    opRefKey: number\n  ): string {\n    let amountIn = amount;\n    if (\n      actionStep === ActionStep.TokenOut ||\n      (actionStep === ActionStep.Middle && actionType === ActionType.Join) ||\n      (actionStep === ActionStep.Middle && actionType === ActionType.Exit)\n    ) {\n      amountIn = Relayer.toChainedReference(opRefKey - 1).toString();\n    }\n    return amountIn;\n  }\n\n  /**\n   * If its not the final action then we need an outputReferece to chain to next action as input\n   * @param actionStep\n   * @param tokenOutIndex\n   * @param opRefKey\n   * @returns\n   */\n  getActionOutputRef(\n    actionStep: ActionStep,\n    tokenOutIndex: number,\n    opRefKey: number\n  ): [OutputReference, number] {\n    let opRef: OutputReference = {} as OutputReference;\n    if (actionStep === ActionStep.TokenIn || actionStep === ActionStep.Middle) {\n      opRef = this.getOutputRef(opRefKey, tokenOutIndex);\n      opRefKey++;\n    }\n    return [opRef, opRefKey];\n  }\n\n  /**\n   * Use slippage to set min amount out\n   * @param amountOut\n   * @param slippage\n   * @returns\n   */\n  getActionMinOut(amountOut: string, slippage: string): string {\n    // Currently only handle ExactIn swap. ExactOut would add slippage\n    // We should apply slippage to each swaps amountOut\n    return subSlippage(\n      BigNumber.from(amountOut),\n      BigNumber.from(slippage)\n    ).toString();\n  }\n\n  /**\n   * Find if the Action is:\n   * Direct: tokenIn > tokenOut\n   * TokenIn: tokenIn > chain...\n   * TokenOut: ...chain > tokenOut\n   * Middle: ...chain > action > chain...\n   * @param tokenInIndex\n   * @param tokenOutIndex\n   * @param tokenInIndexAction\n   * @param tokenOutIndexAction\n   * @returns\n   */\n  getActionStep(\n    tokenInIndex: number,\n    tokenOutIndex: number,\n    tokenInIndexAction: number,\n    tokenOutIndexAction: number\n  ): ActionStep {\n    let actionStep: ActionStep;\n    if (\n      tokenInIndexAction === tokenInIndex &&\n      tokenOutIndexAction === tokenOutIndex\n    ) {\n      actionStep = ActionStep.Direct;\n    } else if (tokenInIndexAction === tokenInIndex) {\n      actionStep = ActionStep.TokenIn;\n    } else if (tokenOutIndexAction === tokenOutIndex) {\n      actionStep = ActionStep.TokenOut;\n    } else {\n      actionStep = ActionStep.Middle;\n    }\n    return actionStep;\n  }\n\n  getOutputRef(key: number, index: number): OutputReference {\n    const keyRef = Relayer.toChainedReference(key);\n    return { index: index, key: keyRef };\n  }\n\n  getFromInternal(hasTokenIn: boolean, isBptIn?: boolean): boolean {\n    if (hasTokenIn || isBptIn) return false;\n    else return true;\n  }\n\n  getToInternal(hasTokenOut: boolean, isBptOut?: boolean): boolean {\n    // exits - can't exit using BPT from internal balances\n    // Because of ^ we can assume that any tokenOut BPT is going to external (either to user or exit)\n    if (hasTokenOut || isBptOut) return false;\n    else return true;\n  }\n\n  actionHasTokenIn(actionStep: ActionStep): boolean {\n    return actionStep === ActionStep.Direct || actionStep === ActionStep.TokenIn\n      ? true\n      : false;\n  }\n\n  actionHasTokenOut(actionStep: ActionStep): boolean {\n    return actionStep === ActionStep.Direct ||\n      actionStep === ActionStep.TokenOut\n      ? true\n      : false;\n  }\n\n  getSender(hasTokenIn: boolean, user: string, relayer: string): string {\n    // tokenIn/Out will come from/go to the user. Any other tokens are intermediate and will be from/to Relayer\n    if (hasTokenIn) return user;\n    else return relayer;\n  }\n\n  getReceiver(hasTokenOut: boolean, user: string, relayer: string): string {\n    // tokenIn/Out will come from/go to the user. Any other tokens are intermediate and will be from/to Relayer\n    if (hasTokenOut) return user;\n    else return relayer;\n  }\n\n  getPoolKind(poolType: string): number {\n    // We have to use correct pool type based off following from Relayer:\n    // enum PoolKind { WEIGHTED, LEGACY_STABLE, COMPOSABLE_STABLE, COMPOSABLE_STABLE_V2 }\n    // (note only Weighted and COMPOSABLE_STABLE_V2 will support proportional exits)\n    let kind = 0;\n    if ([`MetaStable`, `Stable`, `StablePhantom`].includes(poolType)) {\n      kind = 1;\n    } else if (poolType === `ComposableStable`) {\n      // In this case we are only doing BPT <> singleToken, not BPT <> tokens, so encoding matches and avoids need to check version so default to 3\n      kind = 3;\n    }\n    return kind;\n  }\n}\n","import { SubgraphPoolBase, SwapV2 } from '@balancer-labs/sor';\nimport {\n  Relayer,\n  ExitPoolData,\n  OutputReference,\n} from '@/modules/relayer/relayer.module';\nimport { ExitPoolRequest } from '@/types';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { AssetHelpers } from '@/lib/utils';\nimport { ActionType, Action, CallData } from './types';\nimport { BaseAction } from './baseAction';\n\nexport class Exit extends BaseAction implements Action {\n  type: ActionType.Exit;\n  poolId: string;\n  tokenOut: string;\n  toInternalBalance: boolean;\n  opRef: OutputReference;\n\n  constructor(\n    swap: SwapV2,\n    mainTokenInIndex: number,\n    mainTokenOutIndex: number,\n    public opRefKey: number,\n    assets: string[],\n    slippage: string,\n    user: string,\n    relayerAddress: string\n  ) {\n    super(\n      mainTokenInIndex,\n      mainTokenOutIndex,\n      swap.assetInIndex,\n      swap.assetOutIndex,\n      swap.amount,\n      swap.returnAmount ?? '0',\n      opRefKey,\n      slippage,\n      user,\n      relayerAddress\n    );\n    this.type = ActionType.Exit;\n    this.poolId = swap.poolId;\n    this.tokenOut = assets[swap.assetOutIndex];\n    this.toInternalBalance = this.getToInternal(this.hasTokenOut);\n    this.opRef = this.opRefStart;\n  }\n\n  public callData(\n    pool: SubgraphPoolBase,\n    wrappedNativeAsset: string\n  ): CallData {\n    const assets = pool.tokensList;\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // tokens must have same order as pool getTokens\n    const [sortedTokens] = assetHelpers.sortTokens(assets) as [string[]];\n    const exitToken = this.tokenOut;\n    const exitTokenIndex = sortedTokens.findIndex(\n      (t) => t.toLowerCase() === exitToken.toLowerCase()\n    );\n    const minAmountsOut = Array(assets.length).fill('0');\n    // Variable amount of token out (this has slippage applied)\n    minAmountsOut[exitTokenIndex] = this.minOut;\n    // Uses exact amount in\n    const bptAmtIn = this.amountIn;\n    const userData = WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n      bptAmtIn,\n      exitTokenIndex\n    );\n    const params: ExitPoolData = {\n      assets: sortedTokens,\n      minAmountsOut,\n      userData,\n      toInternalBalance: this.toInternalBalance,\n      poolId: this.poolId,\n      poolKind: this.getPoolKind(pool.poolType),\n      sender: this.sender,\n      recipient: this.receiver,\n      outputReferences: this.opRef.key ? [this.opRef] : [],\n      exitPoolRequest: {} as ExitPoolRequest,\n    };\n    const exitPoolInput = Relayer.formatExitPoolInput(params);\n    const callData = Relayer.encodeExitPool(exitPoolInput);\n    return {\n      params,\n      encoded: callData,\n    };\n  }\n\n  public getAmountIn(): string {\n    return this.hasTokenIn ? this.amountIn : '0';\n  }\n\n  public getAmountOut(): string {\n    return this.hasTokenOut ? this.minOut : '0';\n  }\n}\n","import { SubgraphPoolBase, SwapV2 } from '@balancer-labs/sor';\nimport {\n  Relayer,\n  EncodeJoinPoolInput,\n  OutputReference,\n} from '@/modules/relayer/relayer.module';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { AssetHelpers } from '@/lib/utils';\nimport { ActionType, Action, CallData } from './types';\nimport { BaseAction } from './baseAction';\n\nexport class Join extends BaseAction implements Action {\n  type: ActionType.Join;\n  poolId: string;\n  tokenIn: string;\n  opRef: OutputReference;\n  fromInternal;\n\n  constructor(\n    swap: SwapV2,\n    mainTokenInIndex: number,\n    mainTokenOutIndex: number,\n    public opRefKey: number,\n    assets: string[],\n    slippage: string,\n    user: string,\n    relayerAddress: string\n  ) {\n    super(\n      mainTokenInIndex,\n      mainTokenOutIndex,\n      swap.assetInIndex,\n      swap.assetOutIndex,\n      swap.amount,\n      swap.returnAmount ?? '0',\n      opRefKey,\n      slippage,\n      user,\n      relayerAddress\n    );\n    this.type = ActionType.Join;\n    this.poolId = swap.poolId;\n    this.tokenIn = assets[swap.assetInIndex];\n    this.fromInternal = this.getFromInternal(this.hasTokenIn);\n    this.opRef = this.opRefStart;\n  }\n\n  public callData(\n    pool: SubgraphPoolBase,\n    wrappedNativeAsset: string\n  ): CallData {\n    const assets = pool.tokensList;\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // tokens must have same order as pool getTokens\n    const [sortedTokens] = assetHelpers.sortTokens(assets) as [string[]];\n    const joinToken = this.tokenIn;\n    const joinTokenIndex = sortedTokens.findIndex(\n      (t) => t.toLowerCase() === joinToken.toLowerCase()\n    );\n    const maxAmountsIn = Array(assets.length).fill('0');\n    // Uses exact amounts of tokens in\n    maxAmountsIn[joinTokenIndex] = this.amountIn;\n    // Variable amount of BPT out (this has slippage applied)\n    const bptAmountOut = this.minOut;\n    const userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n      maxAmountsIn,\n      bptAmountOut\n    );\n    const params: EncodeJoinPoolInput = {\n      poolId: this.poolId,\n      sender: this.sender,\n      recipient: this.receiver,\n      kind: this.getPoolKind(pool.poolType),\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn,\n        userData,\n        fromInternalBalance: this.fromInternal,\n      },\n      value: '0',\n      outputReference: this.opRef.key ? this.opRef.key.toString() : '0',\n    };\n    const callData = Relayer.encodeJoinPool(params);\n\n    return {\n      params,\n      encoded: callData,\n    };\n  }\n\n  public getAmountIn(): string {\n    return this.hasTokenIn ? this.amountIn : '0';\n  }\n\n  public getAmountOut(): string {\n    return this.hasTokenOut ? this.minOut : '0';\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { MaxUint256, MaxInt256 } from '@ethersproject/constants';\nimport { SubgraphPoolBase, SwapV2 } from '@balancer-labs/sor';\nimport {\n  Relayer,\n  EncodeBatchSwapInput,\n  OutputReference,\n} from '@/modules/relayer/relayer.module';\nimport { FundManagement, SwapType } from '../../types';\nimport { ActionType, Action, CallData } from './types';\nimport { BaseAction } from './baseAction';\n\nexport class Swap extends BaseAction implements Action {\n  type: ActionType.BatchSwap;\n  swaps: SwapV2[];\n  limits: BigNumber[];\n  private approveTokens: string[] = [];\n  opRef: OutputReference[] = [];\n  fromInternal;\n  toInternal;\n\n  constructor(\n    swap: SwapV2,\n    private mainTokenInIndex: number,\n    private mainTokenOutIndex: number,\n    public opRefKey: number,\n    private assets: string[],\n    private slippage: string,\n    private pools: SubgraphPoolBase[],\n    private user: string,\n    private relayer: string\n  ) {\n    super(\n      mainTokenInIndex,\n      mainTokenOutIndex,\n      swap.assetInIndex,\n      swap.assetOutIndex,\n      swap.amount,\n      swap.returnAmount ?? '0',\n      opRefKey,\n      slippage,\n      user,\n      relayer\n    );\n    this.type = ActionType.BatchSwap;\n    // Updates swap data to use chainedRef if required\n    this.swaps = [{ ...swap, amount: this.amountIn }];\n    const isBptIn = this.isBpt(pools, assets[swap.assetInIndex]);\n    if (isBptIn) {\n      // Older pools don't have pre-approval so need to add this as a step\n      this.approveTokens.push(assets[swap.assetInIndex]);\n    }\n    this.fromInternal = this.getFromInternal(this.hasTokenIn, isBptIn);\n    const isBptOut = this.isBpt(pools, assets[swap.assetOutIndex]);\n    this.toInternal = this.getToInternal(this.hasTokenOut, isBptOut);\n    this.limits = this.getLimits(\n      assets,\n      swap.assetInIndex,\n      swap.assetOutIndex,\n      swap.amount,\n      this.hasTokenIn,\n      this.hasTokenOut,\n      this.minOut\n    );\n    if (this.opRefStart.index) {\n      this.opRef.push(this.opRefStart);\n    }\n  }\n\n  private getLimits(\n    assets: string[],\n    assetInIndex: number,\n    assetOutIndex: number,\n    swapAmount: string,\n    hasTokenIn: boolean,\n    hasTokenOut: boolean,\n    minOut: string\n  ): BigNumber[] {\n    const limits = assets.map(() => BigNumber.from(0));\n    // tokenIn/Out will come from/go to the user. Any other tokens are intermediate and will be from/to Relayer\n    if (hasTokenIn) {\n      limits[assetInIndex] = BigNumber.from(swapAmount);\n    } else {\n      // This will be a chained swap/input amount\n      limits[assetInIndex] = MaxInt256;\n    }\n    if (hasTokenOut) {\n      limits[assetOutIndex] = BigNumber.from(minOut).mul(-1);\n    }\n    return limits;\n  }\n\n  private updateLimits(limits: BigNumber[], newSwap: Swap): void {\n    if (newSwap.hasTokenIn) {\n      // We need to add amount for each swap that uses tokenIn to get correct total\n      limits[newSwap.swaps[0].assetInIndex] = limits[\n        newSwap.swaps[0].assetInIndex\n      ].add(newSwap.amountIn);\n    }\n    if (newSwap.hasTokenOut) {\n      // We need to add amount for each swap that uses tokenOut to get correct total (should be negative)\n      limits[newSwap.swaps[0].assetOutIndex] = limits[\n        newSwap.swaps[0].assetOutIndex\n      ].sub(newSwap.minOut);\n    }\n  }\n\n  isChainedSwap(swap: Swap): boolean {\n    return (\n      this.opRef[this.swaps.length - 1] &&\n      this.toInternal === swap.fromInternal &&\n      this.receiver === swap.sender &&\n      this.opRef[this.swaps.length - 1].key.toString() === swap.amountIn\n    );\n  }\n\n  // If swap has different send/receive params than previous then it will need to be done separately\n  canAddSwap(newSwap: Swap): boolean {\n    if (this.isChainedSwap(newSwap)) return true;\n    return (\n      newSwap.fromInternal === this.fromInternal &&\n      newSwap.toInternal === this.toInternal &&\n      newSwap.receiver === this.receiver &&\n      newSwap.sender === this.sender\n    );\n  }\n\n  callData(): CallData {\n    const calls: string[] = [];\n\n    for (const token of this.approveTokens) {\n      // If swap tokenIn is a BPT then:\n      // new pools have automatic infinite vault allowance, but not old ones\n      // const key = Relayer.fromChainedReference(action.swaps[0].amount);\n      // const readOnlyRef = Relayer.toChainedReference(key, false);\n      // const approval = Relayer.encodeApproveVault(token, readOnlyRef.toString());\n      // TODO fix approval amount\n      // TODO only approve once\n      const approval = Relayer.encodeApproveVault(token, MaxUint256.toString());\n      calls.push(approval);\n    }\n\n    const funds: FundManagement = {\n      sender: this.sender,\n      recipient: this.receiver,\n      fromInternalBalance: this.fromInternal,\n      toInternalBalance: this.toInternal,\n    };\n    const batchSwapInput: EncodeBatchSwapInput = {\n      swapType: SwapType.SwapExactIn,\n      swaps: this.swaps,\n      assets: this.assets,\n      funds,\n      limits: this.limits.map((l) => l.toString()),\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences: this.opRef,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap(batchSwapInput);\n    calls.push(encodedBatchSwap);\n    return {\n      params: batchSwapInput,\n      encoded: calls,\n    };\n  }\n  getAmountIn(): string {\n    return this.limits[this.mainTokenInIndex].toString();\n  }\n  getAmountOut(): string {\n    return this.limits[this.mainTokenOutIndex].abs().toString();\n  }\n\n  copy(): Swap {\n    return new Swap(\n      this.swaps[0],\n      this.mainTokenInIndex,\n      this.mainTokenOutIndex,\n      this.opRefKey,\n      this.assets,\n      this.slippage,\n      this.pools,\n      this.user,\n      this.relayer\n    );\n  }\n\n  addSwap(swap: Swap): void {\n    const isChainedSwap = this.isChainedSwap(swap);\n    this.swaps.push(swap.swaps[0]);\n    // Merge approveTokens without any duplicates\n    this.approveTokens = [\n      ...new Set([...this.approveTokens, ...swap.approveTokens]),\n    ];\n    this.toInternal = swap.toInternal;\n    this.receiver = swap.receiver;\n    this.hasTokenOut = swap.hasTokenOut;\n    this.minOut = swap.minOut;\n    this.opRef = [...this.opRef, ...swap.opRef];\n    if (!isChainedSwap) {\n      this.amountIn = BigNumber.from(this.amountIn)\n        .add(swap.amountIn)\n        .toString();\n    }\n    this.updateLimits(this.limits, swap);\n  }\n\n  isBpt(pools: SubgraphPoolBase[], token: string): boolean {\n    return pools.some((p) => p.address.toLowerCase() === token.toLowerCase());\n  }\n}\n","import { ActionType, Actions } from './types';\nimport { Swap } from './swap';\n\n/**\n * Categorize each action into a Join, Middle or Exit.\n * @param actions\n * @returns\n */\nexport function categorizeActions(actions: Actions[]): Actions[] {\n  const enterActions: Actions[] = [];\n  const exitActions: Actions[] = [];\n  const middleActions: Actions[] = [];\n  for (const a of actions) {\n    if (a.type === ActionType.Exit || a.type === ActionType.Join) {\n      // joins/exits with tokenIn can always be done first\n      if (a.hasTokenIn) enterActions.push(a);\n      // joins/exits with tokenOut (and not tokenIn) can always be done last\n      else if (a.hasTokenOut) exitActions.push(a);\n      else middleActions.push(a);\n    }\n    // All other actions will be chained inbetween\n    else middleActions.push(a);\n  }\n  const allActions: Actions[] = [\n    ...enterActions,\n    ...middleActions,\n    ...exitActions,\n  ];\n  return allActions;\n}\n\n/**\n * This aims to minimise the number of Actions the Relayer multicall needs to call by batching sequential swaps together.\n * @param actions\n * @param assets\n * @returns\n */\nexport function batchSwapActions(allActions: Actions[]): Actions[] {\n  /*\n  batchSwaps are a collection of swaps that can all be called in a single batchSwap\n  Can batch all swaps with same source\n  Any swap without tokenIn && not BPT should be coming from internal balances\n  Any swap with tokenIn or BPT should be coming from external balances\n  */\n  const orderedActions: Actions[] = [];\n  let batchedSwaps: Swap | undefined = undefined;\n\n  for (const a of allActions) {\n    if (a.type === ActionType.BatchSwap) {\n      if (!batchedSwaps) {\n        batchedSwaps = a.copy();\n      } else {\n        if (batchedSwaps.canAddSwap(a)) {\n          batchedSwaps.addSwap(a);\n        } else {\n          orderedActions.push(batchedSwaps);\n          batchedSwaps = a.copy();\n        }\n      }\n    } else {\n      // Non swap action\n      if (batchedSwaps) {\n        orderedActions.push(batchedSwaps);\n        // new batchSwap collection as there is a chained join/exit inbetween\n        batchedSwaps = undefined;\n      }\n      orderedActions.push(a);\n    }\n  }\n  if (batchedSwaps) orderedActions.push(batchedSwaps);\n\n  return orderedActions;\n}\n\n/**\n * Organise Actions into order with least amount of calls.\n * @param actions\n * @param assets\n * @returns\n */\nexport function orderActions(actions: Actions[]): Actions[] {\n  const categorizedActions = categorizeActions(actions);\n  const orderedActions = batchSwapActions(categorizedActions);\n  return orderedActions;\n}\n","import { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport {\n  SubgraphPoolBase,\n  SwapInfo,\n  SwapTypes,\n  SwapV2,\n} from '@balancer-labs/sor';\nimport {\n  Relayer,\n  EncodeJoinPoolInput,\n  EncodeBatchSwapInput,\n  ExitPoolData,\n} from '@/modules/relayer/relayer.module';\nimport { getPoolAddress } from '@/pool-utils';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { orderActions, ActionType, Actions } from './actions';\n\nimport balancerRelayerAbi from '@/lib/abi/BalancerRelayer.json';\nimport { Join } from './actions/join';\nimport { Exit } from './actions/exit';\nimport { Swap } from './actions/swap';\nimport { Logger } from '@/lib/utils/logger';\n\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\n// Quickly switch useful debug logs on/off\nconst DEBUG = false;\n\nfunction debugLog(log: string) {\n  const logger = Logger.getInstance();\n  if (DEBUG) logger.info(log);\n}\n\nexport function canUseJoinExit(\n  swapType: SwapTypes,\n  tokenIn: string,\n  tokenOut: string\n): boolean {\n  if (\n    swapType === SwapTypes.SwapExactOut ||\n    tokenIn.toLowerCase() === AddressZero.toLowerCase() ||\n    tokenOut.toLowerCase() === AddressZero.toLowerCase()\n  )\n    return false;\n  else return true;\n}\n\n/**\n * Currently SOR only supports join/exit paths through Weighted pools.\n * Weighted pools should not have preminted BPT so can assume if a swap token is pool address it is a join or exit.\n * @param pools\n * @param swap\n * @param assets\n * @returns\n */\nexport function hasJoinExit(\n  pools: SubgraphPoolBase[],\n  swap: SwapV2,\n  assets: string[]\n): boolean {\n  const pool = pools.find((p) => p.id === swap.poolId);\n  if (pool?.poolType !== 'Weighted') return false;\n  const tokenIn = assets[swap.assetInIndex];\n  const tokenOut = assets[swap.assetOutIndex];\n  return [tokenIn, tokenOut].includes(pool.address);\n}\n\n/**\n * Finds if a swap returned by SOR is a join by checking if tokenOut === poolAddress\n * @param swap\n * @param assets\n * @returns\n */\nexport function isJoin(\n  swap: SwapV2,\n  assets: string[],\n  poolType: string | undefined\n): boolean {\n  if (poolType !== 'Weighted') return false;\n  // token[join]bpt\n  const tokenOut = assets[swap.assetOutIndex];\n  const poolAddress = getPoolAddress(swap.poolId);\n  return tokenOut.toLowerCase() === poolAddress.toLowerCase();\n}\n\n/**\n * Finds if a swap returned by SOR is an exit by checking if tokenIn === poolAddress\n * @param swap\n * @param assets\n * @returns\n */\nexport function isExit(\n  swap: SwapV2,\n  assets: string[],\n  poolType: string | undefined\n): boolean {\n  if (poolType !== 'Weighted') return false;\n  // bpt[exit]token\n  const tokenIn = assets[swap.assetInIndex];\n  const poolAddress = getPoolAddress(swap.poolId);\n  return tokenIn.toLowerCase() === poolAddress.toLowerCase();\n}\n\n/**\n * Find if any of the swaps are join/exits. If yes these swaps should be routed via Relayer.\n * @param pools\n * @param swaps\n * @param assets\n * @returns\n */\nexport function someJoinExit(\n  pools: SubgraphPoolBase[],\n  swaps: SwapV2[],\n  assets: string[]\n): boolean {\n  return swaps.some((swap) => {\n    return hasJoinExit(pools, swap, assets);\n  });\n}\n\n/**\n * Translate each swap into an Action. An Action is a join/exit/swap with the chained output refs.\n * @param swapType\n * @param tokenIn\n * @param tokenOut\n * @param swaps\n * @param assets\n * @param slippage\n * @param pools\n * @param user\n * @param relayer\n * @returns\n */\nexport function getActions(\n  tokenIn: string,\n  tokenOut: string,\n  swaps: SwapV2[],\n  assets: string[],\n  slippage: string,\n  pools: SubgraphPoolBase[],\n  user: string,\n  relayer: string\n): Actions[] {\n  const tokenInIndex = assets.findIndex(\n    (t) => t.toLowerCase() === tokenIn.toLowerCase()\n  );\n  const tokenOutIndex = assets.findIndex(\n    (t) => t.toLowerCase() === tokenOut.toLowerCase()\n  );\n  const actions: Actions[] = [];\n  let opRefKey = 0;\n  for (const swap of swaps) {\n    const poolType = pools.find((p) => p.id === swap.poolId)?.poolType;\n    if (isJoin(swap, assets, poolType)) {\n      const newJoin = new Join(\n        swap,\n        tokenInIndex,\n        tokenOutIndex,\n        opRefKey,\n        assets,\n        slippage,\n        user,\n        relayer\n      );\n      opRefKey = newJoin.nextOpRefKey;\n      actions.push(newJoin);\n      continue;\n    } else if (isExit(swap, assets, poolType)) {\n      const newExit = new Exit(\n        swap,\n        tokenInIndex,\n        tokenOutIndex,\n        opRefKey,\n        assets,\n        slippage,\n        user,\n        relayer\n      );\n      opRefKey = newExit.nextOpRefKey;\n      actions.push(newExit);\n      continue;\n    } else {\n      const newSwap = new Swap(\n        swap,\n        tokenInIndex,\n        tokenOutIndex,\n        opRefKey,\n        assets,\n        slippage,\n        pools,\n        user,\n        relayer\n      );\n      opRefKey = newSwap.nextOpRefKey;\n      actions.push(newSwap);\n      continue;\n    }\n  }\n  return actions;\n}\n\n/**\n * Given swapInfo from the SOR construct the Relayer multicall to execture swaps/joins/exits.\n * @param swapInfo Returned from SOR\n * @param swapType Only supports ExactIn\n * @param pools Pool info from SOR\n * @param user Address of user\n * @param relayerAddress Address of Relayer (>=V4)\n * @param wrappedNativeAsset Address of Native asset\n * @param slippage [bps], eg: 1 === 0.01%, 100 === 1%\n * @param authorisation Encoded authorisation call.\n * @returns\n */\nexport function buildRelayerCalls(\n  swapInfo: SwapInfo,\n  pools: SubgraphPoolBase[],\n  user: string,\n  relayerAddress: string,\n  wrappedNativeAsset: string,\n  slippage: string,\n  authorisation: string | undefined\n): {\n  to: string;\n  data: string;\n  rawCalls: string[];\n  inputs: (EncodeBatchSwapInput | ExitPoolData | EncodeJoinPoolInput)[];\n} {\n  // For each 'swap' create a swap/join/exit action\n  const actions = getActions(\n    swapInfo.tokenIn,\n    swapInfo.tokenOut,\n    swapInfo.swaps,\n    swapInfo.tokenAddresses,\n    slippage,\n    pools,\n    user,\n    relayerAddress\n  );\n  // Arrange action into order that will create minimal amount of calls\n  const orderedActions = orderActions(actions);\n\n  const calls: string[] = [];\n  const inputs: (EncodeBatchSwapInput | ExitPoolData | EncodeJoinPoolInput)[] =\n    [];\n  if (authorisation)\n    // Uses relayer to approve itself to act in behalf of the user\n    calls.push(\n      Relayer.encodeSetRelayerApproval(relayerAddress, true, authorisation)\n    );\n\n  // Create encoded call for each action\n  for (const action of orderedActions) {\n    if (action.type === ActionType.Exit || action.type === ActionType.Join) {\n      const pool = pools.find((p) => p.id === action.poolId);\n      if (pool === undefined)\n        throw new BalancerError(BalancerErrorCode.NO_POOL_DATA);\n      const { params, encoded } = action.callData(pool, wrappedNativeAsset);\n      calls.push(encoded as string);\n      inputs.push(params);\n    }\n    if (action.type === ActionType.BatchSwap) {\n      const { params, encoded } = action.callData();\n      calls.push(...encoded);\n      inputs.push(params);\n    }\n  }\n\n  // Safety check to make sure amounts/limits from calls match expected\n  checkAmounts(\n    orderedActions.map((a) => BigNumber.from(a.getAmountIn())),\n    orderedActions.map((a) => BigNumber.from(a.getAmountOut())),\n    swapInfo,\n    slippage\n  );\n  // encode relayer multicall\n  const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n    calls,\n  ]);\n\n  return {\n    to: relayerAddress,\n    data: callData,\n    rawCalls: calls,\n    inputs,\n  };\n}\n\nfunction checkAmounts(\n  amountsIn: BigNumber[],\n  amountsOut: BigNumber[],\n  swapInfo: SwapInfo,\n  slippage: string\n): void {\n  const totalIn = amountsIn.reduce(\n    (total = BigNumber.from(0), amount) => (total = total.add(amount))\n  );\n  const totalOut = amountsOut.reduce(\n    (total = BigNumber.from(0), amount) => (total = total.add(amount))\n  );\n  // totalIn should equal the original input swap amount\n  // totalOut should equal the return amount from SOR minus any slippage allowance\n  debugLog(`${totalIn.toString()} totalIn`);\n  debugLog(`${swapInfo.swapAmount.toString()} swapInfo.swapAmount`);\n  debugLog(`${totalOut.toString()} totalOut`);\n  debugLog(\n    `${subSlippage(\n      swapInfo.returnAmount,\n      BigNumber.from(slippage)\n    ).toString()} slippage`\n  );\n  debugLog(`${swapInfo.returnAmount.toString()} swapInfo.returnAmount`);\n  const diffOut = totalOut.sub(\n    subSlippage(swapInfo.returnAmount, BigNumber.from(slippage))\n  );\n  if (!totalIn.eq(swapInfo.swapAmount) || !diffOut.lt(`3`))\n    throw new BalancerError(BalancerErrorCode.RELAY_SWAP_AMOUNTS);\n  /* ExactOut case\n    // totalIn should equal the return amount from SOR (this is the amount in) plus any slippage allowance\n    // totalOut should equal the original input swap amount (the exact amount out)\n    if (\n      !totalIn.eq(\n        addSlippage(swapInfo.returnAmount, BigNumber.from(slippage))\n      ) ||\n      !totalOut.eq(swapInfo.swapAmount)\n    )\n      throw new BalancerError(BalancerErrorCode.RELAY_SWAP_AMOUNTS);\n    */\n}\n","import { ClaimService, IClaimService } from '@/modules/claims/ClaimService';\nimport { BalancerSdkConfig, BalancerNetworkConfig } from '@/types';\nimport { Swaps } from './swaps/swaps.module';\nimport { Relayer } from './relayer/relayer.module';\nimport { Subgraph } from './subgraph/subgraph.module';\nimport { Sor } from './sor/sor.module';\nimport { getNetworkConfig } from './sdk.helpers';\nimport { Pricing } from './pricing/pricing.module';\nimport { ContractInstances, Contracts } from './contracts/contracts.module';\nimport { Pools } from './pools';\nimport { Data } from './data';\nimport { VaultModel } from './vaultModel/vaultModel.module';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { Migrations } from './liquidity-managment/migrations';\nimport { Logger } from '@/lib/utils/logger';\n\nexport interface BalancerSDKRoot {\n  config: BalancerSdkConfig;\n  sor: Sor;\n  subgraph: Subgraph;\n  pools: Pools;\n  data: Data;\n  swaps: Swaps;\n  relayer: Relayer;\n  networkConfig: BalancerNetworkConfig;\n  provider: JsonRpcProvider;\n  claimService?: IClaimService;\n}\n\nexport class BalancerSDK implements BalancerSDKRoot {\n  readonly swaps: Swaps;\n  readonly relayer: Relayer;\n  readonly pricing: Pricing;\n  readonly pools: Pools;\n  readonly data: Data;\n  balancerContracts: Contracts;\n  vaultModel: VaultModel;\n  readonly networkConfig: BalancerNetworkConfig;\n  readonly provider: JsonRpcProvider;\n  readonly claimService?: IClaimService;\n  readonly migrationService?: Migrations;\n\n  constructor(\n    public config: BalancerSdkConfig,\n    public sor = new Sor(config),\n    public subgraph = new Subgraph(config)\n  ) {\n    const logger = Logger.getInstance();\n    logger.setLoggingEnabled(!!config.enableLogging);\n    this.networkConfig = getNetworkConfig(config);\n    this.provider = sor.provider as JsonRpcProvider;\n\n    this.balancerContracts = new Contracts(\n      this.networkConfig.addresses.contracts,\n      sor.provider\n    );\n\n    this.data = new Data(\n      this.networkConfig,\n      sor.provider,\n      this.balancerContracts,\n      config.subgraphQuery,\n      config.coingecko\n    );\n\n    this.swaps = new Swaps(this.config);\n    this.relayer = new Relayer();\n    this.pricing = new Pricing(config, this.swaps);\n\n    this.pools = new Pools(\n      this.networkConfig,\n      this.data,\n      this.balancerContracts\n    );\n\n    if (this.data.liquidityGauges) {\n      this.claimService = new ClaimService(\n        this.data.liquidityGauges,\n        this.data.feeDistributor,\n        this.networkConfig.chainId,\n        this.contracts.multicall,\n        this.networkConfig.addresses.contracts.gaugeClaimHelper,\n        this.networkConfig.addresses.contracts.balancerMinter\n      );\n      this.migrationService = new Migrations({\n        relayerAddress: this.networkConfig.addresses.contracts.balancerRelayer,\n        poolsRepository: this.data.pools,\n        gaugesRepository: this.data.liquidityGauges.subgraph,\n        provider: this.provider,\n      });\n    }\n    this.vaultModel = new VaultModel(\n      this.data.poolsForSimulations,\n      this.networkConfig.addresses.tokens.wrappedNativeAsset\n    );\n  }\n\n  /**\n   * Expose balancer contracts, e.g. Vault, LidoRelayer.\n   */\n  get contracts(): ContractInstances {\n    return this.balancerContracts.contracts;\n  }\n}\n","import { Findable } from '../types';\nimport { Pool } from '@/types';\nimport {\n  PoolAttribute,\n  PoolRepository,\n  PoolsFallbackRepositoryOptions,\n  PoolsRepositoryFetchOptions,\n} from './types';\nimport { Logger } from '@/lib/utils/logger';\n\n/**\n * The fallback provider takes multiple PoolRepository's in an array and uses them in order\n * falling back to the next one if a request times out.\n *\n * This is useful for using the Balancer API while being able to fall back to the graph if it is down\n * to ensure Balancer is maximally decentralized.\n **/\nexport class PoolsFallbackRepository implements Findable<Pool, PoolAttribute> {\n  currentProviderIdx: number;\n  timeout: number;\n\n  constructor(\n    private readonly providers: PoolRepository[],\n    options: PoolsFallbackRepositoryOptions = {}\n  ) {\n    this.currentProviderIdx = 0;\n    this.timeout = options.timeout || 10000;\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    return this.fallbackQuery('fetch', [options]);\n  }\n\n  get currentProvider(): PoolRepository | undefined {\n    if (\n      !this.providers.length ||\n      this.currentProviderIdx >= this.providers.length\n    ) {\n      return;\n    }\n\n    return this.providers[this.currentProviderIdx];\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    return this.fallbackQuery('find', [id]);\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    return this.fallbackQuery('findBy', [attribute, value]);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async fallbackQuery(func: string, args: unknown[]): Promise<any> {\n    if (this.currentProviderIdx >= this.providers.length) {\n      throw new Error('No working providers found');\n    }\n\n    let result;\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const currentProvider = this.providers[this.currentProviderIdx] as any;\n      result = await Promise.race<unknown | undefined>([\n        // eslint-disable-next-line prefer-spread\n        currentProvider[func].apply(currentProvider, args),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('timeout')), this.timeout)\n        ),\n      ]);\n    } catch (e: unknown) {\n      const message = (e as Error).message;\n      if (message === 'timeout') {\n        const logger = Logger.getInstance();\n        logger.warn(\n          'Provider ' +\n            this.currentProviderIdx +\n            ' timed out, falling back to next provider'\n        );\n      } else {\n        const logger = Logger.getInstance();\n        logger.warn(\n          `Provider ${this.currentProviderIdx} failed with error, falling back to next provider.`\n        );\n        logger.warn(message);\n      }\n      this.currentProviderIdx++;\n      result = await this.fallbackQuery.call(this, func, args);\n    }\n\n    return result;\n  }\n}\n","import { Findable, Pool, Searchable } from '@/types';\nimport { PoolAttribute } from './types';\n\nexport class PoolsStaticRepository\n  implements Findable<Pool, PoolAttribute>, Searchable<Pool>\n{\n  constructor(private pools: Pool[]) {}\n\n  async find(id: string): Promise<Pool | undefined> {\n    return this.pools.find((pool) => {\n      return pool.id.toLowerCase() === id.toLowerCase();\n    });\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    return this.pools.find((pool) => {\n      return pool[attribute] === value;\n    });\n  }\n\n  async all(): Promise<Pool[]> {\n    return this.pools;\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<Pool[]> {\n    return (await this.all()).filter(filter);\n  }\n}\n","import { Findable, Price, TokenPrices } from '@/types';\n\nexport class StaticTokenPriceProvider implements Findable<Price> {\n  tokenPrices: TokenPrices;\n  constructor(tokenPrices: TokenPrices) {\n    this.tokenPrices = Object.fromEntries(\n      Object.entries(tokenPrices).map(([address, price]) => {\n        return [address.toLowerCase(), price];\n      })\n    );\n  }\n\n  async find(address: string): Promise<Price | undefined> {\n    const lowercaseAddress = address.toLowerCase();\n    const price = this.tokenPrices[lowercaseAddress];\n    if (!price) return;\n    return price;\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce(\n    (total: BigNumber, weight) => total.add(weight),\n    Zero\n  );\n  return totalWeight.eq(ONE);\n};\n"],"names":["BasePoolExitKind","StablePoolJoinKind","StablePhantomPoolJoinKind","StablePoolExitKind","WeightedPoolJoinKind","WeightedPoolExitKind","BasePoolEncoder","recoveryModeExit","bptAmountIn","defaultAbiCoder","encode","RECOVERY_MODE","exports","StablePoolEncoder","constructor","joinInit","amountsIn","INIT","joinCollectProtocolFees","COLLECT_PROTOCOL_FEES","joinExactTokensInForBPTOut","minimumBPT","EXACT_TOKENS_IN_FOR_BPT_OUT","joinTokenInForExactBPTOut","bptAmountOut","enterTokenIndex","TOKEN_IN_FOR_EXACT_BPT_OUT","exitExactBPTInForOneTokenOut","exitTokenIndex","EXACT_BPT_IN_FOR_ONE_TOKEN_OUT","exitExactBPTInForTokensOut","EXACT_BPT_IN_FOR_TOKENS_OUT","exitBPTInForExactTokensOut","amountsOut","maxBPTAmountIn","BPT_IN_FOR_EXACT_TOKENS_OUT","WeightedPoolEncoder","joinAllTokensInForExactBPTOut","ALL_TOKENS_IN_FOR_EXACT_BPT_OUT","ManagedPoolEncoder","exitForManagementFees","MANAGEMENT_FEE_TOKENS_OUT","ComposableStablePoolJoinKind","ComposableStablePoolExitKind","ComposableStablePoolEncoder","exitExactBPTInForAllTokensOut","EXACT_BPT_IN_FOR_ALL_TOKENS_OUT","isProduction","process","env","NODE_ENV","prefix","invariant","condition","message","Error","provided","getPoolAddress","poolId","length","slice","getPoolSpecialization","specializationCode","parseInt","getPoolNonce","BigNumber","from","Network","POOLS_GENERIC","IdsMap","Pagination","PerPage","PerPool","PerPoolInitial","DelegateOwner","ZeroAddress","DynamicFees","Gauntlet","BlockList","ExcludedPoolTypes","Stable","AllowList","Investment","Factories","Stakable","Metadata","name","hasIcon","POOLS_MAP","GOERLI","staBAL","bbAaveUSD","v1","v2","veBAL","MAINNET","POLYGON","xMatic","stMatic","mai4","maiBbaUsd","ARBITRUM","GNOSIS","PoolGaugesAttributes","PoolShareAttributes","GaugeShareAttributes","PoolSpecialization","UserBalanceOpKind","PoolBalanceOpKind","PoolType","Logger","this","enableLogging","getInstance","instance","setLoggingEnabled","enabled","info","warn","console","error","time","timeEnd","transposeMatrix","matrix","map","_","columnIndex","row","AssetHelpers","wethAddress","ETH","AddressZero","isETH","token","isEqual","isWETH","WETH","translateToERC20","getAddress","sortTokens","tokens","others","forEach","array","erc20Tokens","sortedTranspose","sort","tokenA","tokenB","toLowerCase","cmpTokens","sortedErc20s","sortedOthers","includes","addressA","addressB","balancerErrorCodes","BalancerErrors","async","accountToAddress","account","Signer","isSigner","address","RelayerAction","isErrorCode","errorCode","replace","Object","keys","parseErrorCode","actualError","tryParseErrorCode","isBalancerError","values","encodeError","encodedError","entries","find","RelayerAuthorization","encodeCalldataAuthorization","calldata","deadline","signature","encodedDeadline","hexZeroPad","hexValue","v","r","s","splitSignature","signJoinAuthorization","validator","user","allowedSender","allowedCalldata","nonce","signAuthorizationFor","JoinPool","signExitAuthorization","ExitPool","signSwapAuthorization","Swap","signBatchSwapAuthorization","BatchSwap","signSetRelayerApprovalAuthorization","SetRelayerApproval","type","MAX_DEADLINE","MaxUint256","chainId","provider","getNetwork","userAddress","getNextNonce","domain","version","verifyingContract","types","value","sender","toString","_signTypedData","BalancerMinterAuthorization","signSetMinterApproval","minterContract","minter","approval","SetMinterApproval","BZERO","BigInt","BONE","ONE","_require","b","_computeScalingFactor","tokenDecimals","decimalsDifference","_upscale","amount","scalingFactor","SolidityMaths","mulDownFixed","_upscaleArray","amounts","scalingFactors","upscaledAmounts","Array","i","_downscaleDown","divDownFixed","_downscaleDownArray","downscaledAmounts","add","a","c","sub","max","args","reduce","previous","current","min","mul","div","roundUp","divUp","divDown","mulUpFixed","product","divUpFixed","aInflated","powUpFixed","x","y","raw","LogExpMath","pow","maxError","MAX_POW_RELATIVE_ERROR","complementFixed","ONE_18","x_int256","MILD_EXPONENT_BOUND","y_int256","logx_times_y","LN_36_LOWER_BOUND","LN_36_UPPER_BOUND","ln_36_x","_ln_36","_ln","MIN_NATURAL_EXPONENT","MAX_NATURAL_EXPONENT","exp","firstAN","x0","a0","x1","a1","ONE_20","x2","a2","x3","a3","x4","a4","x5","a5","x6","a6","x7","a7","x8","a8","x9","a9","term","seriesSum","z","ONE_36","z_squared","num","sum","a10","x10","a11","x11","AMP_PRECISION","parsePoolInfo","pool","wrappedNativeAsset","unwrapNativeAsset","poolTokens","decimals","_a","balancesEvm","parseFixed","balance","toBigInt","weights","weight","priceRates","priceRate","scalingFactorsRaw","d","sf","upScaledBalances","assetHelpers","ampWithPrecision","amp","higherBalanceTokenIndex","indexOf","scalingFactorsWithoutBpt","scalingFactorsRawWithoutBpt","poolTokensWithoutBpt","balancesEvmWithoutBpt","priceRatesWithoutBpt","upScaledBalancesWithoutBpt","bptIndex","splice","swapFeeEvm","swapFee","totalSharesEvm","totalShares","TOKENS_GENERIC","Popular","Symbols","Addresses","nativeAsset","wNativeAsset","BAL","TOKENS_MAP","bbaUSD","PriceChainMap","bbaUSDv2","TOKENS","networkId","_permanentCensorErrors","_censorErrors","LogLevels","debug","default","warning","off","_logLevel","_globalLogger","_normalizeError","missing","form","normalize","push","join","String","fromCharCode","_checkNormalize","LogLevel","ErrorCode","HEX","defineProperty","enumerable","writable","_log","logLevel","level","throwArgumentError","log","apply","levels","DEBUG","INFO","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","key","Uint8Array","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","assert","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","Logger$1","logger","names","formatUnits","unitName","index","formatFixed","yieldTokens","waUSDT","waUSDC","waDAI","wamDAI","wamUSDC","wamUSDT","wrappedTokensMap","aToken","underlying","wrappedATokenInterface","Interface","AaveRates","multicall","network","fetch","addresses","payload","wrappedATokenAddress","callData","encodeFunctionData","res","callStatic","aggregate","p","parseFloat","getRate","wrappedAToken","tokenAddressForPricing","addressMapIn","unwrapToken","addressMap","wrappedAddress","lowercase","toLocaleLowerCase","aaveChain","undefined","aaveWrappedMap","getEthValue","filter","Debouncer","fn","wait","limit","requestSets","promisedCalls","promisedCount","debounceCancel","attr","_b","Set","size","execute","promise","timeout","resolve","reject","Promise","rej","makePromise","clearTimeout","call","requestAttrs","then","results","catch","response","data","setTimeout","bind","valueWithTrimmedDecimals","RegExp","result","match","parsedValue","_parseFixed","_formatFixed","bpsPerOne","mulSlippage","slippage","subSlippage","delta","addSlippage","isSameAddress","address1","address2","insert","arr","newItem","removeItem","newArray","reorderArrays","reference","original","some","indexesOfOriginal","othersResorted","indexOfOriginal","arrIndex","isLinearish","poolType","supportedPoolTypes","findEventInReceiptLogs","receipt","to","contractInterface","logName","event","logs","parseLog","parsedLog","getRandomBytes32","fill","Math","random","BalancerAPIArgsFormatter","format","SubgraphArgsFormatter","operatorMap","gt","lt","eq","in","not_in","contains","whereQuery","where","operator","GraphQLArgsBuilder","merge","other","mergedArgs","mergeWith","objValue","srcValue","isArray","concat","formatter","_abi","inputs","components","internalType","stateMutability","anonymous","indexed","outputs","AaveLinearPool__factory","createInterface","utils","connect","signerOrProvider","Contract","abi","AaveLinearPoolFactory__factory","AaveWrapping__factory","Authoriser__factory","BalancerHelpers__factory","BalancerMinter__factory","BalancerPoolDataQueries__factory","BalancerRelayer__factory","BatchRelayerLibrary__factory","ComposableStablePool__factory","ComposableStablePoolFactory__factory","ConvergentCurvePool__factory","constant","payable","ERC20__factory","ERC4626LinearPool__factory","ERC4626LinearPoolFactory__factory","EulerLinearPool__factory","EulerLinearPoolFactory__factory","FXPool__factory","GaugeClaimHelper__factory","GearboxLinearPool__factory","GearboxLinearPoolFactory__factory","GyroConfig__factory","LidoRelayer__factory","LinearPool__factory","LiquidityGaugeV5__factory","Multicall__factory","Multicall3__factory","StablePool__factory","StaticATokenRateProvider__factory","Vault__factory","WeightedPool__factory","WeightedPoolFactory__factory","YearnLinearPool__factory","YearnLinearPoolFactory__factory","GyroEV2__factory","VeBal__factory","VeDelegationProxy__factory","SwapType","getLimitsForSlippage","tokensIn","tokensOut","swapType","deltas","assets","limits","Zero","tokenIn","slippageAmount","WeiPerEther","SwapExactOut","tokenOut","SwapExactIn","balancerVault","BALANCER_NETWORK_CONFIG","contracts","poolDataQueries","lidoRelayer","veBal","gaugeControllerCheckpointer","veBalProxy","gyroConfigProxy","addressesByNetwork","bal","weth","bbaUsd","bb_a_usd","lbpRaisingTokens","stETH","wstETH","urls","subgraph","gaugesSubgraph","blockNumberSubgraph","thirdParty","coingecko","nativeAssetId","platformId","pools","wETHwstETH","id","poolsToIgnore","sorConnectingTokens","symbol","sorTriPathMidPoolIds","gaugeClaimHelper","erc4626LinearPoolFactory","aaveLinearPoolFactory","OPTIMISM","averageBlockTime","FANTOM","vault","balancerRelayer","balancerHelpers","weightedPoolFactory","composableStablePoolFactory","yearnLinearPoolFactory","SEPOLIA","ZKEVM","balancerMinter","multicallBatchSize","AVALANCHE","BASE","AURORA","balancerMinterAddress","gaugeController","feeDistributor","protocolFeePercentagesProvider","TELOS","networkAddresses","BalancerErrorCode","BalancerError","super","getMessage","ABOVE_MAX_TOKENS","BELOW_MIN_TOKENS","EXIT_DELTA_AMOUNTS","FEE_PROVIDER_NOT_PROVIDED","GAUGES_HELPER_ADDRESS_NOT_PROVIDED","GAUGES_NOT_FOUND","GAUGES_REWARD_MINTER_ADDRESS_NOT_PROVIDED","GAUGES_REWARD_TOKEN_EMPTY","INPUT_LENGTH_MISMATCH","INPUT_OUT_OF_BOUNDS","INPUT_TOKEN_INVALID","INVALID_PROTOCOL_ID","INVALID_SWAP_FEE_PERCENTAGE","INVALID_WEIGHTS","JOIN_DELTA_AMOUNTS","JOIN_WITH_ZERO_AMOUNT","MISSING_AMP","MISSING_DECIMALS","MISSING_PRICE_RATE","MISSING_TOKENS","MISSING_WEIGHT","NO_POOL_DATA","NO_VALUE_PARAMETER","POOL_DOESNT_EXIST","RELAY_SWAP_AMOUNTS","REWARD_TOKEN_ZERO","TIMESTAMP_IN_THE_FUTURE","TOKEN_MISMATCH","UNSUPPORTED_PAIR","UNSUPPORTED_POOL_TYPE","calcPriceImpact","bptAmount","bptZeroPriceImpact","isJoin","pi","calcPriceImpactJoin","calcPriceImpactExit","bptSpotPrice","balances","bptSupply","tokenIndexIn","totalCoins","D","numTokens","prevInvariant","ampTimesTotal","P_D","j","_calculateInvariant","S","D_P","alpha","beta","gamma","partial_x","minus_partial_D","StablePoolPriceImpact","tokenAmounts","StablePoolExit","buildExitExactBPTIn","exiter","bptIn","shouldUnwrapNativeAsset","singleTokenOut","toInternalBalance","checkInputsExactBPTIn","sortedValues","sortValuesExitExactBptIn","minAmountsOut","expectedAmountsOut","singleTokenOutIndex","calcTokenOutGivenExactBptIn","calcTokensOutGivenExactBptIn","userData","encodedData","encodeExitPool","priceImpact","buildExitExactTokensOut","checkInputsExactTokensOut","sortValuesExitExactTokensOut","expectedBPTIn","maxBPTIn","calcBptInGivenExactTokensOut","downScaledAmountsOut","buildRecoveryExit","isNegative","t","tokensList","parsedPoolInfo","upScaledAmountsOut","amountOut","SOR","StableMathBigInt","_calcTokenOutGivenExactBptIn","downscaledAmountOut","amountsOutScaledDown","_calcTokensOutGivenExactBptIn","_calcBptInGivenExactTokensOut","functionName","attributes","recipient","exitPoolRequest","StablePoolJoin","buildJoin","joiner","checkInputs","sortValues","expectedBPTOut","minBPTOut","calcBptOutGivenExactTokensIn","encodeJoinPool","sortedAmountsIn","upScaledAmountsIn","_calcBptOutGivenExactTokensIn","joinPoolRequest","maxAmountsIn","fromInternalBalance","StablePoolLiquidity","calcTotal","sumBalance","sumValue","price","usd","avgPrice","SCALING_FACTOR","StablePoolSpotPrice","calcPoolSpotPrice","stablePool","StablePool","fromPool","poolPairData","parsePoolPairData","_spotPriceAfterSwapExactTokenInForTokenOut","ZERO","exit","liquidity","spotPriceCalculator","priceImpactCalculator","PhantomStablePoolSpotPrice","metaStablePool","PhantomStablePool","ComposableStablePoolJoin","sortValuesBasedOnPoolVersion","buildExactTokensInForBPTOut","sortV1","encodeUserDataExactTokensInForBPTOut","assetsWithBpt","encodedUserData","maxAmountsInWithBpt","sortV4","ComposableStablePoolExit","singleTokenOutIndexWithoutBpt","minAmountsOutWithBpt","downscaledAmountsOutWithoutBpt","downscaledAmountsOutWithBpt","checkInputsRecoveryExit","lte","poolTypeVersion","isInRecoveryMode","parsedValues","downscaledAmountsOutWithBptWithRounding","isZero","upScaledAmountsOutWithoutBpt","ComposableStable","WeightedPoolPriceImpact","WeightedPoolExit","WeightedMaths","WeightedPoolJoin","WeightedPoolLiquidity","sumWeight","toFixed","totalWeight","total","WeightedPoolSpotPrice","isBPTAsToken","bptAsToken","weightedPool","WeightedPool","spotPrice","pop","Weighted","MetaStablePoolLiquidity","MetaStablePoolSpotPrice","MetaStablePool","MetaStable","StablePhantomPoolExit","StablePhantomPoolJoin","StablePhantom","LinearPriceImpact","LinearPoolExit","LinearMaths","LinearPoolJoin","LinearPoolLiquidity","LinearPoolSpotPrice","linearPool","LinearPool","Linear","FXExitConcern","FXLiquidityConcern","FXSpotPriceConcern","FXPriceImpactConcern","FXJoinConcern","FX","GyroExitConcern","GyroLiquidityConcern","GyroSpotPriceConcern","GyroPriceImpactConcern","GyroJoinConcern","Gyro","PoolTypeConcerns","config","weighted","stable","composableStable","metaStable","stablePhantom","linear","Liquidity","tokenPrices","getLiquidity","parsedTokens","subPoolLiquidity","all","findBy","totalBPT","bptInParentPool","liquidityInParentPool","totalSubPoolLiquidity","totalLiquidity","subPool","nonPoolTokens","nonPoolTokensWithUpdatedPrice","tokenPrice","latestUSDPrice","parsedTokenLiquidity","getBptPrice","filterTokens","obj","populateGauges","gauges","claimableRewards","claimableTokens","gauge","rewards","populateGauge","it","reduceRewardTokens","rewardTokens","liquidityGaugeV5Interface","balancerMinterInterface","gaugeClaimHelperInterface","ClaimService","liquidityGauges","gaugeClaimHelperAddress","getClaimableRewardTokens","getGauges","gaugeAddresses","getRewardTokens","retrieveClaimableTokens","retrieveClaimableRewards","buildClaimRewardTokensRequest","flatMap","expectedValues","tokenAddress","every","expectedTokensValue","getClaimableVeBalTokens","getClaimableBalances","buildClaimVeBalTokensRequest","tokenBalance","claimBalances","paths","getPayload","res0x","path","reduceClaimableRewards","gaugeAddress","getArguments","balAddress","reduceClaimableTokens","queryBatchSwap","vaultContract","swaps","funds","err","__assign","assign","n","arguments","prototype","hasOwnProperty","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","string","trim","processFragments","ast","seenKeys","definitions","fragmentDefinition","fragmentName","sourceKey","loc","source","body","substring","start","end","sourceKeySet","get","has","set","parseDocument","cacheKey","parsed","parse","allowLegacyFragmentVariables","doc","workSet","node","startToken","endToken","stripLoc","gql","literals","_i","arg","gql_1","extras","clear","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","AmpUpdate_OrderBy","BalancerSnapshot_OrderBy","Balancer_OrderBy","CircuitBreaker_OrderBy","GradualWeightUpdate_OrderBy","InvestType","JoinExit_OrderBy","LatestPrice_OrderBy","ManagementOperation_OrderBy","OperationType","OrderDirection","PoolContract_OrderBy","PoolHistoricalLiquidity_OrderBy","PoolShare_OrderBy","PoolSnapshot_OrderBy","PoolToken_OrderBy","Pool_OrderBy","PriceRateProvider_OrderBy","ProtocolIdData_OrderBy","SwapFeeUpdate_OrderBy","Swap_OrderBy","TokenPrice_OrderBy","TokenSnapshot_OrderBy","Token_OrderBy","TradePairSnapshot_OrderBy","TradePair_OrderBy","UserInternalBalance_OrderBy","User_OrderBy","_SubgraphErrorPolicy_","gql$1","SubgraphPoolShareFragmentDoc","SubgraphPoolFragmentDoc","SubgraphPoolSnapshotFragmentDoc","SubgraphJoinExitFragmentDoc","SubgraphBalancerFragmentDoc","SubgraphTokenPriceFragmentDoc","SubgraphTokenLatestPriceFragmentDoc","SubgraphUserFragmentDoc","PoolShareDocument","PoolSharesDocument","PoolsDocument","AllPoolsDocument","PoolDocument","PoolHistoricalLiquiditiesDocument","PoolSnapshotsDocument","JoinExitsDocument","BalancersDocument","TokenPricesDocument","TokenLatestPricesDocument","TokenLatestPriceDocument","UserDocument","UsersDocument","defaultWrapper","action","_operationName","_operationType","getSdk","client","withWrapper","PoolShare","variables","requestHeaders","wrappedRequestHeaders","request","PoolShares","Pools","AllPools","Pool","PoolHistoricalLiquidities","PoolSnapshots","JoinExits","Balancers","TokenPrices","TokenLatestPrices","TokenLatestPrice","User","Users","Chain","GaugeFactory_OrderBy","GaugeShare_OrderBy","GaugeType_OrderBy","GaugeVote_OrderBy","Gauge_OrderBy","LiquidityGauge_OrderBy","LockSnapshot_OrderBy","OmniVotingEscrowLock_OrderBy","RewardToken_OrderBy","RootGauge_OrderBy","SingleRecipientGauge_OrderBy","VotingEscrowLock_OrderBy","VotingEscrow_OrderBy","SubgraphGaugeShareFragmentDoc","SubgraphLiquidityGaugeFragmentDoc","SubgraphPoolWithPreferentialGaugeFragmentDoc","GaugeShareDocument","GaugeSharesDocument","LiquidityGaugesDocument","PoolGaugesDocument","createSubgraphClient","subgraphUrl","GraphQLClient","createGaugesClient","GaugeShare","GaugeShares","LiquidityGauges","PoolGauges","Gauges.getSdk","Multicaller3","options","calls","interface","batchSize","executeMulticall","numBatches","ceil","batchPromises","batchIndex","batchRequests","allowFailure","aggregate3","offset","callIndex","success","returnData","decodeFunctionResult","e","weightedCalls","multicaller","linearCalls","stableCalls","gyroECalls","fetchOnChainPoolData","vaultAddress","getTotalSupplyFn","getSwapFeeFn","defaultCalls","do_nothing","poolTypeCalls","getOnChainBalances","subgraphPoolsOriginal","_multiAddress","poolsWithOnchainData","onchainData","idx","wrappedToken","wrappedIndex","wrappedTokenRate","lowerTarget","targets","upperTarget","tokenRates","rate","SubgraphPoolDataService","sorConfig","query","defaultArgs","orderBy","TotalLiquidity","orderDirection","Desc","swapEnabled","getPools","queryArgs","mapped","expiryTime","unitSeconds","principalToken","baseToken","mapPools","getSubgraphPools","findIndex","fetchOnChainBalances","onChainBalances","formattedQuery","first","pool0","pool1000","pool2000","SubgraphTokenPriceService","getNativeAssetPriceInToken","ethPerToken","getLatestPriceInEthFromSubgraph","latestPrices","asset_in","pricesKeyedOnId","keyBy","matchingLatestPrices","asset","pricingAssetPricedInEth","pricingAsset","getNetworkConfig","networkConfig","customSubgraphUrl","tenderly","POOLS_TO_IGNORE","ApiTokenPriceService","balancerApiUrl","tokenPriceQuery","chainKey","tokenGetCurrentPrices","tokenPriceUsd","nativeAssetPriceUsd","NativeAssetAddress","tokenPriceInNativeAsset","getCoingeckoApiBaseUrl","isDemoApi","getCoingeckoApiKeyHeaderName","CoingeckoTokenPriceService","urlBase","isDemoApiKey","coingeckoApiKeyHeaderName","apiKey","coingeckoApiKey","getTokenPriceInNativeAsset","endpoint","axios","headers","Accept","Sor","sdkConfig","getSorConfig","sorNetworkConfig","getSorNetworkConfig","JsonRpcProvider","rpcUrl","subgraphClient","getPoolDataService","getTokenPriceService","tokenPriceService","poolDataService","sor","connectingTokens","triPathMidPoolIds","allPoolsToIgnore","coingeckoConfig","checkSimpleFlashSwapParams","poolIds","createSwaps","assetInIndex","assetOutIndex","deltaToExpectedProfit","Number","calcProfit","profits","underlyingToWrappedMap","tokenForSwaps","wrapped","Relayers","relayerResolver","assetIn","assetOut","lido","swapFragment","relayer","f","amountForLimit","maxSlippage","decorateSorSwapInfo","swapInfo","amountIn","swapAmount","returnAmount","amountInForLimits","swapAmountForSwaps","returnAmountFromSwaps","amountOutForLimits","tokenInForSwaps","tokenOutFromSwaps","SingleSwapBuilder","setFunds","setDeadline","setLimits","singleSwap","attrs","fragment","outputReference","BatchSwapBuilder","minAmountOut","maxAmountIn","tokenAddresses","split","outputReferences","buildRouteDefaultOptions","maxPools","gasPrice","Swaps","sorOrConfig","l","findRouteGivenIn","getSwaps","SwapTypes","findRouteGivenOut","buildSwap","builder","buildRouteExactIn","opts","encodeBatchSwap","batchSwap","encodeSimpleFlashSwap","flashLoanAmount","walletAddress","convertSimpleFlashSwapToBatchSwapParameters","fetchPools","querySimpleFlashSwap","tokenAddress0","tokenAddress1","isProfitable","getSorSwap","swapInput","swapTypeSOR","getSorSwapInfo","queryExactIn","swap","assetDeltas","queryExactOut","fromEntries","PoolKind","relayerLibrary","Relayer","encodeApproveVault","maxAmount","encodeSetRelayerApproval","relayerAdress","approved","authorisation","encodeGaugeWithdraw","encodeGaugeDeposit","encodeSwap","poolKind","encodeWrapAaveDynamicToken","staticToken","fromUnderlying","encodeUnwrapAaveStaticToken","toUnderlying","encodeUnwrapWstETH","encodeUnwrap","linearPoolType","unwrapType","encodePeekChainedReferenceValue","toChainedReference","isTemporary","CHAINED_REFERENCE_TEMP_PREFIX","CHAINED_REFERENCE_READONLY_PREFIX","paddedPrefix","repeat","fromChainedReference","ref","isChainedReference","amountBn","mask","check","_hex","formatExitPoolInput","formatJoinPoolInput","signRelayerApproval","relayerAddress","signerAddress","signer","Subgraph","initClient","Pricing","getSpotPrice","poolsDict","parseToPoolsDict","routeProposer","getCandidatePathsFromDict","getSpotPriceAfterSwapForPath","Multicaller","isLessThan24Hours","incomingDateInSec","round","Date","now","VeBal","veBalAddress","getLockInfo","formatLockInfo","lockInfo","lockedAmount","lockedEndDate","locked","hasExistingLock","lockedEndDateNormalised","toNumber","isExpired","totalSupply","epoch","VeBalProxy","getAdjustedBalance","adjustedBalanceOf","Contracts","networkOrAddresses","getLiquidityGauge","contractAddresses","eulerLinearPoolFactory","gearboxLinearPoolFactory","gyroConfig","instances","BasePool","getBasePool","ERC20","getErc20","liquidityGauge","ImpermanentLossService","tokenHistoricalPrices","calcImpLoss","timestamp","prepareData","poolValueDelta","getPoolValueDelta","holdValueDelta","getHoldValueDelta","calculateImpermanentLoss","floor","abs","priceDelta","entryTimestamp","getWeights","entryPrices","getEntryPrices","exitPrices","getExitPrices","getAssets","getDelta","entryPrice","exitPrice","ILLEGAL_PARAMETER","noWeights","uniformWeight","w","prices","tokensWithPrice","INITIAL_RATE","START_EPOCH_TIME","RATE_REDUCTION_TIME","RATE_REDUCTION_COEFFICIENT","weekly","currentTimestamp","getTime","miningEpoch","totalEmissions","startingEpoch","endingEpoch","currentEpoch","secondsInStartingEpoch","secondsInEndingEpoch","ProtocolRevenue","repository","multicallData","balPrice","lastWeekBalRevenue","balAmount","lastWeekBBAUsdRevenue","bbAUsdAmount","bbAUsdPrice","veBalSupply","PoolFees","yesterdaysPools","last24h","yesterdaysPool","totalSwapFee","createTime","PoolApr","tokenMeta","tokenYields","feeCollector","gyroConfigRepository","swapFees","last24hFees","feesDailyBsp","protocolSwapFeePercentage","tokenAprs","breakdown","bptFreeTokens","aprs","apr","tokenYield","isExemptFromYieldProtocolFee","protocolYieldFeeCache","subSwapFees","subApr","getWeight","poolToken","bptPrice","_c","_d","_e","weightedAprs","pickBy","zipObject","identity","stakingApr","boost","workingSupply","balInflationRate","bptPriceUsd","gaugeSupplyUsd","reward","balReward","rewardTokenApr","totalSupplyUsd","rewardValue","balPriceUsd","gaugeBalEmissionsUsd","emissions.weekly","relativeWeight","rewardAprs","tAddress","rewardTokensBreakdown","rewardValueScaled","protocolApr","revenue","dailyRevenue","minStakingApr","maxStakingApr","liquidityService","fee","getGyroProtocolFee","protocolSwapFeeCache","rewardData","period_finish","yearlyReward","meta","joinActions","Element","LiquidityBootstrapping","exitActions","PoolGraph","getGraphNodes","tokensToUnwrap","rootNode","buildGraphFromRootPool","orderByBfs","reverse","rootPool","buildGraphFromPool","getTokenTotal","nodeIndex","parent","proportionOfParent","parentPool","tokenIndex","leafTokenDecimals","createInputTokenNode","joinAction","exitAction","tokenTotal","spotPrices","sp","poolNode","isProportionalExit","children","marked","isLeaf","updateNodeIfProportionalExit","createLinearNodeChildren","proportion","tokenWeight","finalProportion","childNode","linearPoolNode","mainIndex","wrappedNodeInfo","createWrappedTokenNode","mainTokenDecimals","nodeInfo","wrappedTokenNode","unwrappedBalance","inputNode","root","nodes","orderedNodes","currentNode","shift","getLeafAddresses","isProportionalPools","WeightedPoolDecoder","decode","JoinModel","relayerModel","joinKind","decodeJoinData","allTokensInForExactBPTOut","amountsInWithRef","doChainedRefReplacements","SubgraphType","bptAsPoolToken","bptBalanceEVM","updateTokenBalanceForPool","tokensWithoutBpt","balanceEvm","bptAmountOutWithRef","tokenInIndex","doChainedRefReplacement","pairData","bptAmountOutHuman","amountInHuman","_tokenInForExactTokenOut","bnum","dp","decimalsIn","amountInEvm","balanceIn","balanceOut","doJoinPool","bptOut","setChainedReferenceValue","ExitModel","exitKind","decodeExitData","exactBptInForTokensOut","bptInWithRef","exactBptInForOneTokenOut","amountOutHuman","_exactTokenInForTokenOut","decimalsOut","amountOutEvm","poolBalances","pt","getBalancesForTokens","doExitPool","tokenOutIndex","SwapModel","doSingleSwap","swapRequest","doSwap","doBatchSwap","batchSwapRequest","previousAmount","getChainedReferenceValue","isExactIn","UnwrapModel","doUnwrap","unwrapRequest","underlyingToken","PoolModel","joinModel","exitModel","swapModel","unwrapModel","doJoin","doExit","RelayerModel","chainedRefs","PoolsSource","poolsArray","dataSource","refresh","list","cloneDeep","BptAsToken","parseNewPool","subgraphPool","ComposableStablePool","poolsDictionary","ActionType","VaultModel","poolsSource","updateDeltas","rawCalls","poolModel","actionType","Join","Exit","Unwrap","mapSwapRequest","mapBatchSwapRequest","mapJoinPoolRequest","mapExitPoolRequest","mapUnwrapRequest","balancerRelayerInterface","debugLog","poolGraph","simulationService","createCalls","joinPaths","isNativeAssetJoin","multiRequests","encodedCalls","outputIndexes","createActionCalls","unshift","createSetRelayerApproval","encodedCall","amountsOutByJoinPath","simulationType","simulateGeneralisedJoin","totalAmountOut","minAmountsOutByJoinPath","totalMinAmountOut","isSimulation","joinPath","isLeafJoin","modelRequests","shouldBeConsidered","isLastChainedCall","hasSiblingInput","minOut","modelRequest","createSwap","minBptOut","createJoinPool","outputRef","encodedPeekCall","joinPathIndex","expectedOut","getOutputRefValue","replaceWrappedNativeAsset","allImmediateChildrenSendToInternal","allSiblingsSendToInternal","userTokenIn","userBptOut","inputTokens","inputAmts","child","sortedTokens","sortedAmounts","userDataAmounts","userAmountsTokenIn","userAmountOut","hasChildInput","isRef","sendsToInternalBalance","siblings","wrappedNativeAssetIndex","joinPool","nativeAssetIndex","tokensInWithoutNativeAsset","getJoinPaths","totalBptZeroPi","totalBptZeroPriceImpact","queryData","assertDeltas","poolAddress","Join$1","inputNodes","nonLeafInputNodes","nonLeafInputNode","nonLeafAmountIn","totalProportions","proportionalNonLeafAmountIn","inputTokenNode","nonLeafJoinPath","currentChild","parentCopy","updateInputAmounts","ajdustAmountInDiff","tokenInInputNodes","amountsInSumforTokenIn","diff","leafJoinPath","updateTotalProportions","updateNodeAmount","nonLeafJoinPaths","leafNode","bptOutZeroPiForInputNode","spProduct","parentNode","childAddress","spPriceScaled","inputAmountScaled","totalProportion","inputAmount","TenderlyHelper","tenderlyConfig","simulateMulticall","encodedStateOverrides","encodeBalanceAndAllowanceOverrides","encodeRelayerApprovalOverride","simulateTransaction","stateOverrides","storage","state_objects","toHexString","network_id","block_number","blockNumber","input","save_if_fails","simulation_type","SIMULATE_URL","tenderlyUrl","post","transaction","transaction_info","call_trace","output","requestStateOverrides","tokensWithoutNativeAsset","MaxInt256","k","ENCODE_STATES_URL","networkID","project","accessKey","SimulationType","Simulation","Tenderly","tenderlyHelper","simulationResult","decodeResult","requestResult","simulateRequests","Static","staticResult","decodedResponse","Buffer","simulateGeneralisedExit","multicallResult","outputIndex","vaultModel","requests","tokenOutDeltas","amountsOutByExitPath","amountsOutByTokenOut","tokensOutByExitPath","expectedAmountsOutByExitPath","expectedAmountsOutMap","expectedAmountsOutByTokenOut","minAmountsOutByExitPath","expectedAmountOut","minAmountsOutByTokenOut","getExitPaths","outputNodes","exitPaths","outputNode","exitPath","amountsInSum","accumulator","currentExitPath","amountInForCurrentExitPath","amountsInDiff","createUnwrap","exitChild","exitPathIndex","getOutputRef","receivesFromInternal","getExitInfo","amountBptIn","getExit","estimatedAmountsOut","buildExitCall","isProportional","tokensWithInsufficientBalance","calculatePriceImpact","orderedNodesForJoin","isPeek","getRecipientAddress","getSenderAddress","isLastActionWithLimits","minAmountsOutProportional","outputChildIndex","createExitPoolProportional","createExitPool","isRootNode","createBatchSwap","exitChildren","batchSwapSteps","swapStep","acc","dust","userDataTokens","userAmountTokensOut","userBptIn","allChildrenReceiveFromInternal","deltaBptIn","deltaTokensOut","deltaAmountsOut","PoolVolume","totalSwapVolume","ComposableStableFactory","checkCreateInputs","tokenRateCacheDurations","exemptFromYieldProtocolFeeFlags","rateProviders","parseCreateParamsForEncoding","amplificationParameter","owner","salt","sortedRateProviders","sortedTokenRateCacheDurations","sortedExemptFromYieldProtocols","encodeCreateFunctionData","checkInitJoinInputs","parseParamsForInitJoin","tokensWithBpt","amountsWithBpt","maxAmountsWithBpt","asUintN","sortedMaxAmounts","encodeInitJoinFunctionData","getPoolAddressAndIdWithReceipt","composableStablePoolInterface","getPoolInterface","getPoolId","create","encodedFunctionData","buildInitJoin","WeightedFactory","normalizedWeights","sortedNormalizedWeights","cur","weightedPoolInterface","ProtocolId","LinearFactory","getPoolFactoryInterface","AaveLinear","ERC4626Linear","EulerLinear","GearboxLinear","YearnLinear","protocolId","getFactoryAddress","mainToken","upperTargetEvm","linearPoolInterface","PoolFactory__factory","balancerContracts","of","ParamsBuilder","encoder","Gyro2","Gyro3","getEncoder","buildQueryJoinExactIn","maxAmountsInByToken","maxInWithoutBpt","buildQueryJoinExactOut","buildQueryExitToSingleToken","buildQueryExitProportionally","buildQueryExitExactOut","maxBptIn","minAmountsOutWithoutBpt","EmissionsService","liquidityGaugesRepository","proportionalAmounts","referenceTokenIndex","parseUnits","notImplemented","repositories","aprService","poolsForSimulations","graphService","poolsOnChain","joinService","exitService","feesService","volumeService","poolFactory","impermanentLossService","emissionsService","wrap","concerns","queries","methods","calcSpotPrice","calcProportionalAmounts","Queries.ParamsBuilder","impermanentLoss","generalisedJoin","generalisedExit","fees","volume","param","UnicodeNormalizationForm","Utf8ErrorReason","ignoreFunc","bytes","badCodepoint","BAD_PREFIX","UNEXPECTED_CONTINUE","o","OVERRUN","toUtf8Bytes","str","charCodeAt","c2","pair","arrayify","formatBytes32String","text","hexlify","HashZero","freeze","ignore","OVERLONG","INPUT_ERROR","WINDOW","window","JS_SHA3_NO_WINDOW","WEB_WORKER","self","JS_SHA3_NO_NODE_JS","versions","global","COMMON_JS","JS_SHA3_NO_COMMON_JS","module","ARRAY_BUFFER","JS_SHA3_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","CSHAKE_PADDING","SHIFT","RC","BITS","SHAKE_BITS","OUTPUT_TYPES","CSHAKE_BYTEPAD","JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW","isView","buffer","createOutputMethod","bits","padding","outputType","Keccak","update","createShakeOutputMethod","outputBits","createCshakeOutputMethod","createKmacOutputMethod","createOutputMethods","method","createMethod","algorithms","bytepad","Kmac","methodNames","algorithm","methodName","newMethodName","blocks","reset","finalized","block","blockCount","byteCount","outputBlocks","extraBytes","notString","lastByteIndex","right","encodeString","strs","paddingBytes","zeros","finalize","arrayBuffer","Uint32Array","digest","h","c0","c1","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","regexBytes","regexNumber","regexArray","Zeros","_pack","zeroPad","toTwos","byteLength","baseType","pack","tight","keccak256","sha3","keccak_256","protocolFeePercKey","gyroPoolTypeKey","encodedPoolTypeKey","GyroConfigRepositoryImpl","gyroConfigAddress","gyroConfigInterface","encodedPoolSpecificKey","hasSpecificKeyHex","hasPoolTypeKeyHex","hasDefaultKeyHex","hasSpecificKey","hasPoolTypeKey","hasDefaultKey","getUint","gaugeControllerInterface","gaugeControllerCheckpointerInterface","GaugeControllerMulticallRepository","gaugeControllerAddress","gaugeControllerCheckpointerAddress","getRelativeWeights","AbstractSubgraphRepository","attribute","findAllBy","skip","BalancerSubgraphRepository","blockHeight","GaugesSubgraphRepository","GaugeSharesRepository","desc","number","gaugeShares","mapType","subgraphGaugeShare","isKilled","findByUser","UserAddress","findByGauge","gaugeId","GaugeId","childLiquidityGaugeInterface","LiquidityGaugesMulticallRepository","getTotalSupplies","getWorkingSupplies","getInflationRates","currentWeek","getRewardCounts","rewardCounts","passingRewardCounts","gaugesWithRewards","startIndexes","gaugeIndex","flat","getRewardData","passingRewardTokens","decoded","LiquidityGaugesSubgraphRepository","qauges","preferentialGauge_not","preferentialGauge","LiquidityGaugeSubgraphRPCProvider","workingSupplies","relativeWeights","inflationRates","g","oldFactories","childGaugeAddresses","factory","compose","subgraphGauge","BalancerAPIClient","toPayload","jsonToGraphQLQuery","ms","mapToken","priceRateProviders","_f","_g","_h","_j","_k","isPaused","_l","subgraphToken","subPoolInfo","mapSubPools","metadata","mapSubPoolToken","PoolsSubgraphRepository","fetchAllPools","PoolsSubgraphOnChainRepository","poolsSubgraph","filterPools","fetchDefault","filteredPools","onchainPools","forceRefresh","onchainPool","PoolGaugesRepository","PoolJoinExitAttributes","PoolJoinExitRepository","Timestamp","Asc","joinExits","item","Sender","findJoins","findExits","findByPool","PoolSharesRepository","Balance","poolShares","subgraphPoolShare","PoolId","StaticTokenProvider","CoingeckoPriceRepository","baseTokenAddresses","platform","urlNative","debouncer","tokensPerPriceRequest","signal","isAxiosError","status","fetchNative","Assets","assetId","MATIC","XDAI","finally","inputAddress","baseAddress","nativePrice","CoingeckoHistoricalPriceRepository","urlRange","statusText","range","SubgraphPriceRepository","TokenPriceProvider","coingeckoRepository","subgraphRepository","aaveRates","HistoricalPriceProvider","FeeDistributorAbi","feeDistributorInterface","veBalInterface","FeeDistributorRepository","feeDistributorAddress","bbAUsdAddress","FeeDistributor","previousWeek","getPreviousWeek","fromTimestamp","midnight","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","daysSinceThursday","getUTCDay","weeksToGoBack","claimTokens","extractTokenBalance","vaultInterface","protocolFeesCollectorInterface","swapFeePercentagePromise","FeeCollectorRepository","getProtocolFeesCollector","collector","getSwapFeePercentage","swapFeePercentage","iProtocolFeePercentagesProvider","feesPromise","ProtocolFeesProvider","protocolFeePercentagesProviderAddress","yieldFee","getFees","protocolFees","TokenYieldsRepository","lc","yields","fetchBlockByTime","BlockNumberRepository","dayAgo","Data","subgraphQuery","poolJoinExits","poolGauges","blockNumbers","blockDayAgo","getBlockNumber","initialCoingeckoList","subgraphPriceRepository","coingeckoHistoricalRepository","poolType2PoolKind","LEGACY_STABLE","COMPOSABLE_STABLE","COMPOSABLE_STABLE_V2","WEIGHTED","setRelayerApproval","gaugeWithdrawal","gaugeDeposit","peekChainedReferenceValue","buildPath","buildLinearPath","buildMigrationPool","findTokens","nestedTokens","migrationBuilder","peek","fromGauge","toGauge","fromTokens","toTokens","exitOutputReferences","swapOutputReferences","joinAmount","migrationSteps","needsSwap","actions.setRelayerApproval","actions.gaugeWithdrawal","isComposable","actions.exit","swapPaths","getMainToken","mainFromTokens","mainToTokens","exitSwaps","fromIdx","toIdx","toPool","buildPaths","batchSwaps","actions.swaps","references","actions.join","actions.peekChainedReferenceValue","actions.gaugeDeposit","Migrations","poolsRepository","gaugesRepository","getExpectedBptOut","pool2pool","pool2poolWithGauges","gauge2gauge","steps","relayerReturnValue","expectedBptOut","ActionStep","BaseAction","mainTokenInIndex","mainTokenOutIndex","swapAssetInIndex","swapAssetOutIndex","swapReturn","opRefKey","actionStep","getActionStep","getActionAmount","hasTokenIn","actionHasTokenIn","hasTokenOut","actionHasTokenOut","getActionMinOut","opRef","nextOpRefKey","getActionOutputRef","opRefStart","getSender","receiver","getReceiver","TokenOut","Middle","TokenIn","tokenInIndexAction","tokenOutIndexAction","Direct","getFromInternal","isBptIn","getToInternal","isBptOut","getPoolKind","exitToken","bptAmtIn","exitPoolInput","encoded","getAmountIn","getAmountOut","fromInternal","joinToken","joinTokenIndex","approveTokens","isBpt","toInternal","getLimits","updateLimits","newSwap","isChainedSwap","canAddSwap","batchSwapInput","encodedBatchSwap","copy","addSwap","orderActions","actions","categorizedActions","enterActions","middleActions","categorizeActions","allActions","orderedActions","batchedSwaps","batchSwapActions","isExit","pricing","claimService","migrationService","hasFetched","isFetching","fetchFromCache","fetchAll","awaitEnoughPoolsFetched","nextToken","formattedArgs","__args","apiResponseData","totalChecks","rewardsBreakdown","tokenAprsBreakdown","providers","currentProviderIdx","fallbackQuery","currentProvider","func","race","lowercaseAddress","newJoin","newExit","getActions","totalIn","totalOut","diffOut","checkAmounts","spender","ownerAddress","nonces","Permit","hasJoinExit","specialization","normalizedSum"],"mappings":"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ZC,kBAAmB,CACjB,UACA,aACA,SACA,gBACA,QACA,QACA,QACA,MAEFC,OAAQ,CACNC,UAAW,CACT,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,uEAGJC,WAAY,CACVD,UAAW,CACT,qEACA,qEACA,uEAGJE,UAAW,CACT,6CAA8C,qBAC9C,6CAA8C,eAC9C,6CAA8C,aAC9C,6CAA8C,aAC9C,6CAA8C,6BAC9C,6CAA8C,6BAC9C,6CAA8C,cAC9C,6CAA8C,cAC9C,6CAA8C,aAC9C,6CAA8C,uBAC9C,6CAA8C,gBAEhDC,SAAU,CACRH,UAAW,CACT,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,uEAGJI,SAAU,CACR,qEAAsE,CACpEC,KAAM,4BACNC,SAAS,GAEX,qEAAsE,CACpED,KAAM,4BACNC,SAAS,GAEX,qEAAsE,CACpED,KAAM,sBACNC,SAAS,GAEX,qEAAsE,CACpED,KAAM,sBACNC,SAAS,KAkTb,CAACpB,EAAAA,QAAQ6B,SA7SkB,CAC3B3B,OAAQ,CACN4B,OAAQ,CACNL,GAAI,qEACJC,GAAI,sEAENK,QAAS,CACPN,GAAI,qEACJC,GAAI,sEAENM,KAAM,CACJA,KAAM,qEACNC,UACE,uEAGN9B,WAAY,CACVC,QAAS,GACTC,QAAS,GACTC,eAAgB,GAElBC,cAAe,6CACfC,YAAa,6CACbC,YAAa,CACXC,SAAU,IAEZC,UAAW,CAAC,IACZC,kBAAmB,CACjB,UACA,aACA,SACA,gBACA,QACA,QACA,QACA,MA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EACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,q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"}